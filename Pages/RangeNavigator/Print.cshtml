@page
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Charts
@section ControlsSection{
    @{
        var majorGridLines = new RangeNavigatorMajorTickLines { Width = 0.000001 };
        var chartMajorGridLines = new ChartMajorGridLines { Width = 0.000001 };
        var navigatorBorder = new { width = 0.000001 };
        var animation = new ChartAnimation { Enable = false };
        var lineStyle = new ChartAxisLine { Width = 0.000001 };
        var majorTickLines = new ChartMajorTickLines { Width = 0.000001 };
        var minorTickLines = new { width = 0.000001 };
        var crosshairTooltip = new ChartCrosshairTooltip { Enable = false };
        var line = new ChartBorder { Color = "transparent", Width = 0 };
        var border = new ChartBorder { Color = "Transparent", Width = 0 };


    }
    <div>
        <div class="col-lg-9 control-section">
            <div class="content-wrapper">
                <div id="container">
                    <ejs-rangenavigator id="container" labelPosition="Outside"
                                        majorTickLines="majorGridLines"
                                        load="onChartLoad" changed="changed">
                        <e-rangenavigator-tooltip enable="true"></e-rangenavigator-tooltip>
                        <e-rangenavigator-rangenavigatorseriescollection>
                            <e-rangenavigator-rangenavigatorseries xName="x" yName="y" type="StepLine" width="1">
                            </e-rangenavigator-rangenavigatorseries>
                        </e-rangenavigator-rangenavigatorseriescollection>
                    </ejs-rangenavigator>
                </div>
                <div id="chartcontainer">
                    <ejs-chart id="chart" load="window.load" height="350">
                        <e-chart-crosshairsettings enable=true lineType="Vertical" line="line"></e-chart-crosshairsettings>
                        <e-chart-primaryxaxis crosshairTooltip="crosshairTooltip" edgeLabelPlacement="Shift"
                                              majorGridLines="chartMajorGridLines"></e-chart-primaryxaxis>
                        <e-chart-primaryyaxis minimum="80" maximum="140"
                                              lineStyle="lineStyle"
                                              majorTickLines="majorTickLines">

                        </e-chart-primaryyaxis>
                        <e-chart-tooltipsettings enable="true" shared="true"></e-chart-tooltipsettings>
                        <e-chart-chartarea border="border"></e-chart-chartarea>
                        <e-series-collection>
                            <e-series xName="x" name="Product X" width="2" yName="y" type="Spline" animation="animation"></e-series>
                            <e-series xName="x" name="Product Y" width="2" yName="y" type="Spline" animation="animation"></e-series>
                        </e-series-collection>
                    </ejs-chart>
                </div>
            </div>
        </div>
        <div class="col-lg-3 property-section">
            <table id="property" title="Properties" style="width: 100%">
                <tbody>
                    <tr id="button-control" style="height: 50px">
                        <td align="center">
                            <div>
                                <ejs-button id="button" content="Print" iconCss="e-icons e-play-icon" cssClass="e-flat" isPrimary: true></ejs-button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <script src="~/scripts/datasource.js"></script>
    <script src="~/scripts/range-navigator/theme-color.js"></script>
    <script>
        var series1 = [];
        var series2 = [];
        var value = 100;
        var value1 = 120;
        for (var i = 0; i < 351; i++) {
            if (Math.random() > .5) {
                value += Math.random();
                value1 += Math.random();
            }
            else {
                value -= Math.random();
                value1 -= Math.random();
            }
            series1.push({ x: i, y: value });
            series2.push({ x: i, y: value1 });
        }
        var zoomFactor, zoomPosition;
        window.onChartLoad = function (args) {
            loadRangeNavigatorTheme(args);
            args.rangeNavigator.series[0].dataSource = series1;
            args.rangeNavigator.value = [150, 250];
            args.rangeNavigator.areaSeriesModule = new ej.charts.AreaSeries(args.rangeNavigator);
            args.rangeNavigator.lineSeriesModule = new ej.charts.LineSeries(args.rangeNavigator);
            args.rangeNavigator.stepLineSeriesModule = new ej.charts.StepLineSeries(args.rangeNavigator);
            args.rangeNavigator.dateTimeModule = new ej.charts.DateTime(args.rangeNavigator);
            args.rangeNavigator.logarithmicModule = new ej.charts.Logarithmic(args.rangeNavigator);
            args.rangeNavigator.rangeTooltipModule = new ej.charts.RangeTooltip(args.rangeNavigator);
        }
        window.changed = function (args) {
            zoomFactor = args.zoomFactor;
            zoomPosition = args.zoomPosition;
            if ((document.getElementById('chart').childNodes.length > 1)) {
                var chart = document.getElementById('chart').ej2_instances[0];
                chart.primaryXAxis.zoomFactor = args.zoomFactor;
                chart.primaryXAxis.zoomPosition = args.zoomPosition;
                chart.dataBind();
            }
        }
        window.load = function (args) {
            loadChartTheme(args);
            args.chart.series[0].dataSource = series1;
            args.chart.series[1].dataSource = series2;
            args.chart.zoomFactor = zoomFactor;
            args.chart.zoomPosition = zoomPosition;
        }
        document.getElementById('button').onclick = () => {
            var range = document.getElementById('container').ej2_instances[0];
            range.print(["container", "chart"]);
        };
    </script>
}
   @*custom code start*@
@section Scripts {

}

<style>
    #button-control {
        width: 100%;
        text-align: center;
    }

    #control-container {
        padding: 0px !important;
    }

    .e-play-icon::before {
        content: '\e813';
    }

    .e-print-icon::before {
        content: '\e34b';
    }

    .e-view.fabric .e-print-icon::before, .e-view.fabric-dark .e-print-icon::before {
        content: '\e7df';
    }

    .e-view.bootstrap .e-print-icon::before {
        content: '\ebd2';
    }

    .e-view.bootstrap4 .e-print-icon::before {
        content: '\e743';
    }

    .e-view.tailwind .e-print-icon::before, .e-view.tailwind-dark .e-print-icon::before {
        content: '\e76c';
    }

    .e-view.highcontrast .e-print-icon::before {
        content: '\ebf9';
    }

    .e-view.bootstrap5\.3 .e-print-icon::before, .e-view.bootstrap5\.3-dark .e-print-icon::before {
        content: '\e75d';
    }

    .e-view.fluent .e-print-icon::before, .e-view.fluent-dark .e-print-icon::before {
        content: '\e75d';
    }

    .e-view.material3 .e-print-icon::before, .e-view.material3-dark .e-print-icon::before {
        content: '\e75d';
    }

    .e-view.fluent2 .e-print-icon::before, .e-view.fluent2-dark .e-print-icon::before, .e-view.fluent2-highcontrast .e-print-icon::before {
        content: '\e75d';
    }

    .e-export-icon::before {
        content: '\e728';
    }
 
    .e-view.fabric .e-export-icon::before, .e-view.fabric-dark .e-export-icon::before {
        content: '\e710';
    }
 
    .e-view.bootstrap4 .e-export-icon::before {
        content: '\e780';
    }
 
    .e-view.tailwind-dark .e-export-icon::before, .e-view.tailwind .e-export-icon::before {
        content: '\e7bf';
    }
 
    .e-view.highcontrast .e-export-icon::before {
        content: '\e710';
    }
 
    .e-view.bootstrap5\.3 .e-export-icon::before, .e-view.bootstrap5\.3-dark .e-export-icon::before {
        content: '\e72e';
    }

    .e-view.fluent .e-export-icon::before, .e-view.fluent-dark .e-export-icon::before {
        content: '\e72e';
    }

    .e-view.fluent2 .e-export-icon::before, .e-view.fluent2-dark .e-export-icon::before, .e-view.fluent2-highcontrast .e-export-icon::before {
        content: '\e72e';
    }
    
    .e-view.material3 .e-export-icon::before, .e-view.material3-dark .e-export-icon::before {
        content: '\e72e';
    }
</style>
@section Meta{
    <meta name="description" content="This demo for Essential JS2 Range Navigator control shows how to print the charts and export the chart contents to SVG, PDF, JPEG, PNG, and Excel formats at client-side." />
}
   @*custom code end*@

@section ActionDescription{
    <p>
        This sample illustrates the print feature in the range navigator. You can print the range navigator directly from the browser by clicking print.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the print feature. The rendered range navigator can be printed directly from the browser by calling the public method print.
    </p>
    <p>
        More information on the print can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/range-navigator/export" aria-label="Navigate to the documentation for Export and print in ASP.NET Core Range navigator control">documentation section</a>.
    </p>
}