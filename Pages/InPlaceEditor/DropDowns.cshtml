@page

@using Syncfusion.EJ2;
@using Syncfusion.EJ2.InPlaceEditor;

@{
    var dropdownValue = "Canada";
    var autoValue = "Australia";
    var comboValue = "Finland";
    var multiValue = new string[] {"Canada", "Bermuda" };
    string[] data = new string[] { "Australia", "Bermuda", "Canada", "Cameroon", "Denmark", "Finland", "Greenland", "Poland" };
    var popupSettings = new  InPlaceEditorPopupSettings { Model = new { width= "auto" }  };
    var multiSelectData = new { placeholder = "Choose the countries", dataSource = data, mode = "Box" };
    var dropdownData = new { placeholder = "Find a country", dataSource = data };
    var autocompleteData = new { placeholder = "Type to search country", dataSource = data };
    var comboData = new { placeholder = "Find a country", dataSource = data };
    var modeData = new string[] { "Inline", "Popup" };
}

@section ControlsSection{
    <div class="col-lg-8 control-section inplace-control-section drop-down-layout">
        <div class="control_wrapper">
            <table>
                <tr>
                    <td>
                        <label class="control-label">
                            DropDownList
                        </label>
                    </td>
                    <td>
                        <ejs-inplaceeditor id="dropdownEle" mode="Inline" type="DropDownList" value="dropdownValue" model="dropdownData" created="dropCreated">
                        </ejs-inplaceeditor>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label">
                            AutoComplete
                        </label>
                    </td>
                    <td>
                        <ejs-inplaceeditor id="autoCompleteEle" mode="Inline" type="AutoComplete" value="autoValue" model="autocompleteData" created="autoCreated">
                        </ejs-inplaceeditor>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label">
                            ComboBox
                        </label>
                    </td>
                    <td>
                        <ejs-inplaceeditor id="comboBoxEle" mode="Inline" type="ComboBox" value="comboValue" model="comboData" created="comboCreated">
                        </ejs-inplaceeditor>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label">
                            MultiSelect
                        </label>
                    </td>
                    <td>
                        <ejs-inplaceeditor id="multiSelectEle" mode="Inline" type="MultiSelect" value="multiValue" model="multiSelectData" popupSettings="popupSettings" created="multiCreated">
                        </ejs-inplaceeditor>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tr>
                <td>
                    <div> Mode</div>
                </td>
                <td>
                    <div>
                        <ejs-dropdownlist id="editorMode" class="form-control" width="90%" dataSource="modeData" change="changeEditorMode" index="0"></ejs-dropdownlist>
                    </div>
                </td>
            </tr>
        </table>
    </div>
}

@section ActionDescription{
    <p>
        This sample demonstrates the usage of drop-down components such as AutoComplete, ComboBox, DropDownList, and MultiSelect. Click on the dotted input element to switch to the
        editable state of the corresponding integrated component.
    </p>
}

@section Description{
    <p>
        This sample illustrates the way to integrate drop-down components with <code>In-place Editor</code>. The
        applicable types of components are:
    </p>
    <p>
        <ul>
            <li>
                <code>DropDownList</code>
            </li>
            <li>
                <code>AutoComplete</code>
            </li>
            <li>
                <code>ComboBox</code>
            </li>
            <li>
                <code>MultiSelect</code>
            </li>
        </ul>
    </p>
    <p>
        The above components and their features are editable in place and can be customized with the model
        properties of the specific component.
    </p>
    <p>
        More information on the <code>In-place Editor</code> instantiation can be found in theÂ <a target="_blank"
                                                                                                  href="https://ej2.syncfusion.com/aspnetcore/documentation/in-place-editor/getting-started" aria-label="Navigate to the documentation for getting started with ASP.NET Core In-place Editor control">
            documentation section
        </a>.
    </p>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the DropDown Components in ASP.NET Core In-place Editor control. Explore here for more details."/>
                }

@*custom code end*@

@section PreScripts {
    <script type="text/javascript">
        var dropObj, autoObj, comboObj, multiObj;
        function dropCreated() {
        dropObj = this;
    }
    function autoCreated() {
        autoObj = this;
    }
    function comboCreated() {
        comboObj = this;
    }
    function multiCreated() {
        multiObj = this;
    }
        function changeEditorMode(e) {
            dropObj.mode = autoObj.mode = comboObj.mode = multiObj.mode = e.itemData.value;
        }
        document.getElementById('right-pane').onscroll = function () {
            var mode = document.getElementById("editorMode");
            if (mode.ej2_instances[0].value === 'Inline') { return; }
            if (dropObj.element.querySelectorAll('.e-editable-open').length > 0)
                dropObj.enableEditMode = false;
            if (autoObj.element.querySelectorAll('.e-editable-open').length > 0)
                autoObj.enableEditMode = false;
            if (comboObj.element.querySelectorAll('.e-editable-open').length > 0)
                comboObj.enableEditMode = false;
            if (multiObj.element.querySelectorAll('.e-editable-open').length > 0)
                multiObj.enableEditMode = false;
        }
    </script>
}

<style>
    .inplace-control-section.drop-down-layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,
    .e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide {
        display: block;
        visibility: hidden;
    }
    /* custom code start */
    .inplace-control-section.drop-down-layout .control_wrapper label {
        padding: 15px;
        text-align: left;
        font-weight: 400;
        font-size: 14px;
        margin-bottom: 0px;
    }

    .inplace-control-section.drop-down-layout .control_wrapper {
        margin: auto;
        max-width: 400px;
    }

        .inplace-control-section.drop-down-layout .control_wrapper table {
            margin: auto;
        }

            .inplace-control-section.drop-down-layout .control_wrapper table td {
                width: 200px;
                height: 100px;
            }
    /* custom code end */

    #dropdownProperty table td {
        width: 50%;
    }

    #dropdownProperty .property-panel-table div {
        padding-left: 10px;
        padding-top: 10px;
    }
</style>
@section Title{
                    <title>ASP.NET Core In-place Editor DropDown Components Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of DropDown Components in ASP.NET Core In-place Editor Control</h1>
                }