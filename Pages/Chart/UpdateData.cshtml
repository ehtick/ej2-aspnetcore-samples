@page
@model EJ2CoreSampleBrowser.Pages.Chart.UpdateDataModel
@using Syncfusion.EJ2
@using Newtonsoft.Json
@section ControlsSection {

    <div class="control-section" align='center'>
        <ejs-accumulationchart id="UpdateDataSource" title="Average Stock Market Prices of Leading Tech Giants" load="load" textRender="textRender" enableBorderOnMouseMove="false">
            <e-accumulationchart-legendsettings visible="false">
            </e-accumulationchart-legendsettings>
            <e-accumulationchart-centerLabel text="2010">
                <e-centerlabel-textstyle fontWeight="600"></e-centerlabel-textstyle>
            </e-accumulationchart-centerLabel>
            <e-accumulation-series-collection>
                <e-accumulation-series dataSource="@Model.ChartPoints" xName="X" yName="Y" innerRadius="65%" type="@Syncfusion.EJ2.Charts.AccumulationType.Pie">
                    <e-accumulationseries-datalabel visible="true" position="@Syncfusion.EJ2.Charts.AccumulationLabelPosition.Outside">
                        <e-connectorstyle width="2" type="@Syncfusion.EJ2.Charts.ConnectorType.Line"></e-connectorstyle>
                        <e-font fontWeight="600"></e-font>
                    </e-accumulationseries-datalabel>
                </e-accumulation-series>
            </e-accumulation-series-collection>
        </ejs-accumulationchart>
    </div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>
        var year = 10;
        var intervalId;
        var yearIndex = 1;

        var chartDataSet = [
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints2)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints3)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints4)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints5)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints6)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints7)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints8)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints9)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints10))
        ];

        var load = function (args) {
            year = 10;
            yearIndex = 1;
            args.accumulation.centerLabel.text = "2010";
            loadAccumulationChartTheme(args);
            args.accumulation.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.accumulation.centerLabel.textStyle.size = ej.base.Browser.isDevice ? "25px" : "40px";
            args.accumulation.series[0].radius = ej.base.Browser.isDevice ? "40%" : "75%";
            args.accumulation.series[0].dataLabel.connectorStyle.length = ej.base.Browser.isDevice ? "7px" : "18px";
            args.accumulation.titleStyle.size = ej.base.Browser.isDevice ? "16px" : "18px";

            updateClearInterval();

            intervalId = setInterval(function () {
                var container = document.getElementById('UpdateDataSource');
                if (container && container.id === args.chart.element.id) {
                    var newData = (chartDataSet[yearIndex] || []).map(function (item) {
                        return { X: item.X, Y: item.Y };
                    });
                    year = year < 20 ? year + 1 : 10;
                    args.accumulation.centerLabel.text = "20" + year;
                    if (args.accumulation.series.length > 0) {
                        args.accumulation.series[0].setData(newData, 500);
                    }
                    yearIndex = yearIndex < 9 ? yearIndex + 1 : 1;
                } else {
                    updateClearInterval();
                }
            }, 1500);
        };

        function updateClearInterval() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        };

        function textRender(args) {
            args.text = ej.base.Browser.isDevice ? String(args.point.x) : String(args.point.x + ": " + "$" + args.text);
        };
    </script>
}

@*custom code start*@
@section Meta {
    <meta name="description" content="This example demonstrates the Update Data Source in ASP.NET Core Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription {
    <div id="action-description">
        <p>
            This sample demonstrates how the data source for the donut chart can dynamically update at regular intervals over a span of years.
        </p>
    </div>
}
@section Description {
    <div id="description">
        <p>
            In this example, you can see how to render and configure a donut chart that displays the average stock market prices of leading tech giants, with each entry featuring the company name and corresponding stock price. The donut chart updates dynamically using the
            <code>SetData</code> method to show the progression of stock prices from 2010 to 2020.
        </p>
        <p>
            More information about the donut series can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/accumulation-chart/pie-dough-nut#doughnut-chart" aria-label="Navigate to the documentation for Donut Chart in ASP.NET Core Accumulation Chart control">documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}
@section Title {
    <title>ASP.NET Core Chart Update Data Source Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of Update Data Source in ASP.NET Core Chart Control</h1>
}
