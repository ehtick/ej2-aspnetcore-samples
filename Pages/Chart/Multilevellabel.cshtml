@page
@model EJ2CoreSampleBrowser.Pages.Chart.MultilevellabelModel
@using Syncfusion.EJ2

@section ControlsSection{
<div class="control-section" align="center">
    <ejs-chart id="container" load="load" title="Fruits and Vegetables - Season" pointRender="labelRender">
        <e-chart-chartarea>
            <e-chartarea-border width="0"></e-chartarea-border>
        </e-chart-chartarea>
        <e-chart-legendsettings visible="false">
        </e-chart-legendsettings>
        <e-chart-primaryxaxis isIndexed="true" valueType="@Syncfusion.EJ2.Charts.ValueType.Category" labelRotation="90" interval="1" labelIntersectAction="@Syncfusion.EJ2.Charts.LabelIntersectAction.None">
            <e-majorgridlines width="0"></e-majorgridlines>
            <e-minorgridlines width="0"></e-minorgridlines>
        </e-chart-primaryxaxis>
        <e-chart-primaryyaxis minimum="0" maximum="120" interval="30">
            <e-majorticklines width="0"></e-majorticklines>
            <e-linestyle width="0"></e-linestyle>
            <e-labelstyle color="Transparent"></e-labelstyle>
        </e-chart-primaryyaxis>
        <e-series-collection>
            <e-series dataSource="@Model.ChartPoints" xName="Fruits" yName="Sales" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                <e-series-marker>
                    <e-series-datalabel visible="true" position="@Syncfusion.EJ2.Charts.LabelPosition.Outer"></e-series-datalabel>
                </e-series-marker>
            </e-series>
        </e-series-collection>
    </ejs-chart>
</div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>
        function load(args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.border = { type: 'Rectangle', width: 1 };
            args.chart.primaryXAxis.multiLevelLabels = (ej.base.Browser.isDevice ? ([
                {
                    border: { type: 'Rectangle' },
                    categories: [
                        { start: -0.5, end: 2.5, text: 'In Season', },
                        { start: 2.5, end: 5.5, text: 'Out of Season', },
                        { start: 5.5, end: 7.5, text: 'In Season', },
                        { start: 7.5, end: 9.5, text: 'Out of Season', },
                    ]
                }, {
                    border: { type: 'Rectangle' },
                    textStyle: { fontWeight: 'Bold' },
                    categories: [
                        { start: -0.5, end: 5.5, text: 'Fruits', },
                        { start: 5.5, end: 9.5, text: 'Vegetables', },
                    ]
                }]) : [
                    {
                        border: { type: 'Rectangle' },
                        categories: [
                            { start: -0.5, end: 0.5, text: 'Seedless', },
                            { start: 0.5, end: 2.5, text: 'Seeded', },
                            { start: 2.5, end: 3.5, text: 'Seedless', },
                            { start: 3.5, end: 5.5, text: 'Seeded', },
                            { start: 5.5, end: 6.5, text: 'Seedless', },
                            { start: 6.5, end: 7.5, text: 'Seeded', },
                            { start: 7.5, end: 8.5, text: 'Seedless', },
                            { start: 8.5, end: 9.5, text: 'Seeded', }
                        ]
                    }, {
                        border: { type: 'Rectangle' },
                        categories: [
                            { start: -0.5, end: 2.5, text: 'In Season', },
                            { start: 2.5, end: 5.5, text: 'Out of Season', },
                            { start: 5.5, end: 7.5, text: 'In Season', },
                            { start: 7.5, end: 9.5, text: 'Out of Season', },
                        ]
                    }, {
                        border: { type: 'Rectangle' },
                        textStyle: { fontWeight: 'Bold' },
                        categories: [
                            { start: -0.5, end: 5.5, text: 'Fruits', },
                            { start: 5.5, end: 9.5, text: 'Vegetables', },
                        ]
                    }])
        }
        function labelRender(args) {
            pointRender(args);
        }
    </script>
}
@*custom code start*@
@section Scripts {

}

<style>

    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the Multilevel labels in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This example shows multilevel labels in the chart axis. We can add layers of labels to the axis using start and end range values.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to group axis labels based on ranges by using <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabels.html" aria-label="Navigate to the class reference for ChartMultiLevelLabels">ChartMultiLevelLabels</a>. You can customize the text in each level by using <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_Border" aria-label="Navigate to the Border property reference for ASP.NET Core ChartMultiLevelLabel">ChartAxisMultiLevelLabelBorder</a> and  <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_TextStyle" aria-label="Navigate to the TextStyle property reference for ASP.NET Core ChartMultiLevelLabel">ChartAxisMultiLevelLabelTextStyle</a>.
    </p>
    <p>
        Axis labels in each level can be arranged smartly using the <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_Overflow" aria-label="Navigate to the Overflow property reference for ASP.NET Core ChartMultiLevelLabel">Overflow</a> property. Its values and their behaviors are:
    </p>
    <ul>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#Syncfusion_EJ2_Charts_LabelIntersectAction_Trim" aria-label="Navigate to the Trim field reference for ASP.NET Core Charts LabelIntersectAction">Trim</a></b> - Trim the label when it intersect.</li>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#Syncfusion_EJ2_Charts_LabelIntersectAction_Wrap" aria-label="Navigate to the Wrap field reference for ASP.NET Core Charts LabelIntersectAction">Wrap</a></b> - Wrap the label when it intersect.</li>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#Syncfusion_EJ2_Charts_LabelIntersectAction_None" aria-label="Navigate to the None field reference for ASP.NET Core Charts LabelIntersectAction">None</a></b> - Shows all the labels.</li>
    </ul>
    <p>
        More information about the multiple level labels can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/axis-labels#multilevel-labels" aria-label="Navigate to the documentation for multilevel labels in ASP.NET Core Chart control">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET Core Chart Multilevel labels Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Multilevel labels in ASP.NET Core Chart Control</h1>
                }