@page
@using Syncfusion.EJ2
@section ControlsSection{
  <div class="control-section">
    <div id="container" align="center">
        <ejs-chart id="lineContainer"  load="load"
                       title="Container freight rate" pointRender="remotePointRender" tooltipRender="tooltipRender" axisLabelRender="axisLabelRender">

            <e-chart-primaryxaxis rangePadding="@Syncfusion.EJ2.Charts.ChartRangePadding.Additional" valueType="@Syncfusion.EJ2.Charts.ValueType.Category">
                <e-majorgridlines width="0"></e-majorgridlines>
                <e-majorticklines width="0"></e-majorticklines>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis title="Freight rate in U.S. dollars">
                <e-majorgridlines width="1"></e-majorgridlines>
                <e-majorticklines width="0"></e-majorticklines>
                <e-linestyle width="0"></e-linestyle>
            </e-chart-primaryyaxis>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-legendsettings visible="false"></e-chart-legendsettings>
            <e-chart-tooltipsettings enable="true" header="<b>Freight rate</b>"></e-chart-tooltipsettings>
            <e-series-collection>
                <e-series xName="CustomerID" yName="Freight" name="Story Point" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column" query="new ej.data.Query().take(5)">
                    <e-data-manager url='http://localhost:62928/api/orders'></e-data-manager>
                    <e-series-marker>
                        <e-series-datalabel visible="true" position="@Syncfusion.EJ2.Charts.LabelPosition.Top" format="{value}K">
                            <e-font color="#ffffff" fontWeight="600"></e-font>
                        </e-series-datalabel>
                    </e-series-marker>
                </e-series>
            </e-series-collection>
        </ejs-chart>
    </div>
    <div id="waitingpopup" class="waitingpopup" style="display:none">
        <span id="gif" class="image"></span>
    </div>
</div>
    <script src="~/scripts/chart/financial-data.js"></script>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>
        function load(args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.labelIntersectAction = ej.base.Browser.isDevice?'None':'Rotate45';
            args.chart.primaryXAxis.labelRotation = ej.base.Browser.isDevice?'-45':'0';
        }

        function remotePointRender(args) {
            pointRender(args);
        };

        var tooltipRender = function (args) {
            args.text = args.data.pointX + ': ' + '<b>' + '$' + args.data.pointY * 1000 + '</b>';
        }

        var axisLabelRender = function (args) {
            if (args.axis.name === 'primaryYAxis') {
                   args.text =  '' + args.value * 1000;
            }
        }
    </script>
}
@*custom code start*@
@section Scripts {

}

<style>

    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the Remote Data in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample shows the way in which the Charts component can be bound to a remote service. The data source of the chart is bound to remote data using the DataManager component.
    </p>
}
@section Description{
    <p>
        The Charts component supports data binding. The DataManager component can be used to configure the Charts component to bind remote data.
    </p>
    <p>
        The DataManager, which acts as an interface between the service endpoint and the chart, will require the following minimum information to interact properly with the service endpoint:
    </p>
    <ul>
        <li><code>DataManager.Url</code> - Defines the service endpoint to fetch the data.</li>
        <li>
            <code>DataManager.Adaptor</code> - Defines the adaptor option. By default, <code>ODataAdaptor</code> is used for remote binding.
        </li>
    </ul>
    <p>
        The adaptor is responsible for processing the response and request from and to the service endpoint. They are,
    </p>
    <ul>
        <li>
            <code>UrlAdaptor</code> - Use this to interact with any remote service. This is the base adaptor for all remote based adaptors.
        </li>
        <li><code>ODataAdaptor</code> - Use this to interact with OData endpoints.</li>
        <li><code>ODataV4Adaptor</code> - Use this to interact with OData V4 endpoints.</li>
        <li><code>WebApiAdaptor</code> - Use this to interact with Web API created under OData standards.</li>
    </ul>
    <p>
        In this demo, remote data is bound by assigning service data as an instance of
        <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.DataManager.html" aria-label="Navigate to the class reference for DataManager">DataManager
        </a> component and a query.
    </p>
    <p>
        More information about the remote data binding can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/working-with-data#remote-data" aria-label="Navigate to the documentation for remote data binding in ASP.NET Core Chart control">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET Core Chart Remote Data Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Remote Data in ASP.NET Core Chart Control</h1>
                }