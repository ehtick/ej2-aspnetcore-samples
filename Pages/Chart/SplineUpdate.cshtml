@page
@model EJ2CoreSampleBrowser.Pages.Chart.SplineUpdate

@using Syncfusion.EJ2
@section ControlsSection {
    <div class="control-section" align="center">
        <ejs-chart id="spline" load="load" axisRangeCalculated="axisRangeCalculated" title="Live data">
            <e-chart-primaryxaxis valueType="@Syncfusion.EJ2.Charts.ValueType.DateTime" interval="7" plotOffsetRight="30" labelIntersectAction="@Syncfusion.EJ2.Charts.LabelIntersectAction.Hide">
                <e-majorgridlines width="0"></e-majorgridlines>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis title="Value" interval="20">
                <e-majorticklines width="0"></e-majorticklines>
                <e-linestyle width="0"></e-linestyle>
            </e-chart-primaryyaxis>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-series-collection>
                <e-series dataSource="@Model.ChartPoints" xName="X" yName="Y" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Spline" width="2">
                    <e-series-marker visible="true" height="7" width="7" isFilled="true"></e-series-marker>
                </e-series>
            </e-series-collection>
        </ejs-chart>
    </div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>
        var intervalId;

        function load(args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.edgeLabelPlacement = ej.base.Browser.isDevice ? "None" : "Shift";
            args.chart.primaryXAxis.labelRotation = ej.base.Browser.isDevice ? 45 : 0;

            splineClearInterval();

            intervalId = setInterval(function () {
                var container = document.getElementById('spline');
                if (container) {
                    if (args.chart && args.chart.series.length > 0 && args.chart.series[0].dataSource) {
                        var lastDataPointIndex = args.chart.series[0].dataSource.length - 1;
                        if (lastDataPointIndex >= 0) {
                            var timestamp = args.chart.series[0].dataSource[lastDataPointIndex].X;
                            var lastTimestamp = new Date(timestamp).getTime();
                            var x = new Date(lastTimestamp + 2000);
                            var y;
                            if (x.getSeconds() % 3 === 0) {
                                y = Math.max(30, Math.random() * 150);
                            } else if (x.getSeconds() % 2 === 0) {
                                y = Math.max(30, Math.random() * 200);
                            } else {
                                y = Math.max(30, Math.random() * 100);
                            }
                            args.chart.series[0].addPoint({ X: x, Y: y }, 800);
                            args.chart.series[0].removePoint(0, 800);
                        }
                    }
                }
                else {
                    splineClearInterval();
                }
            }, 1000);
        }
        function splineClearInterval() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        }
        function axisRangeCalculated(args) {
            if (args.axis.name === 'primaryXAxis') {
                var lastPoint = args.axis.series[0].points[args.axis.series[0].points.length - 1].x;
                args.maximum = new Date(lastPoint).getTime() + 500;
            }
        }
    </script>
}
@*custom code start*@
@section Scripts {
}
<style>
    #control-container {
        padding: 0px !important;
    }

    #spline_Series_0_Point_15_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }
    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 10px;
        }
        100% {
            stroke-opacity: 0;
            stroke-width: 20px;
        }
    }
</style>
@section Meta{
    <meta name="description" content="This example demonstrates the Update Spline in ASP.NET Core Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample demonstrates how to add and remove data in a spline chart, allowing modification of the data at set intervals.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure a spline chart to display data that updates every second using the <code>AddPoint</code> method, with old data being removed using the <code>RemovePoint</code> method. The X-axis represents the time at which the data is added, while the Y-axis displays the data values.
    </p>
    <p>
        More information on the spline series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/chart-types/spline" aria-label="Navigate to the documentation for Spline Chart in ASP.NET Core Chart control">documentation section</a>.
    </p>
}
@section Title{
    <title>ASP.NET Core Chart Update Spline Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Update Spline in ASP.NET Core Chart Control</h1>
}
