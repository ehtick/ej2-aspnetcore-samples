@page
@using Syncfusion.EJ2
@section ControlsSection{
   <div class="control-section">
        <div id="container" align="center">
            <ejs-chart id="lineContainer"  load="load" title="Stock Price Analysis">
                <e-chart-chartarea>
                    <e-chartarea-border width="0"></e-chartarea-border>
                </e-chart-chartarea>
                <e-chart-primaryxaxis valueType="@Syncfusion.EJ2.Charts.ValueType.DateTime" edgeLabelPlacement="@Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift">
                    <e-majorgridlines width="0"></e-majorgridlines>
                </e-chart-primaryxaxis>
                <e-chart-primaryyaxis title="Price" labelFormat="${value}" rangePadding="@Syncfusion.EJ2.Charts.ChartRangePadding.None">
                    <e-linestyle width="0"></e-linestyle>
                    <e-majorticklines width="0"></e-majorticklines>
                    <e-minorticklines width="0"></e-minorticklines>
                </e-chart-primaryyaxis>
                <e-chart-crosshairsettings enable="true" lineType="@Syncfusion.EJ2.Charts.LineType.Vertical">
                    <e-crosshairsettings-line color="rgba(204,214,235,0.25)" width="20"></e-crosshairsettings-line>
                </e-chart-crosshairsettings>
                <e-chart-tooltipsettings enable="true" shared="true"></e-chart-tooltipsettings>
                <e-chart-legendsettings enableHighlight="true">
                </e-chart-legendsettings>
                <e-series-collection>
                    <e-series name="Product X" xName="Period" width="2" yName="StockPrice" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line"></e-series>
                    <e-series name="Product Y" xName="Period" width="2" yName="StockPrice" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line"></e-series>
                </e-series-collection>
            </ejs-chart>
        </div>
    </div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>
        function load(args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            var series1 = [];
            var series2 = [];
            var point1;
            var point2;
            var value = 80;
            var value1 = 90;
            var i;
            for (i = 1; i < 500; i++) {
                if (Math.random() > .5) {
                    value += Math.random();
                    value1 += Math.random();
                }
                else {
                    value -= Math.random();
                    value1 -= Math.random();
                }
                point1 = { Period: new Date(1960, (i + 1), i), StockPrice: Math.round(value) };
                point2 = { Period: new Date(1960, (i + 1), i), StockPrice: Math.round(value1) };
                series1.push(point1);
                series2.push(point2);
            }
            args.chart.series[0].dataSource = series1;
            args.chart.series[1].dataSource = series2;
        }
    </script>
}
@*custom code start*@
@section Scripts {

}

<style>

    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the Local Data in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample shows the plotting of local data in a stock price analysis of two products over a period of time.
    </p>
}
@section Description{
    <p>
        The Charts control supports data binding. The <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_DataSource" aria-label="Navigate to the DataSource property reference for ASP.NET Core ChartSeries">DataSource</a> property can be assigned either as list of objects or with instance of <code>DataManager</code>.
    </p>
    <p>
        In this demo, the list of objects is assigned as the data source to the Charts control. The chart can be bound to IEnumerable, IQueryable and ObservableCollection data sources.
    </p>
    <p>
        More information about the local data binding can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/working-with-data#local-data" aria-label="Navigate to the documentation for Local Data in ASP.NET Core Chart control">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET Core Chart Local Data Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Local Data in ASP.NET Core Chart Control</h1>
                }