@page
@model EJ2CoreSampleBrowser.Pages.Chart.LiveDataSortingModel
@using Syncfusion.EJ2
@using Newtonsoft.Json
@section ControlsSection {

    <div class="control-section">
        <div id="container" align="center">
            <ejs-chart id="LiveDataSorting" title="Nitrogen Fertilizer Usage" load="load" pointRender="labelRender" axisRangeCalculated="axisRangeCalculated" textRender="textRender">
                <e-chart-primaryxaxis valueType="@Syncfusion.EJ2.Charts.ValueType.Category" 
                                      labelRotation="-90"
                                      labelIntersectAction="@Syncfusion.EJ2.Charts.LabelIntersectAction.None"
                                      interval="1">
                    <e-majorgridlines width="0"></e-majorgridlines>
                    <e-majorticklines width="0"></e-majorticklines>
                    <e-linestyle width="0"></e-linestyle>
                    <e-border width="0"></e-border>
                </e-chart-primaryxaxis>
                <e-chart-primaryyaxis title="Nitrogen Fertilizer Use (KG/Ha)" interval="30" labelFormat="{value}">
                    <e-majorticklines width="0"></e-majorticklines>
                    <e-linestyle width="0"></e-linestyle>
                    <e-border width="0"></e-border>
                </e-chart-primaryyaxis>
                <e-chart-chartarea>
                    <e-chartarea-border width="0"></e-chartarea-border>
                </e-chart-chartarea>
                <e-series-collection>
                    <e-series dataSource="@Model.ChartPoints" columnWidth="0.7" xName="X" yName="Y" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                        <e-series-marker visible="false">
                            <e-series-datalabel visible="true" position="@Syncfusion.EJ2.Charts.LabelPosition.Top" format="{value}" angle="-90">
                                <e-font color="#ffffff"></e-font>
                            </e-series-datalabel>
                        </e-series-marker>
                        <e-series-cornerradius topLeft="5" topRight="5">
                        </e-series-cornerradius>
                    </e-series>
                </e-series-collection>
            </ejs-chart>
        </div>
    </div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script type="text/javascript">
        var yearIndex = 1;
        var intervalId;

        var chartDataSets = [
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints2)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints3)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints4)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints5)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints6)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints7)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints8)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints9)),
            @Html.Raw(JsonConvert.SerializeObject(@Model.ChartPoints10))
        ];

        function load(args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.series[0].marker.dataLabel.enableRotation = ej.base.Browser.isDevice ? true : false;

            updateClearInterval();

            intervalId = setInterval(function () {
                var container = document.getElementById('LiveDataSorting');
                if (container && container.id === args.chart.element.id) {
                    var newData = (chartDataSets[yearIndex] || []).map(function (item) {
                        return { X: item.X, Y: item.Y };
                    });
                    if (args.chart.series.length > 0) {
                        var newSource = new ej.charts.sort(newData, ['Y'], true);
                        args.chart.series[0].setData(newSource, 1400);
                    }
                    yearIndex = yearIndex < 9 ? yearIndex + 1 : 1;
                } else {
                    updateClearInterval();
                }
            }, 2000);
        };
        function updateClearInterval() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        };
        function labelRender(args) {
            pointRender(args);
        };
        function axisRangeCalculated(args) {
            if (args.axis.name === 'primaryYAxis') {
                if (args.maximum > 120) {
                    args.interval = 30;
                }
                else {
                    args.interval = 20;
                }
                if (args.maximum > 150) {
                    args.maximum = 150;
                }
            }
        };
        function textRender(args) {
            if (ej.base.Browser.isDevice) {
                args.series.marker.dataLabel.font.size = '10px';
            }
        };
    </script>
}
@section Meta {
    <meta name="description" content="This example demonstrates the Live Data Sorting in ASP.NET Core Chart control. Explore here for more details." />
}
@section ActionDescription {
    <div id="action-description">
        <p>
            This column chart demonstrates the dynamic updating of data in real-time. The chart visualizes nitrogen fertilizer use per hectare of cropland, updating every few seconds to show sorted data over a span of years.
        </p>
    </div>
}
@section Description {
    <div id="description">
        <p>
            In this example, you can observe how the column chart updates dynamically with sorted data using the <code>SetData</code> method. The data shows nitrogen fertilizer usage from 2010 to 2019, and the chart periodically updates and sorts its data to reflect the latest information.
        </p>
        <p>
            More information on the column series can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/chart-types/column" aria-label="Navigate to the documentation for Column Chart in ASP.NET Core Chart control">documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}
@*custom code start*@
@section Scripts {
}

<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@*custom code end*@
@section Title {
    <title>ASP.NET Core Chart Live Data Sorting Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of Live Data Sorting in ASP.NET Core Chart Control</h1>
}
