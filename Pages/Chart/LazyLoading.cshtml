@page
@using Syncfusion.EJ2

@{
    var range = new { minimum = new DateTime(2009, 01, 01, 00, 00, 00), maximum = new DateTime(2014, 01, 01, 00, 00, 00) };
    var type = new String[] { "Range", "Points Length" };
    var min = new DateTime(2009, 1, 1);
    var max = new DateTime(2014, 1, 1);
}
@section ControlsSection{

    <div class="col-md-8 control-section" align="center">
        <div id="spinner"> </div>
        <ejs-chart id="container" load="load" scrollEnd="scrollEnd" loaded="loaded" title="Network Load">
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-primaryxaxis edgeLabelPlacement="@Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift" valueType="@Syncfusion.EJ2.Charts.ValueType.DateTime" skeleton="yMMM" skeletonType="@Syncfusion.EJ2.Charts.SkeletonType.Date">
                <e-scrollbarSettings enable="true" pointsLength="1000" enableZoom="false" height="14"></e-scrollbarSettings>
                <e-majorgridlines width="1"></e-majorgridlines>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis interval="10" title="Server Load" labelFormat="{value}MB">
                <e-majorticklines width="1"></e-majorticklines>
                <e-linestyle width="1"></e-linestyle>
            </e-chart-primaryyaxis>
            <e-series-collection>
                <e-series xName="x" yName="y" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line">
                    <e-series-animation enable="false"></e-series-animation>
                </e-series>
            </e-series-collection>
            <e-chart-tooltipsettings enable="true" showNearestTooltip="true" enableHighlight="true" header="<b>${point.x}</b>" format="Server load : <b>${point.y}</b>"></e-chart-tooltipsettings>
            <e-chart-legendsettings visible="false"></e-chart-legendsettings>
        </ejs-chart>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Lazy Load type:
                    </div>
                </td>
                <td style="width: 50%;">
                    <ejs-dropdownlist id="type" dataSource="@type" change="change" index="0" created="dropDownCreated"></ejs-dropdownlist>
                </td>
            </tr>
            <tr id='' style="height: 50px">
                <td style="width: 80%">
                    <div>Minimum:</div>
                </td>
                <td style="width: 20%;">
                    <ejs-datepicker id="minimum" width="120" value="@min" change="minChange" created="minCreated"></ejs-datepicker>
                </td>
            </tr>
            <tr id='' style="height: 50px">
                <td style="width: 80%">
                    <div>Maximum:</div>
                </td>
                <td style="width: 20%;">
                    <ejs-datepicker id="maximum" width="120" value="@max" change="maxChange" created="maxCreated"></ejs-datepicker>
                </td>
            </tr>
            <tr id='' style="height: 50px">
                <td style="width: 80%">
                    <div>PointLength</div>
                </td>
                <td style="width: 20%;">
                    <ejs-numerictextbox id="period" min="1000" max="10000" step="100" value="100" width="120" format="n" change="pointChange" enabled="false" created="numCreated"></ejs-numerictextbox>
                </td>
            </tr>
        </table>
    </div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>
        var intl = new ej.base.Internationalization();
        var chart;
        var modeType;
        var minDate;
        var maxDate;
        var pointslength;
        function dropDownCreated(args) {
            modeType = document.getElementById('type').ej2_instances[0];
        }
        function minCreated(args) {
            minDate = document.getElementById('minimum').ej2_instances[0];
        }
        function maxCreated(args) {
            maxDate = document.getElementById('maximum').ej2_instances[0];
        }
        function numCreated(args) {
            pointslength = document.getElementById('period').ej2_instances[0];
        }
        function load(args) {            
            args.chart.series[0].dataSource = GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1)),
                args.chart.primaryXAxis.scrollbarSettings.range = { minimum: new Date(2009, 0, 1), maximum: new Date(2014, 0, 1) }
            loadChartTheme(args);
            args.chart.load = function () { };
        }
        function loaded(args) {
            chart = document.getElementById('container').ej2_instances[0];
        }

        function scrollEnd(args) {
            if (modeType.value === 'Range') {
                chart.series[0].dataSource = GetDateTimeData(args.currentRange.minimum, args.currentRange.maximum);
            } else {
                chart.series[0].dataSource = GetNumericData(args.currentRange.minimum, args.currentRange.maximum);
            }
            chart.dataBind();
        }

        function GetDateTimeData(start, end) {
            var series1 = [];
            var date;
            var value = 30;
            var option = { skeleton: 'full', type: 'dateTime' };
            var dateParser = intl.getDateParser(option);
            var dateFormatter = intl.getDateFormat(option);
            for (var i = 0; start <= end; i++) {
                date = Date.parse(dateParser(dateFormatter(start)));
                if (Math.random() > .5) {
                    value += (Math.random() * 10 - 5);
                } else {
                    value -= (Math.random() * 10 - 5);
                }
                if (value < 0) {
                    value = getRandomInt(20, 40);
                }
                var point1 = { x: new Date(date), y: Math.round(value) };
                new Date(start.setDate(start.getDate() + 1));
                series1.push(point1);
            }
            return series1;
        }

        function GetNumericData(start, end) {
            var series1 = [];
            var value = 30;
            for (var i = start; i <= end; i++) {
                if (Math.random() > .5) {
                    value += (Math.random() * 10 - 5);
                } else {
                    value -= (Math.random() * 10 - 5);
                }
                if (value < 0) {
                    value = getRandomInt(20, 40);
                }
                var point = { x: i, y: Math.round(value) };
                series1.push(point);
            }
            return series1;
        }
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        function change(args) {
            var min;
            var max;
            if (args.value === 'Range') {
                chart.primaryXAxis.valueType = 'DateTime';
                min = chart.primaryXAxis.scrollbarSettings.range.minimum = new Date(2009, 0, 1);
                max = chart.primaryXAxis.scrollbarSettings.range.maximum = new Date(2014, 0, 1);
                chart.series[0].dataSource = GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1));
                chart.refresh();
                minDate.enabled = true;
                maxDate.enabled = true;
                pointslength.enabled = false;
            } else {
                chart.primaryXAxis = null;
                chart.primaryXAxis = {
                    valueType: 'Double',
                    scrollbarSettings: {
                        pointsLength: 1000, range: {
                            minimum: null,
                            maximum: null
                        }
                    }
                };
                chart.series[0].dataSource = GetNumericData(1, 200);
                chart.dataBind();
                minDate.enabled = false;
                maxDate.enabled = false;
                pointslength.enabled = true;
            }
        }

        function minChange(args) {
            chart.primaryXAxis.scrollbarSettings.range.minimum = args.value;
            chart.refresh();
        }
        function maxChange(args) {
            chart.primaryXAxis.scrollbarSettings.range.maximum = args.value;
            chart.refresh();
        }
        function pointChange(args) {
            chart.primaryXAxis.scrollbarSettings.pointsLength = args.value;
            chart.refresh();
        }
    </script>
}
@*custom code start*@
@section Scripts{

}


@section Meta{
    <meta name="description" content="This example demonstrates the Lazy Loading in ASP.NET Core Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates lazy loading feature in chart which loads data on demand.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to load data for the chart on demand. The chart will fire the <code>ScrollEnd</code> event, and in that event, we can update the chart with the required data based on the point length and axis range. The scrollbar in the chart can be customized using the <code>Height</code>, <code>TrackColor</code>, <code>TrackRadius</code>, <code>ScrollbarRadius</code>, <code>ScrollbarColor</code>, <code>EnableZoom</code>, and <code>GripColor</code> properties in <code>ScrollbarSettings</code>.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over or tap on the chart.
    </p>
    <p>
        More information about the lazy loading can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/working-with-data#lazy-loading" aria-label="Navigate to the documentation for Lazy loading in ASP.NET Core Chart control">documentation section</a>.
    </p>
}
@section Title{
    <title>ASP.NET Core Chart Lazy Loading Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Lazy Loading in ASP.NET Core Chart Control</h1>
}
