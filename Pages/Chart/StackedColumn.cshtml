@page
@model EJ2CoreSampleBrowser.Pages.Chart.StackedColumnModel
@using Syncfusion.EJ2
@section ControlsSection{

    <div class="control-section" align="center">

        <ejs-chart id="splineContainer" load="load" axisLabelRender="axisLabelRender" legendClick="onLegendClick" title="Global Cotton Production by Country (2019-2024)" subTitle="Source: fas.usda.gov">
            <e-chart-stacklabels visible="true" format="{value}M"></e-chart-stacklabels>
            <e-chart-primaryxaxis labelIntersectAction="@Syncfusion.EJ2.Charts.LabelIntersectAction.Rotate45" interval="1" valueType="@Syncfusion.EJ2.Charts.ValueType.Category">
                <e-majorgridlines width="0"></e-majorgridlines>
                <e-minorgridlines width="0"></e-minorgridlines>
                <e-majorticklines width="0"></e-majorticklines>
                <e-minorticklines width="0"></e-minorticklines>
                <e-linestyle width="0"></e-linestyle>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis title="Production (60KG Bags)" labelFormat="{value}M" interval="20">
                <e-majorticklines width="0"></e-majorticklines>
                <e-minorticklines width="0"></e-minorticklines>
                <e-minorgridlines width="1"></e-minorgridlines>
                <e-linestyle width="0"></e-linestyle>
            </e-chart-primaryyaxis>
            <e-series-collection>
                <e-series xName="X" yName="Y" name="India" legendShape="Rectangle" columnWidth="0.4" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn">
                    <e-series-border width="1" color="#ffffff"></e-series-border>
                    <e-series-marker visible="false">
                        <e-series-datalabel visible="true">
                            <e-font size="13px"></e-font>
                        </e-series-datalabel>
                    </e-series-marker>
                </e-series>
                <e-series xName="X" yName="Y" name="China" legendShape="Rectangle" columnWidth="0.4" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn">
                    <e-series-border width="1" color="#ffffff"></e-series-border>
                    <e-series-marker visible="false">
                        <e-series-datalabel visible="true">
                            <e-font size="13px"></e-font>
                        </e-series-datalabel>
                    </e-series-marker>
                </e-series>
                <e-series xName="X" yName="Y" name="United States" legendShape="Rectangle" columnWidth="0.4" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn">
                    <e-series-border width="1" color="#ffffff"></e-series-border>
                    <e-series-marker visible="false">
                        <e-series-datalabel visible="true">
                            <e-font size="13px"></e-font>
                        </e-series-datalabel>
                    </e-series-marker>
                    <e-series-cornerradius topLeft="4" topRight="4"></e-series-cornerradius>
                </e-series>
            </e-series-collection>
            <e-chart-tooltipsettings enable="true" enableHighlight="true" header="<b>${point.x}</b>" format="${series.name} : <b>${point.y}</b>"></e-chart-tooltipsettings>
            <e-chart-legendsettings visible="true" enableHighlight="true" shapeHeight="8" shapeWidth="8"></e-chart-legendsettings>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
        </ejs-chart>
    </div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>
        function load(args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.series[0].dataSource = ej.base.Browser.isDevice ? [
                { X: '2021', Y: 24.3 },
                { X: '2022', Y: 26.3 },
                { X: '2023', Y: 25.4 },
                { X: '2024', Y: 25 }
            ] :
                [
                    { X: '2019', Y: 28.5 },
                    { X: '2020', Y: 27.5 },
                    { X: '2021', Y: 24.3 },
                    { X: '2022', Y: 26.3 },
                    { X: '2023', Y: 25.4 },
                    { X: '2024', Y: 25 }
                ];
            args.chart.series[1].dataSource = ej.base.Browser.isDevice ? [
                { X: '2021', Y: 26.7 },
                { X: '2022', Y: 30.8 },
                { X: '2023', Y: 27.4 },
                { X: '2024', Y: 31 }
            ] :
                [
                    { X: '2019', Y: 26.9 },
                    { X: '2020', Y: 29.3 },
                    { X: '2021', Y: 26.7 },
                    { X: '2022', Y: 30.8 },
                    { X: '2023', Y: 27.4 },
                    { X: '2024', Y: 31 }
                ];
            args.chart.series[2].dataSource = ej.base.Browser.isDevice ? [
                { X: '2021', Y: 17.5 },
                { X: '2022', Y: 14.5 },
                { X: '2023', Y: 12.1 },
                { X: '2024', Y: 14.4 }
            ] :
                [
                    { X: '2019', Y: 19.9 },
                    { X: '2020', Y: 14.6 },
                    { X: '2021', Y: 17.5 },
                    { X: '2022', Y: 14.5 },
                    { X: '2023', Y: 12.1 },
                    { X: '2024', Y: 14.4 }
                ];
        }
        var onLegendClick = function (args) {
            if (args.series.index === 0) {
                if (args.chart.series[2].visible) {
                    args.chart.series[2].cornerRadius.topLeft = 4;
                    args.chart.series[2].cornerRadius.topRight = 4;
                    args.chart.series[0].cornerRadius.topLeft = 0;
                    args.chart.series[0].cornerRadius.topRight = 0;
                } else if (args.chart.series[1].visible) {
                    args.chart.series[1].cornerRadius.topLeft = 4;
                    args.chart.series[1].cornerRadius.topRight = 4;
                    args.chart.series[0].cornerRadius.topLeft = 0;
                    args.chart.series[0].cornerRadius.topRight = 0;
                } else {
                    args.chart.series[0].cornerRadius.topLeft = 4;
                    args.chart.series[0].cornerRadius.topRight = 4;
                }
            }
            if (args.series.index === 1) {
                if (args.chart.series[2].visible) {
                    args.chart.series[2].cornerRadius.topLeft = 4;
                    args.chart.series[2].cornerRadius.topRight = 4;
                    args.chart.series[1].cornerRadius.topLeft = 0;
                    args.chart.series[1].cornerRadius.topRight = 0;
                } else if (args.series.visible && args.chart.series[0].visible) {
                    args.chart.series[0].cornerRadius.topLeft = 4;
                    args.chart.series[0].cornerRadius.topRight = 4;
                    args.chart.series[1].cornerRadius.topLeft = 0;
                    args.chart.series[1].cornerRadius.topRight = 0;
                } else {
                    args.chart.series[1].cornerRadius.topLeft = 4;
                    args.chart.series[1].cornerRadius.topRight = 4;
                    args.chart.series[0].cornerRadius.topLeft = 0;
                    args.chart.series[0].cornerRadius.topRight = 0;
                }
            }
            if (args.series.index === 2) {
                if (!args.series.visible) {
                    args.chart.series[2].cornerRadius.topLeft = 4;
                    args.chart.series[2].cornerRadius.topRight = 4;
                    args.chart.series[1].cornerRadius.topLeft = 0;
                    args.chart.series[1].cornerRadius.topRight = 0;
                    args.chart.series[0].cornerRadius.topLeft = 0;
                    args.chart.series[0].cornerRadius.topRight = 0;
                } else if (args.chart.series[1].visible) {
                    args.chart.series[1].cornerRadius.topLeft = 4;
                    args.chart.series[1].cornerRadius.topRight = 4;
                    args.chart.series[2].cornerRadius.topLeft = 0;
                    args.chart.series[2].cornerRadius.topRight = 0;
                } else if (args.series.visible && args.chart.series[0].visible) {
                    args.chart.series[0].cornerRadius.topLeft = 4;
                    args.chart.series[0].cornerRadius.topRight = 4;
                    args.chart.series[2].cornerRadius.topLeft = 0;
                    args.chart.series[2].cornerRadius.topRight = 0;
                }
            }
        }

        function axisLabelRender(args) {
            args.text = args.text.replace("0000000", "0M").replace("000000", "M");
        }
    </script>
}
@*custom code start*@

@section Scripts {

}
@section Meta{
                    <meta name="description" content="This example demonstrates the Stacked Column in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This <a target="_blank" href="https://www.syncfusion.com/aspnet-core-ui-controls/charts/chart-types/stacked-column-chart" aria-label="Navigate to explore the syncfusion ASP.NET Core Stacked Column Chart">ASP.NET Core Stacked Column Chart</a> example visualizes global cotton production trends over the years, with data points enhanced by data labels.
        </p>
    </div>
}
@section Description{
    <div>
        <p>
            In this example, you can see how to render and configure the stacked column chart. The stacked column chart stacks points in the series vertically. You can also use the <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_StackingGroup" aria-label="Navigate to the StackingGroup property reference for ASP.NET Core ChartSeries">StackingGroup</a> property to group stacked collections based on category.
            This chart displays data labels for individual points and the total value on top of each stack.
        </p>
        <p>
            <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point in touch-enabled devices.
        </p>
        <p>
            More information about the stacked column series can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/chart-types/stacked-column" aria-label="Navigate to the documentation for Stacked Column in ASP.NET CORE Charts Component">documentation section</a>.
        </p>
    </div>
}
@*custom code start*@
<style>

    #control-container {
        padding: 0px !important;
    }
</style>
@*custom code end*@
@section Title{
                    <title>ASP.NET Core Chart Stacked Column Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Stacked Column in ASP.NET Core Chart Control</h1>
                }