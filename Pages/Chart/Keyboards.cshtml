@page
@model EJ2CoreSampleBrowser.Pages.Chart.KeyboardsModel
@using Syncfusion.EJ2

@section ControlsSection{
    <div class="control-section" align="center">
        <ejs-chart id="keyboard_container" selectionMode="@Syncfusion.EJ2.Charts.SelectionMode.Point" selectionPattern="@Syncfusion.EJ2.Charts.SelectionPattern.DiagonalForward" legendClick="clickLegend" load="load" enableSideBySidePlacement="false" title="Quarterly Sales Chart" enableAnimation="false">
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-zoomsettings enableSelectionZooming="true"></e-chart-zoomsettings>
            <e-chart-tooltipsettings enable="true">
            </e-chart-tooltipsettings>
            <e-chart-legendsettings visible="true">
            </e-chart-legendsettings>
            <e-chart-primaryxaxis interval="1" valueType="@Syncfusion.EJ2.Charts.ValueType.Category">
                <e-majorgridlines width="0"></e-majorgridlines>
                <e-labelstyle size="0px"></e-labelstyle>
                <e-majorticklines width="0"></e-majorticklines>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis maximum="120" title="Sales in Percentage" labelFormat="{value}%" stripLines="@Model.yAxisStrips">
                <e-linestyle width="0"></e-linestyle>
                <e-majorticklines width="0"></e-majorticklines>
            </e-chart-primaryyaxis>
            <e-series-collection>
                <e-series name="Quarter 1" dataSource="@Model.Quarter1" xName="Month" yName="Sales" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                    <e-series-animation enable="false"></e-series-animation>
                </e-series>
                <e-series name="Quarter 2" dataSource="@Model.Quarter2" xName="Month" yName="Sales" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                    <e-series-animation enable="false"></e-series-animation>
                </e-series>
                <e-series name="Quarter 3" dataSource="@Model.Quarter3" xName="Month" yName="Sales" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                    <e-series-animation enable="false"></e-series-animation>
                </e-series>
                <e-series name="Quarter 4" dataSource="@Model.Quarter4" xName="Month" yName="Sales" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                    <e-series-animation enable="false"></e-series-animation>
                </e-series>
            </e-series-collection>
        </ejs-chart>
    </div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>        
        var FontColor = "#353535";
        var seriesIndex = 0;
        var Segments = [[0, 5], [7, 12], [14, 19], [21, 26]];

        function clickLegend(args) {
            seriesIndex = 0;
            getStriplineValues(args.series.name);
        }


        var getStriplineValues = function (legendClickedName) {
            var chart = document.getElementById('keyboard_container').ej2_instances[0];
            for (var i = 0; i < chart.series.length; i++) {
                var name = chart.series[i].name;
                var visible = name === legendClickedName ? !chart.series[i].visible : chart.series[i].visible;
                if (seriesIndex > 3) {
                    seriesIndex = 0;
                }
                if (name == "Quarter 1") {
                    chart.primaryYAxis.stripLines[0].visible = chart.primaryYAxis.stripLines[1].visible = visible;
                    if (chart.primaryYAxis.stripLines[0].visible) {
                        chart.primaryYAxis.stripLines[0].segmentStart = chart.primaryYAxis.stripLines[1].segmentStart = Segments[seriesIndex][0];
                        chart.primaryYAxis.stripLines[0].segmentEnd = chart.primaryYAxis.stripLines[1].segmentEnd = Segments[seriesIndex][1];
                        seriesIndex++;
                    }
                }
                else if (name == "Quarter 2") {
                    chart.primaryYAxis.stripLines[2].visible = chart.primaryYAxis.stripLines[3].visible = visible;
                    if (chart.primaryYAxis.stripLines[2].visible) {
                        chart.primaryYAxis.stripLines[2].segmentStart = chart.primaryYAxis.stripLines[3].segmentStart = Segments[seriesIndex][0];
                        chart.primaryYAxis.stripLines[2].segmentEnd = chart.primaryYAxis.stripLines[3].segmentEnd = Segments[seriesIndex][1];
                        seriesIndex++;
                    }
                }
                else if (name == "Quarter 3") {
                    chart.primaryYAxis.stripLines[4].visible = chart.primaryYAxis.stripLines[5].visible = visible;
                    if (chart.primaryYAxis.stripLines[4].visible) {
                        chart.primaryYAxis.stripLines[4].segmentStart = chart.primaryYAxis.stripLines[5].segmentStart = Segments[seriesIndex][0];
                        chart.primaryYAxis.stripLines[4].segmentEnd = chart.primaryYAxis.stripLines[5].segmentEnd = Segments[seriesIndex][1];
                        seriesIndex++;
                    }
                }
                else {
                    chart.primaryYAxis.stripLines[6].visible = chart.primaryYAxis.stripLines[7].visible = visible;
                    if (chart.primaryYAxis.stripLines[6].visible) {
                        chart.primaryYAxis.stripLines[6].segmentStart = chart.primaryYAxis.stripLines[7].segmentStart = Segments[seriesIndex][0];
                        chart.primaryYAxis.stripLines[6].segmentEnd = chart.primaryYAxis.stripLines[7].segmentEnd = Segments[seriesIndex][1];
                        seriesIndex++;
                    }
                }
            }
            chart.refresh();
        };

        function load(args) {
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            loadChartTheme(args);
            FontColor = args.chart.theme.indexOf("dark") > -1 || args.chart.theme.indexOf("highcontrast") > -1 ? "#F3F2F1" : "#353535";
            let FillColors;
            let TextColor;
            if (args.chart.theme === 'MaterialDark') {
                FillColors = pointMaterialDarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Material') {
                FillColors = pointMaterialColors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === "Fabric") {
                FillColors = pointFabricColors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'FabricDark') {
                FillColors = keyFabricDark;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Bootstrap5Dark') {
                FillColors = pointBootstrap5DarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Bootstrap4') {
                FillColors = keyBootstrap4Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'Bootstrap5') {
                FillColors = pointBootstrap5Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === "Bootstrap") {
                FillColors = pointBootstrapColors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'BootstrapDark') {
                FillColors = keyBootstrapdarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'TailwindDark') {
                FillColors = pointTailwindDarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Tailwind') {
                FillColors = pointTailwindColors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === "HighContrast") {
                FillColors = pointHighContrastColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Fluent') {
                FillColors = pointFluentColors;
                TextColor = '#000000'
            }
            else if (args.chart.theme === 'FluentDark') {
                FillColors = pointFluentDarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Material3') {
                FillColors = pointMaterial3Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'Material3Dark') {
                FillColors = pointMaterial3DarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Fluent2') {
                FillColors = pointFluent2Colors;
                TextColor = "#000000";
            }
            else if (args.chart.theme === 'Fluent2HighContrast' || args.chart.theme === 'Fluent2Dark') {
                FillColors = pointFluent2HighContrastColors;
                TextColor = "#FFFFFF";
            } else if (args.chart.theme === 'Tailwind3Dark') {
                FillColors = pointTailwind3DarkColors;
                TextColor = "#FFFFFF";
            }
            else if (args.chart.theme === 'Tailwind3') {
                FillColors = pointTailwind3Colors;
                TextColor = "#000000";
            }
            else {
                FillColors = pointFluentColors;
                TextColor = "#FFFFFF";
            }
            args.chart.primaryYAxis.stripLines[0].color = FillColors[0 % 10];
            args.chart.primaryYAxis.stripLines[1].textStyle.color = TextColor;
            args.chart.primaryYAxis.stripLines[2].color = FillColors[1 % 10];
            args.chart.primaryYAxis.stripLines[3].textStyle.color = TextColor;
            args.chart.primaryYAxis.stripLines[4].color = FillColors[2 % 10];
            args.chart.primaryYAxis.stripLines[5].textStyle.color = TextColor;
            args.chart.primaryYAxis.stripLines[6].color = FillColors[3 % 10];
            args.chart.primaryYAxis.stripLines[7].textStyle.color = TextColor;
        };
    </script>
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
}

@section Scripts{

}

@section Meta{
    <meta name="description" content="This example demonstrates the Keyboard navigation in ASP.NET Core Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        Keyboard shortcuts can be used to interact with chart functionality. In the example, various key combinations can be used to interact with a chart.
    </p>
}
@section Description{
    <i>The key combinations listed can be used in a chart to initiate various actions:</i>
    <ul>
        <li>
            <b>FOCUS ELEMENTS</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Alt</kbd> + <kbd>J</kbd></span>
                    <span> - Moves the focus to the chart element.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Tab</kbd></span>
                    <span> - Moves the focus to the next element in the chart.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Shift</kbd> + <kbd>Tab</kbd></span>
                    <span> - Moves the focus to the previous element in the chart.</span>
                </li>
            </ul>
        </li>
        <li>
            <b>SERIES</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Down arrow</kbd></span>
                    <span> - Moves the focus to the data point on the left side of the selected point.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Up arrow</kbd></span>
                    <span> - Moves the focus to the data point on the right side of the selected point.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Left arrow</kbd></span>
                    <span> - Moves the focus to the next series in our Charts component.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Right arrow</kbd></span>
                    <span> - Moves the focus to the previous series in our Charts component.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>ESC</kbd></span>
                    <span> - Cancels the tooltip for the data point.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Enter</kbd>/<kbd>Space</kbd></span>
                    <span> - Selects the data point in the series.</span>
                </li>
            </ul>
        </li>
        <li>
            <b>Legend</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Down</kbd>/<kbd>Left arrow</kbd></span>
                    <span> - Moves the focus to the legend left of the selected legend item.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Up</kbd>/<kbd>Right arrow</kbd></span>
                    <span> - Moves the focus to the legend right of the selected legend item.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Enter</kbd>/<kbd>Space</kbd></span>
                    <span> - Toggles the visibility of the corresponding series.</span>
                </li>
            </ul>
        </li>
        <li>
            <b>ZOOMING AND PANNING</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Ctrl</kbd> + <kbd>+</kbd></span>
                    <span> - Zoom in to chart.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Ctrl</kbd> + <kbd>-</kbd></span>
                    <span> - Zoom out of the chart.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Down</kbd>/<kbd>Up arrow</kbd></span>
                    <span> - Pans the chart vertically.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Left</kbd>/<kbd>Right arrow</kbd></span>
                    <span> - Pans the chart horizontally.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>R</kbd></span>
                    <span> - Reset the zoomed chart.</span>
                </li>
            </ul>
        </li>
        <li>
            <b>PRINT</b>
            <ul>
                <li>
                    <span class="key-class"><kbd>Ctrl</kbd> + <kbd>P</kbd></span>
                    <span> - Prints the Charts component.</span>
                </li>
            </ul>
        </li>
    </ul>
}
@section Title{
    <title>ASP.NET Core Chart Keyboard Navigation Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Keyboard Navigation in ASP.NET Core Chart Control</h1>
}
