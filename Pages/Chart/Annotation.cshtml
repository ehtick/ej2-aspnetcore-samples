@page
@model EJ2CoreSampleBrowser.Pages.Chart.AnnotationModel

@{

    var line = new Syncfusion.EJ2.Charts.ChartMajorGridLines { Width = 0.000001 };
    var lineTicks = new Syncfusion.EJ2.Charts.ChartMajorTickLines { Width = 0.000001 };
    var lineAxis = new Syncfusion.EJ2.Charts.ChartAxisLine { Width = 0.000001 };
    var border = new Syncfusion.EJ2.Charts.ChartBorder { Width = 0, Color = "transparent" };
    var width = "20%";
    Syncfusion.EJ2.Charts.ChartSelectedDataIndex select = new Syncfusion.EJ2.Charts.ChartSelectedDataIndex();
    select.Point = 0;
    List<Syncfusion.EJ2.Charts.ChartSelectedDataIndex> index = new List<Syncfusion.EJ2.Charts.ChartSelectedDataIndex>
            {
                select
            };

    var content = "<div id='chart_annotation' style='width: 200px; height: 200px'></div>";

}
@using Syncfusion.EJ2

@section ControlsSection{
    
    <div class="control-section" align="center">

        <ejs-chart id="container" title="Mobile Game Market by Country" selectionMode="Cluster" selectedDataIndexes="@index" animationComplete="animation" chartMouseUp="move" load="load">
            <e-chart-legendsettings visible="false" toggleVisibility="true">
            </e-chart-legendsettings>
            <e-chart-chartarea>
                <e-chartarea-border width="0.0001"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-primaryxaxis majorGridLines="line"
                                  interval=1 labelIntersectAction="@Syncfusion.EJ2.Charts.LabelIntersectAction.Rotate45" valueType="@Syncfusion.EJ2.Charts.ValueType.Category">
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis majorTickLines="lineTicks"
                                  lineStyle="lineAxis" title="Sales" minimum=0
                                  maximum=700 interval=100 labelFormat="{value}B"></e-chart-primaryyaxis>
            <e-chart-annotations>
                <e-chart-annotation content="<div id='chart_annotation' style='width: 200px; height: 200px'></div>" coordinateUnits="@Syncfusion.EJ2.Charts.Units.Pixel" region="@Syncfusion.EJ2.Charts.Regions.Series" x="width" y="25%"></e-chart-annotation>
            </e-chart-annotations>
            <e-series-collection>
                <e-series dataSource="@Model.DataSource" xName="X" yName="Y0" name="UK" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn"></e-series>
                <e-series dataSource="@Model.DataSource" xName="X" yName="Y1" name="Germany" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn"></e-series>
                <e-series dataSource="@Model.DataSource" xName="X" yName="Y2" name="France" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn"></e-series>
                <e-series dataSource="@Model.DataSource" xName="X" yName="Y3" name="Italy" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn"></e-series>
            </e-series-collection>
        </ejs-chart>
    </div>

    <script>
        var isRender = false;
        var pieDataSource = [
            { x: 'UK', y: 51, text: '22%' }, { x: 'Germany', y: 77, text: '34%' },
            { x: 'France', y: 66, text: '29%' }, { x: 'Italy', y: 34, text: '15%' }
        ];

        var move = function (args) {
            if (args.target.indexOf('Point') > -1 && args.target.indexOf('annotation') === -1) {
                var pointIndex = parseInt(args.target[args.target.length - 1], 10);
                pieDataSource = [];
                var chart = document.getElementById("container").ej2_instances[0];
                for (var i = 0; i < chart.visibleSeries.length; i++) {
                    var series = chart.visibleSeries[i]
                    var value = series.points[pointIndex].y;
                    pieDataSource.push({
                        'x': series.name, 'y': value, 'text': getValue(chart.visibleSeries, pointIndex, value)
                    });
                }
                pie.series[0].dataSource = pieDataSource;
                pie.series[0].xName = 'x';
                pie.series[0].yName = 'y';
                pie.refresh();
            }
        };

        function load(args) {
            var selectedTheme = loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "80%";
        };

        function getValue(series, pointIndex, y) {
            var totalValue = 0;
            for (var i = 0; i < series.length; i++) {
                var ser = series[i];
                totalValue += ser.points[pointIndex].y;
            }
            return (Math.round((y / totalValue) * 100)) + '%';
        }
        var animation = function (args) {
            isRender = true;
            var selectedTheme = location.hash.split('/')[1];
            pie = new ej.charts.AccumulationChart({
                background: 'transparent',
                series: [{
                    radius: '65%', animation: { enable: false },
                    dataSource: pieDataSource,
                    xName: 'x', yName: 'y', dataLabel: { visible: true, position: 'Inside', name: 'text' },
                }],
                theme: (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)),
                legendSettings: { visible: false },
                resized: function (args) {
                    location.reload();
                }
            });
            pie.appendTo('#chart_annotation');
        }
    </script>

}
@*custom code start*@
@section Scripts{
}

@section Meta{
    <meta name="description" content="This demo for Essential JS2 Chart control shows how to add more information to the chart using annotation." />
}
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates annotation feature in chart. Accumulation chart is placed in cartesian chart by using annotation.
        </p>
    </div>
}
@section Description{
    <div>
        <p>
            In this example, you can see how to render and configure annotation feature in chart. We have used a pie chart to depict
            the sales for each year using annotation support, while selecting a particular year from the StackedColumn series,
            the respective data's are shown in pie. An annotation can hold any html element as its content. Here, we have added
            the Pie chart as its content.
        </p>
        <p>
            More information on the chart annotation can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/chart-annotations" aria-label="Navigate to the documentation for Annotation in ASP.NET Core Chart component">documentation section</a>.
        </p>
    </div>
}
@*custom code start*@
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@*custom code end*@

