@page
@model EJ2CoreSampleBrowser.Pages.Chart.SortingModel
@using Syncfusion.EJ2

@section ControlsSection{
    @{
       var None = "None";
    }
    <div class="col-md-8 control-section" align="center">

        <ejs-chart id="container" load="load" title="Vehicle Sales by Region">
            <e-chart-primaryxaxis interval="1" labelIntersectAction="@Syncfusion.EJ2.Charts.LabelIntersectAction.Rotate45" valueType="@Syncfusion.EJ2.Charts.ValueType.Category">
                <e-majorgridlines width="0"></e-majorgridlines>
                <e-linestyle width="0"></e-linestyle>
            </e-chart-primaryxaxis>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-primaryyaxis title="Sales" labelFormat="{value}K" >
                <e-majorticklines width="0"></e-majorticklines>
                <e-linestyle width="0"></e-linestyle>
            </e-chart-primaryyaxis>
            <e-series-collection>
                <e-series dataSource="@Model.ChartData" xName="x" yName="car" name="Car" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn"></e-series>
                <e-series dataSource="@Model.ChartData" xName="x" yName="trucks" name="Trucks" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn"></e-series>
                <e-series dataSource="@Model.ChartData" xName="x" yName="bike" name="Bike" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn"></e-series>
                <e-series dataSource="@Model.ChartData" xName="x" yName="cycle" name="Cycle" width="2" opacity="1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.StackingColumn"></e-series>
            </e-series-collection>
            <e-chart-tooltipsettings enable="true" enableHighlight="true"></e-chart-tooltipsettings>
        </ejs-chart>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Descending:</div>
                    </td>
                    <td style="width: 40%;">
                        <div>
                            <input id='decending' type="checkbox" disabled />
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Sort By:</div>
                    </td>
                    <td style="width: 40%;">
                        <ejs-dropdownlist id="data" dataSource="@Model.Select" change="onChange" value="None" popupHeight="220px"></ejs-dropdownlist>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script src="~/scripts/chart/theme-color.js"></script>
    <script>
        var mode = null;
        var dataValues = [
            { x: 'Asia', car: 120, trucks: 90, bike: 180, cycle: 90 },
            { x: 'Canada', car: 100, trucks: 80, bike: 90, cycle: 80 },
            { x: 'Europe', car: 80, trucks: 90, bike: 60, cycle: 50 },
            { x: 'Africa', car: 40, trucks: 20, bike: 30, cycle: 30 },
            { x: 'Mexico', car: 40, trucks: 50, bike: 80, cycle: 50 },
            { x: 'US', car: 140, trucks: 90, bike: 75, cycle: 70 }
        ];
        function load(args) {
            loadChartTheme(args);
        }
        document.getElementById('decending').onchange = () => {
            sortDataSource( mode + '');
        };

        function onChange() {
            mode = this.value;
            sortDataSource(this.value + '');
        }
        function sortDataSource(value) {
            var chart = document.getElementById('container').ej2_instances[0];
            var element = document.getElementById('decending');
            var isDecending = element.checked;
            element.disabled = false;
            var sortData = [];
            if (value.indexOf('X') > -1) {
                sortData = ej.charts.sort(dataValues, ['x'], isDecending);
            } else if (value.indexOf('Y') > -1) {
                sortData = ej.charts.sort(dataValues, ['car', 'trucks', 'bike', 'cycle'], isDecending);
            } else {
                element.disabled = true;
                sortData = dataValues;
            }
            chart.series[0].animation.enable = false;
            chart.series[1].animation.enable = false;
            chart.series[2].animation.enable = false;
            chart.series[3].animation.enable = false;
            chart.series[0].dataSource = sortData;
            chart.series[1].dataSource = sortData;
            chart.series[2].dataSource = sortData;
            chart.series[3].dataSource = sortData;
            chart.refresh();
        }
    </script>
}
@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Sorting in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample visualizes sales for vehicle range for different zone with default stacked column series in chart. Legend in
            the sample shows the information about those series.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to sort the series data in chart. To sort the data points of the series, use the <code>sort</code> method.
            This method determines whether the series data points should be sorted by their arguments or values.
        </p>
        <p>
            Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap a point in touch enabled devices.
        </p>
        <p>
            More information on the stacking column series can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/chart-types/stacked-column" aria-label="Navigate to the documentation for Stacked Column in ASP.NET CORE Charts Component">documentation section</a>.
        </p>
    </div>
}
@*custom code start*@
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@*custom code end*@
@section Title{
                    <title>ASP.NET Core Chart Sorting Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Sorting in ASP.NET Core Chart Control</h1>
                }