@page
@using Syncfusion.EJ2.Gantt;

@section ControlsSection {

    <div class="control-section">
        <div class="row">
            <div class="col-md-12">
                <ejs-gantt id='LoadOnDemand' treeColumnIndex="1" height="650px" rowHeight="46" taskbarHeight="25"
                    allowSelection="true" highlightWeekends="true" includeWeekend="true" projectStartDate="01/02/2000"
                    enableVirtualization="true" loadChildOnDemand="true" projectEndDate="12/01/2002">
                    <e-data-manager url="http://localhost:62928/api/GanttLoadOnDemand"
                        adaptor="WebApiAdaptor" crossDomain="true"></e-data-manager>
                    <e-gantt-taskfields id="taskId" name="taskName" startDate="startDate" duration="duration"
                        progress="progress" hasChildMapping="isParent" parentID="parentID">
                    </e-gantt-taskfields>
                    <e-gantt-columns>
                        <e-gantt-column field="taskId" headerText="Task ID"></e-gantt-column>
                        <e-gantt-column field="taskName" headerText="Task Name"></e-gantt-column>
                        <e-gantt-column field="startDate" headerText="Start Date"></e-gantt-column>
                        <e-gantt-column field="duration" headerText="Duration"></e-gantt-column>
                        <e-gantt-column field="progress" headerText="Progress"></e-gantt-column>
                    </e-gantt-columns>
                </ejs-gantt>
            </div>
        </div>
    </div>
    <script>

    </script>

}

@section ActionDescription {
    <div id="action-description">
        <p>
            This sample demonstrates the load on-demand data binding support in Gantt Chart. It allows users to load parent
            records alone on load time.
            Child records render on demand during expansion action.
        </p>
    </div>
}
@section Description {

    <div id="description">
        <p>
            Load on demand and virtualization support is used to render a large number of tasks in the Gantt Chart with an
            effective performance. And so, in this demo, row virtualization is enabled with remote data binding which has
            50,000 records.
        </p>
        <p>
            With the virtualization feature enabled in remote data binding, only the root level records are fetched from the
            remote server at the initial load time. So, need to set the <code>hasChildMapping</code> property of <a
                target="_blank"
                href="https://help.syncfusion.com/cr/aspnetcore-js2/syncfusion.ej2.gantt.gantt.html#Syncfusion_EJ2_Gantt_Gantt_TaskFields">taskFields</a>
            that denotes whichever records have child records and set <a target="_blank"
                href="https://help.syncfusion.com/cr/aspnetcore-js2/syncfusion.ej2.gantt.gantt.html#Syncfusion_EJ2_Gantt_Gantt_LoadChildOnDemand">loadChildOnDemand</a>
            property as false.
        </p>
        <p>
            When expanding the root parent node or scrolling vertically, the corresponding tasks are dynamically fetched
            from the remote server and then updated in the DOM based on the current viewport position.
        </p>
         <br>
    <p>More information on the Essential<sup>®</sup> Gantt Chart can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/gantt/es5-getting-started#adding-gantt-control">documentation section</a>.</p>
    </div>
}
@section Meta {
    <meta name="description"
        content="This example demonstrates the Load On Demand Data in ASP.NET Core Gantt control. Explore here for more details." />
}
@section Title {
    <title>ASP.NET Core Gantt Load On Demand Data Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of Load On Demand Data in ASP.NET Core Gantt Control</h1>
}
