@page
@model EJ2CoreSampleBrowser.Pages.Gantt.TimezoneModel
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Gantt

@section ControlsSection {
    <div class="control-section">
        <ejs-gantt id="Timezone" dataSource="@Model.DataSource" treeColumnIndex="1" timezone="UTC" durationUnit="Hour"
            height="650px" includeWeekend="true" dateFormat="hh:mm a" rowHeight="46" toolbar="@Model.ToolbarItems"
            taskbarHeight="25">
            <e-gantt-taskfields id="TaskId" name="TaskName" startDate="StartDate" endDate="EndDate" duration="Duration"
                progress="Progress" dependency="Predecessor" parentID="ParentID"></e-gantt-taskfields>
            <e-gantt-columns>
                <e-gantt-column field="TaskId" visible="false" width="60"></e-gantt-column>
                <e-gantt-column field="TaskName" headerText="Name" width="250"
                    clipMode="EllipsisWithTooltip"></e-gantt-column>
                <e-gantt-column field="StartDate"></e-gantt-column>
                <e-gantt-column field="EndDate"></e-gantt-column>
                <e-gantt-column field="Duration"></e-gantt-column>
                <e-gantt-column field="Predecessor"></e-gantt-column>
                <e-gantt-column field="Progress"></e-gantt-column>
            </e-gantt-columns>
            <e-gantt-dayworkingtimecollection>
                <e-gantt-dayworkingtime from="0" to="23"></e-gantt-dayworkingtime>
            </e-gantt-dayworkingtimecollection>
            <e-gantt-timelinesettings timelineUnitSize="90">
                <e-timelinesettings-toptier unit="Day" format="EEE dd/yyyy"></e-timelinesettings-toptier>
                <e-timelinesettings-bottomtier unit="Hour" format="hh:mm a"></e-timelinesettings-bottomtier>
            </e-gantt-timelinesettings>
        </ejs-gantt>
    </div>

    <style>
        .e-bigger .previous-timespan,
        .e-bigger .next-timespan {
            height: 38px !important;
            width: 38px !important;
            padding: 0 !important;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .previous-timespan,
        .next-timespan {
            height: 32px !important;
            width: 32px !important;
            padding: 0 !important;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #Timezone .e-gantt-toolbar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            padding: 5px;
            flex-wrap: nowrap;
        }

        .showhide {
            font-size: 14px;
            font-weight: 700;
            margin: 0;
        }

        .e-bigger .showhide {
            font-size: 16px;
            font-weight: 700;
        }

        .timezone-label {
            display: flex;
            align-items: center;
            padding: 0;
            margin: 0;
        }

        .timezone-dropdown {
            display: flex;
            align-items: center;
            padding: 0;
            margin: 0;
            min-width: 300px;
        }

        .timeline-section {
            display: flex;
            align-items: center;
            padding: 0 5px;
        }

        .timeline-dropdown {
            display: flex;
            align-items: center;
            padding: 0 5px;
            min-width: 100px;
        }

        #Timezone .e-toolbar-item.e-separator {
            margin: 0 2px;
        }

        #Timezone .e-separator {
            padding: 0px;
        }

        #Timezone .e-toolbar-item.e-template {
            padding: 0px !important;
        }

        .bootstrap5\.3 #Timezone .e-icons,
        .bootstrap5\.3-dark #Timezone .e-icons {
            color: white;
        }
    </style>

    <script>
        function getLocalTimeZoneWithOffset() {
            const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
            const timeZonesWithOffsets = getTimeZonesWithOffsets();
            return timeZonesWithOffsets.find(function (zone) {
                return zone.id === timeZone;
            });
        }

        function getTimeZonesWithOffsets() {
            const now = new Date();
            const zones = Intl.supportedValuesOf ? Intl.supportedValuesOf('timeZone') : [
                'UTC', 'Asia/Calcutta', 'America/New_York', 'America/Los_Angeles', 'Europe/London',
                'Australia/Sydney', 'Asia/Tokyo', 'America/Chicago', 'America/Denver', 'America/Sao_Paulo'
            ];

            return zones.map(function (tz) {
                let formatter = new Intl.DateTimeFormat('en-US', {
                    timeZone: tz,
                    timeZoneName: 'longOffset'
                });
                let parts = formatter.formatToParts(now);
                let offsetPart = parts.find(function (part) { return part.type === 'timeZoneName'; });
                let offset = offsetPart ? offsetPart.value : 'UTC+00:00';
                offset = offset.replace('GMT', 'UTC');
                return { id: tz, text: tz + ' (' + offset + ')' };
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            var comboBox = new ej.dropdowns.ComboBox({
                dataSource: getTimeZonesWithOffsets(),
                value: getLocalTimeZoneWithOffset().text,
                placeholder: "Select timezone",
                width: '300px',
                popupHeight: '350px',
                popupWidth: '300px',
                ignoreAccent: true,
                filterType: 'Contains',
                allowFiltering: true,
                change: function (args) {
                    var gantt = document.getElementById('Timezone').ej2_instances[0];
                    if (args.value) {
                        gantt.timezone = args.value.split(' (')[0];
                    } else {
                        gantt.timezone = null;
                    }

                }
            });
            comboBox.appendTo('#timezonelist');

            var timelineData = ['Day', 'Week', 'Month'];
            var dropDownList = new ej.dropdowns.DropDownList({
                dataSource: timelineData,
                width: '100px',
                placeholder: "Select timeline mode",
                value: document.getElementById('Timezone').ej2_instances[0].timelineSettings.topTier.unit,
                change: function (args) {
                    var gantt = document.getElementById('Timezone').ej2_instances[0];
                    if (args.value === 'Day') {
                        gantt.timelineSettings.topTier.unit = 'Day';
                        gantt.timelineSettings.bottomTier.unit = 'Hour';
                        gantt.timelineSettings.bottomTier.format = 'hh:mm a';
                    } else if (args.value === 'Week') {
                        gantt.timelineSettings.topTier.unit = 'Week';
                        gantt.timelineSettings.bottomTier.unit = 'Day';
                        gantt.timelineSettings.bottomTier.format = 'dd MMM';
                    } else {
                        gantt.timelineSettings.topTier.unit = 'Month';
                        gantt.timelineSettings.bottomTier.unit = 'Day';
                        gantt.timelineSettings.bottomTier.format = 'dd';
                    }
                }
            });
            dropDownList.appendTo('#timeline');

            var leftTimespanButton = new ej.buttons.Button({});
            leftTimespanButton.appendTo('#previous-timespan');
            document.getElementById('previous-timespan').addEventListener('click', function () {
                var gantt = document.getElementById('Timezone').ej2_instances[0];
                gantt.previousTimeSpan();
            });

            var rightTimespanButton = new ej.buttons.Button({});
            rightTimespanButton.appendTo('#next-timespan');
            document.getElementById('next-timespan').addEventListener('click', function () {
                var gantt = document.getElementById('Timezone').ej2_instances[0];
                gantt.nextTimeSpan();
            });
        });
    </script>
}

@section ActionDescription {
    <div id="action-description">
        <p>This sample demonstrates how the Gantt Chart schedules project tasks using the UTC timezone, ensuring
            consistent date and time handling across global teams.</p>
    </div>
}
@section Description {
    <div id="description">
        <p>
            For example, in this demo, the timezone of Gantt is set to UTC, and the task named <code>Plan timeline</code>
            has start time as <code>08:00 am</code> but converted based on UTC and rendered at <code>2.30 am</code>.
        </p>
        <p>
            When a user sets any timezone, dates are converted based on the value set to
            <code><a target="_blank" class="code" href="https://help.syncfusion.com/cr/aspnetcore-js2/syncfusion.ej2.gantt.gantt.html#Syncfusion_EJ2_Gantt_Gantt_Timezone">timezone</a></code>
            property of Gantt control.
        </p>
    </div>
}
@section Meta {
    <meta name="description"
        content="This example demonstrates the Timezone in ASP.NET Core Gantt control. Explore here for more details." />
}
@section Title {
    <title>ASP.NET Core Gantt Timezone Example - Syncfusion Demos</title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of Timezone in ASP.NET Core Gantt Control</h1>
}