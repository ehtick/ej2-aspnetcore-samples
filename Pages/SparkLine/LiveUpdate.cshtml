@page
@using Syncfusion.EJ2.Charts;

@section ControlsSection {
    @{
        var container1Border = new SparklineSparklineBorder { Color = "#dcdfe0", Width = 2 };
        var container2Border = new SparklineSparklineBorder { Color = "#dcdfe0", Width = 2 };
        var container3Border = new SparklineSparklineBorder { Color = "#dcdfe0", Width = 2 };
        var container4Border = new SparklineSparklineBorder { Color = "#dcdfe0", Width = 2 };
        var spark1Border = new SparklineSparklineBorder { Color = "#0358a0", Width = 1 };
        var spark2Border = new SparklineSparklineBorder { Color = "#5bcc8f", Width = 1 };
        var spark3Border = new SparklineSparklineBorder { Color = "#b247c6", Width = 1 };
        var spark4Border = new SparklineSparklineBorder { Color = "#AA907A", Width = 1 };
    }
    <div class="control-section" align="center">
        <div id="spark-container" class="row">
            <div class="cols-sample-area" align="center" style="margin-top: 8%;">
                <div align="center" class="col-lg-3 col-m-3 col-sm-6">
                    <div align="center" class="spark" id="spark-container1">
                        <div style="font-size: 12px; position: absolute; margin-top: 10px; margin-left: 8%;">
                            <b>CPU</b>
                        </div>
                        <div id='cpu' style="color: #0877d6;position: absolute; margin-top: 25px; margin-left: 8%;">
                            26% 1.2GHz
                        </div>
                        <ejs-sparkline axisSettings="@new SparklineAxisSettings { MinY = 0 , MaxY = 150 }" id="spark-container1" lineWidth="1" load="sparkLoad" border="spark1Border" height="130px" width="90%" fill="#e8f2fc" type="@SparklineType.Area"
                                       valueType="@Syncfusion.EJ2.Charts.SparklineValueType.Numeric" xName="x" yName="yval">
                            <e-sparkline-containerarea background="white" border="container1Border"></e-sparkline-containerarea>
                        </ejs-sparkline>
                    </div>
                </div>
                <div align="center" class="col-lg-3 col-m-3 col-sm-6">
                    <div align="center" class="spark" id="spark-container2">
                        <div style="font-size: 12px; position: absolute; margin-top: 10px; margin-left: 8%;">
                            <b>Disk</b>
                        </div>
                        <div id="disk" style="color: #b247c6;position: absolute; margin-top: 25px; margin-left: 8%;">
                            50%
                        </div>
                        <ejs-sparkline axisSettings="@new SparklineAxisSettings { MinY =4, MaxY = 8 }" id="spark-container2" lineWidth="1" load="sparkLoad" border="spark3Border" height="130px" width="90%" fill="#f5e8fc" type="@SparklineType.Area"
                                       valueType="@Syncfusion.EJ2.Charts.SparklineValueType.Numeric" xName="x" yName="yval">
                            <e-sparkline-containerarea background="white" border="container3Border"></e-sparkline-containerarea>
                        </ejs-sparkline>
                    </div>    
                </div>
                    <div align="center" class="col-lg-3 col-m-3 col-sm-6">
                        <div align="center" class="spark" id="spark-container3">
                            <div style="font-size: 12px; position: absolute; margin-top: 10px; margin-left: 8%;">
                                <b>Memory</b>
                            </div>
                            <div id="memory" style="color: #5bcc8f;position: absolute; margin-top: 25px; margin-left: 8%;">
                                6.5/15.8 GB (41%)
                            </div>
                        <ejs-sparkline axisSettings="@new SparklineAxisSettings{ MinY =0 ,MaxY = 100 }" id="spark-container3" lineWidth="1" load="sparkLoad" border="spark2Border" height="130px" width="90%" fill="#e0f9d1" type="@SparklineType.Area"
                                           valueType="@Syncfusion.EJ2.Charts.SparklineValueType.Numeric" xName="x" yName="yval">
                                <e-sparkline-containerarea background="white" border="container2Border"></e-sparkline-containerarea>
                            </ejs-sparkline>
                        </div>
                    </div>
                        <div align="center" class="col-lg-3 col-m-3 col-sm-6">
                            <div align="center" class="spark" id="spark-container4">
                                <div style="font-size: 12px; position: absolute; margin-top: 10px; margin-left: 8%;">
                                    <b>Ethernet</b>
                                </div>
                                <div id="net" style="color: #d1a990;position: absolute; margin-top: 25px; margin-left: 8%;">
                                    R: 50Kbps
                                  
                                </div>
                            </div>
                    <ejs-sparkline axisSettings="@new SparklineAxisSettings { MinY = 0 , MaxY = 100 }" id="spark-container4" lineWidth="1" load="sparkLoad" border="spark4Border" height="130px" width="90%" fill="#F2D8C7" type="@SparklineType.Area"
                                           valueType="@Syncfusion.EJ2.Charts.SparklineValueType.Numeric" xName="x" yName="yval">
                                <e-sparkline-containerarea background="white" border="container4Border"></e-sparkline-containerarea>
                            </ejs-sparkline>
                        </div>
                    </div>
                </div>
            </div>
            @*custom code start*@
            <style>
                td {
                    padding: 10px;
                }
            </style>
            @*custom code end*@
            <script src="~/scripts/SparkLine/theme-color.js"></script>
            <script type="text/javascript">
                var spark1, spark2, spark3, spark4;
                var time1, time2, time3, time4;
                var temp1, temp2, temp3, temp4;

                function update1() {
                    if (document.getElementById(spark1.element.id + "_svg")) {
                        var value = ((Math.random() * 100) + 5) % 50;
                        spark1.dataSource.push({ x:spark1.dataSource[spark1.dataSource.length-1].x + 1, yval: value });
                        spark1.dataSource.shift();
                        spark1.refresh();
                        var cpu = document.getElementById('cpu');
                        cpu.innerHTML = ((value / 150) * 100).toFixed(0) + '% ' + ((value * 3) / 100).toFixed(2) + 'GHz';
                    }
                }

                function update2() {
                    if (document.getElementById(spark2.element.id + "_svg")) {
                        var value = Math.random();
                        if (value > 0.6) {
                            value = 6 + (value / 10);
                        } else {
                            value = 6 - (value / 10);
                        }
                        spark2.dataSource.push({ x: spark2.dataSource[spark2.dataSource.length-1].x + 1, yval: value });
                        spark2.dataSource.shift();
                        spark2.refresh();
                        memory = document.getElementById('memory');
                        var gb = parseFloat(value.toString().replace('0', '')).toFixed(1);
                        memory.innerHTML = gb + '/15.8 GB (' + ((value / 15.8) * 100).toFixed(0) + '%)';
                    }
                }

                function update3() {
                    if (document.getElementById(spark3.element.id + "_svg")) {
                        var value = ((Math.random() * 100) + 5) % 80;
                        spark3.dataSource.push({ x: spark3.dataSource[spark3.dataSource.length-1].x + 1, yval: value });
                        spark3.dataSource.shift();
                        spark3.refresh();
                        var disk = document.getElementById('disk');
                        disk.innerHTML = value.toFixed(0) + '%';
                    }
                }

                function update4() {
                    if (document.getElementById(spark4.element.id + "_svg")) {
                        let value = ((Math.random() * 100) + 5) % 80;
                        spark4.dataSource.push({ x: spark4.dataSource[spark4.dataSource.length-1].x + 1, yval: value });
                        spark4.dataSource.shift();
                        spark4.refresh();
                        var net = document.getElementById('net');
                        net.innerHTML = 'R: ' + value.toFixed(0) + 'Kbps';
                    }
                }


                function sparkLoad(args) {
                    loadSparkLineTheme(args);
                    if (!args.sparkline.refreshing) {                       
                        if (args.sparkline.element.id === "spark-container1") {
                            spark1 = args.sparkline;
                            time1 = setInterval(update1, 1000);
                            args.sparkline.dataSource = [
                                { x: 0, yval: 50 },
                                { x: 1, yval: 30 },
                                { x: 2, yval: 20 },
                                { x: 3, yval: 30 },
                                { x: 4, yval: 50 },
                                { x: 5, yval: 40 },
                                { x: 6, yval: 20 },
                                { x: 7, yval: 10 },
                                { x: 8, yval: 30 },
                                { x: 9, yval: 10 },
                                { x: 10, yval: 40 },
                                { x: 11, yval: 50 },
                                { x: 12, yval: 10 },
                                { x: 13, yval: 30 },
                                { x: 14, yval: 50 },
                                { x: 15, yval: 20 },
                                { x: 16, yval: 10 },
                                { x: 17, yval: 40 },
                                { x: 18, yval: 30 },
                                { x: 19, yval: 40 }
                            ];
                        } else if (args.sparkline.element.id === "spark-container2") {
                            spark2 = args.sparkline;
                            time2 = setInterval(update2, 1000);
                            args.sparkline.dataSource = [
                                { x: 0, yval: 6.05 },
                                { x: 1, yval: 6.03 },
                                { x: 2, yval: 6.02 },
                                { x: 3, yval: 6.07 },
                                { x: 4, yval: 6.05 },
                                { x: 5, yval: 6.09 },
                                { x: 6, yval: 6.08 },
                                { x: 7, yval: 6.01 },
                                { x: 8, yval: 6.03 },
                                { x: 9, yval: 6.01 },
                                { x: 10, yval: 6.07 },
                                { x: 11, yval: 6.05 },
                                { x: 12, yval: 6.01 },
                                { x: 13, yval: 6.06 },
                                { x: 14, yval: 6.05 },
                                { x: 15, yval: 6.03 },
                                { x: 16, yval: 6.01 },
                                { x: 17, yval: 6.09 },
                                { x: 18, yval: 6.06 },
                                { x: 19, yval: 6.05 }
                            ];
                        } else if (args.sparkline.element.id === "spark-container3") {
                            spark3 = args.sparkline;
                            time3 = setInterval(update3, 1000);
                            args.sparkline.dataSource = [
                                { x: 0, yval: 50 },
                                { x: 1, yval: 30 },
                                { x: 2, yval: 20 },
                                { x: 3, yval: 70 },
                                { x: 4, yval: 50 },
                                { x: 5, yval: 20 },
                                { x: 6, yval: 80 },
                                { x: 7, yval: 10 },
                                { x: 8, yval: 30 },
                                { x: 9, yval: 10 },
                                { x: 10, yval: 70 },
                                { x: 11, yval: 50 },
                                { x: 12, yval: 10 },
                                { x: 13, yval: 60 },
                                { x: 14, yval: 50 },
                                { x: 15, yval: 30 },
                                { x: 16, yval: 10 },
                                { x: 17, yval: 20 },
                                { x: 18, yval: 60 },
                                { x: 19, yval: 50 }
                            ];
                        } else {
                            spark4 = args.sparkline;
                            time4 = setInterval(update4, 1000);
                            args.sparkline.dataSource = [
                                { x: 0, yval: 50 },
                                { x: 1, yval: 30 },
                                { x: 2, yval: 20 },
                                { x: 3, yval: 70 },
                                { x: 4, yval: 50 },
                                { x: 5, yval: 20 },
                                { x: 6, yval: 80 },
                                { x: 7, yval: 10 },
                                { x: 8, yval: 30 },
                                { x: 9, yval: 10 },
                                { x: 10, yval: 70 },
                                { x: 11, yval: 50 },
                                { x: 12, yval: 10 },
                                { x: 13, yval: 60 },
                                { x: 14, yval: 50 },
                                { x: 15, yval: 30 },
                                { x: 16, yval: 10 },
                                { x: 17, yval: 20 },
                                { x: 18, yval: 60 },
                                { x: 19, yval: 50 }
                            ];
                        }
                    }
                }
            </script>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Live Update in ASP.NET Core Sparkline control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample visualizes the CPU, memory, disk and Ethernet usage by dynamically updating the values in Sparkline.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to dynamically update the values of sparkline. We have rendered 4 sparklines and updating their value for every second.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Sparkline Live Update Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Live Update in ASP.NET Core Sparkline Control</h1>
                }