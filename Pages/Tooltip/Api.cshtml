@page
@using Syncfusion.EJ2

@{
    string[] ddlData = new String[] { "Hover", "Click", "Auto" };
}
@section ControlsSection{
    <div class="col-lg-8 control-section">
        <!-- Tooltip element -->
        <ejs-tooltip id="tooltip" target="#default" content="Tooltip content" opensOn="Click" created="onCreated" windowCollision="true" position="TopCenter">
            <e-content-template>
                <ejs-button id="default" content="Show Tooltip"></ejs-button>
            </e-content-template>
        </ejs-tooltip>
    </div>

    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td style="width: 50%">
                        <div class="userselect">Content</div>
                    </td>
                    <td style="width: 50%;padding-right: 10px">
                        <div>
                            <input id="tooltipContentValue" type="text" placeholder="Tooltip content">
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 50%">
                        <div class="userselect">Height</div>
                    </td>
                    <td style="width: 50%;padding-right: 10px">
                        <div>
                            <ejs-numerictextbox id="height" value="45" change="onHeightChange" type="text"></ejs-numerictextbox>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 50%">
                        <div class="userselect">Width</div>
                    </td>
                    <td style="width: 50%;padding-right: 10px">
                        <div>
                            <ejs-numerictextbox id="width" value="100" change="onWidthChange" class="e-input" type="text"></ejs-numerictextbox>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 50%">
                        <div class="userselect">Open Mode</div>
                    </td>
                    <td style="width: 50%;padding-right: 10px">
                        <div>
                            <ejs-dropdownlist type="text" tabindex="1" placeholder="Select mode" dataSource="ddlData" change="onModeChange" id='ddlelement'></ejs-dropdownlist>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 50%">
                        <div class="userselect">Sticky Mode</div>
                    </td>
                    <td style="width: 50%;padding-right: 10px">
                        <div>
                            <ejs-checkbox id="sticky" type="checkbox" checked="false" change="stickyChange"></ejs-checkbox>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

<style>
    .userselect {
        -webkit-user-select: none;
        /* Safari 3.1+ */
        -moz-user-select: none;
        /* Firefox 2+ */
        -ms-user-select: none;
        /* IE 10+ */
        user-select: none;
        /* Standard syntax */
    }

    #property {
        padding-top: 200px;
    }

    #default {
        position: absolute;
        left: calc( 50% - 60px);
        top: 35%;
    }

    #tooltipContentValue {
        height: 34px;
        width: 136px;
        padding-left: 10px;
    }

    .highcontrast #tooltipContentValue {
        border: 1px solid;
        border-width: 1px;
        color: #fff;
        background: #000;
    }
</style>

<script type="text/javascript">
    var tooltipObj;
    var buttonElement
    function onCreated() {
        tooltipObj = document.getElementById("tooltip").ej2_instances[0];
        buttonElement = document.getElementById("default");
        //change event handler for content change
        document.querySelector('#tooltipContentValue').addEventListener('change', function () {
            tooltipObj.content = this.value;
            tooltipObj.refresh(buttonElement);
        });

        //Attached scroll and click event listners in right pane
        if (document.getElementById('right-pane')) {
            document.getElementById('right-pane').addEventListener('click', onClick);
            document.getElementById('right-pane').addEventListener('scroll', onScroll);
        }
    }
    //change event handler for height change in Tooltip
    function onHeightChange(args) {
        tooltipObj.height = args.value;
        tooltipObj.refresh(buttonElement);
    }

    //change event handler for width change in Tooltip
    function onWidthChange(args) {
        tooltipObj.width = args.value;
        tooltipObj.refresh(buttonElement);
    }

    //change event handler for mode change in Tooltip
    function onModeChange(args) {
        tooltipObj.opensOn = args.value;
        tooltipObj.close();
    }

    //change event handler for sticky mode in Tooltip
    function stickyChange(args) {
        tooltipObj.isSticky = args.checked;
        tooltipObj.close();
    }

    //scroll event handler to close Tooltip while perfomring page scroll
    function onScroll(args) {
        if (document.getElementsByClassName('e-tooltip-wrap').length > 0) {
            tooltipObj.close();
        }
    }

    //click event handler to close Tooltip while navigating to other tabs in right pane
    function onClick(args) {
        if (args.target.parentNode.className === 'e-tab-text') {
            if (document.getElementsByClassName('e-tooltip-wrap').length > 0) {
                tooltipObj.close();
            }
        }
    }

</script>
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates how to customize the tooltip component by using its properties from the property pane. Select any combination of properties from the property pane to customize tooltips.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            In this demo, the default tooltip is rendered with minimal configuration. This sample can be customized further with the combination of tooltip properties from the property pane. For example,
        </p>
        <ul>
            <li>Any change made to a textbox in the property pane will be reflected in the tooltip <code>Content</code></li>
            <li><code>StickyMode</code>can be enabled by checking the sticky mode option in the property pane.</li>
            <li><code>Height</code> and <code>Width</code> can be changed from the property pane.</li>
            <li><code>OpenMode</code> can be changed from the property pane.</li>
        </ul>
        <p>
            More information on customization of the tooltip can be found in the
            <a href="https://ej2.syncfusion.com/aspnetcore/documentation/tooltip/customization/" target="_blank "aria-label="Documentation section for Customization in Tooltip Control" > Documentation section</a>.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the API in ASP.NET Core Tooltip control. Explore here for more details."/>
                }
@section Title{
                    <title>ASP.NET Core Tooltip API Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of API in ASP.NET Core Tooltip Control</h1>
                }
