@page
@model EJ2CoreSampleBrowser.Pages.PivotTable.ValueFiltering

@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2.PivotView;
@using Syncfusion.EJ2.DropDowns;
@section Meta{
<meta name="description"
    content="This example demonstrates the Value Filtering in ASP.NET Core Pivot Table control. Explore here for more details." />
}

@{
    var data = new PivotTableData().GetPivot_Data();
    var filterFields = new string[] { "Country", "Products", "Year" };
    var filterOperators = new string[]
    {
        "Equals", "DoesNotEquals", "GreaterThan", "GreaterThanOrEqualTo",
        "LessThan", "LessThanOrEqualTo", "Between", "NotBetween"
    };
    var selectedMeasure = "In_Stock";
    var selectedOperator = "DoesNotEquals";
}
@section ControlsSection{

<div class="col-lg-8 control-section" style="overflow:auto">
    <div class="content-wrapper">
        <ejs-pivotview id="pivotview" width="100%" height="300" dataBound="onDataBound">
            <e-datasourcesettings dataSource="@data" expandAll="false" enableSorting="true"
                allowValueFilter="true">
                <e-formatsettings>
                    <e-field name="Amount" format="C0" maximumSignificantDigits="10" minimumSignificantDigits="1"
                        useGrouping="true"></e-field>
                </e-formatsettings>
                <e-rows>
                    <e-field name="Country"></e-field>
                    <e-field name="Products"></e-field>
                </e-rows>
                <e-columns>
                    <e-field name="Year"></e-field>
                </e-columns>
                <e-values>
                    <e-field name="In_Stock" caption="In Stock"></e-field>
                    <e-field name="Sold" caption="Units Sold"></e-field>
                    <e-field name="Amount" caption="Sold Amount"></e-field>
                </e-values>
                <e-filters>
                    <e-field name="Product_Categories" caption="Product Categories"></e-field>
                </e-filters>
            </e-datasourcesettings>
            <e-gridSettings columnWidth="140"></e-gridSettings>
        </ejs-pivotview>
    </div>
</div>
<div class="col-lg-4 property-section pivottable-property-section">
    <table id="property" title="Properties" style="width: 100%;height:100%;">
        <tbody>
            <tr style="height: 50px">
                <td>
                    <div>
                        Fields:
                    </div>
                </td>
                <td style="padding-bottom: 16px">
                    <div>
                        <ejs-dropdownlist id="fields" dataSource="@filterFields" change="onFieldChange"
                            index="0" width="100%">
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div>
                        Measures:
                    </div>
                </td>
                <td style="padding-bottom: 16px">
                    <div>
                        <ejs-dropdownlist id="measures" dataSource="@Model.filterMeasures" change="onMeasureChange"
                            value="@selectedMeasure" width="100%">
                            <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div>
                        Condition:
                    </div>
                </td>
                <td style="padding-bottom: 16px">
                    <div class="conditionscls">
                        <ejs-dropdownlist id="conditions" dataSource="@filterOperators"
                            change="conditionsChange" value="@selectedOperator">
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr class="input1cls" style="height: 50px">
                <td>
                    <div>
                        Value 1:
                    </div>
                </td>
                <td style="padding-bottom: 16px">
                    <div class="value1cls">
                        <ejs-numerictextbox id="value1" value="0" placeholder="Example: 9590" change="valueInput1"
                            width="100%"></ejs-numerictextbox>
                    </div>
                </td>
            </tr>
            <tr class="input2cls" style="height: 50px; display: none">
                <td>
                    <div>
                        Value 2:
                    </div>
                </td>
                <td style="padding-bottom: 16px">
                    <div class="value2cls">
                        <ejs-numerictextbox id="value2" value="0" placeholder="Example: 17500" change="valueInput2"
                            width="100%"></ejs-numerictextbox>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td colspan="2">
                    <div style="float:right;margin-right: 4px">
                        <ejs-button id="clear" content="Clear"></ejs-button>
                    </div>
                    <div style="float:right;margin-right: 4px">
                        <ejs-button id="apply-btn" isPrimary="true" content="Apply"></ejs-button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<style>
    #pivotview {
        width: 100%;
        height: 100%;
    }

    .pivottable-property-section table tr td:first-child {
        width: 20%;
    }

    .pivottable-property-section {
        overflow: auto;
    }

    .sb-sample-content-area {
        min-height: 255px !important;
    }

    .control-section {
        min-height: 255px !important;
    }
</style>
<script>
    var fieldCollections = {};
    var operators = ['Equals', 'DoesNotEquals', 'GreaterThan', 'GreaterThanOrEqualTo',
        'LessThan', 'LessThanOrEqualTo', 'Between', 'NotBetween'];
    var fields = ['Country', 'Products', 'Year'];
    var measures = [
        { value: 'In_Stock', text: 'In Stock' },
        { value: 'Sold', text: 'Units Sold' },
        { value: 'Amount', text: 'Sold Amount' }
    ];
    function onFieldChange(args) {
        var measuresddl = document.getElementById('measures').ej2_instances[0];
        var operatorddl = document.getElementById('conditions').ej2_instances[0];
        var valueInput1 = document.getElementById('value1').ej2_instances[0];
        var valueInput2 = document.getElementById('value2').ej2_instances[0];
        if (fieldCollections[args.value]) {
            measuresddl.value = fieldCollections[args.value].measure;
            operatorddl.value = fieldCollections[args.value].condition;
        } else {
            setFilters(args.value, 'In_Stock', 'DoesNotEquals', null, null);
            operatorddl.value = 'DoesNotEquals';
            measuresddl.value = 'In_Stock';
        }
    }
    function onMeasureChange(args) {
        var fieldsddl = document.getElementById('fields').ej2_instances[0];
        var measuresddl = document.getElementById('measures').ej2_instances[0];
        var operatorddl = document.getElementById('conditions').ej2_instances[0];
        var valueInput1 = document.getElementById('value1').ej2_instances[0];
        var valueInput2 = document.getElementById('value2').ej2_instances[0];
        setFilters(fieldsddl.value, args.value, operatorddl.value, valueInput1.value, valueInput2.value);
    }
    function conditionsChange(args) {
        var operatorddl = document.getElementById('conditions').ej2_instances[0];
        var fieldsddl = document.getElementById('fields').ej2_instances[0];
        var measuresddl = document.getElementById('measures').ej2_instances[0];
        var valueInput1 = document.getElementById('value1').ej2_instances[0];
        var valueInput2 = document.getElementById('value2').ej2_instances[0];
        if (args.value === 'Between' || args.value === 'NotBetween') {
            document.querySelector('.input2cls').style.display = '';
        }
        else {
            document.querySelector('.input2cls').style.display = 'none';
        }
        setFilters(fieldsddl.value, measuresddl.value, args.value, valueInput1.value, valueInput2.value);
    }
    function valueInput1(e) {
        var fieldsddl = document.getElementById('fields').ej2_instances[0];
        var measuresddl = document.getElementById('measures').ej2_instances[0];
        var operatorddl = document.getElementById('conditions').ej2_instances[0];
        var valueInput2 = document.getElementById('value2').ej2_instances[0];
        setFilters(fieldsddl.value, measuresddl.value, operatorddl.value, e.value, valueInput2.value);
    }
    function valueInput2(e) {
        var fieldsddl = document.getElementById('fields').ej2_instances[0];
        var measuresddl = document.getElementById('measures').ej2_instances[0];
        var operatorddl = document.getElementById('conditions').ej2_instances[0];
        var valueInput1 = document.getElementById('value1').ej2_instances[0];
        setFilters(fieldsddl.value, measuresddl.value, operatorddl.value, valueInput1.value, e.value);
    }
    function onDataBound() {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        fieldCollections = {};
        for (var i = 0, filters = pivotObj.dataSourceSettings.filterSettings; i < filters.length; i++) {
            var field = filters[i];
            fieldCollections[field.name] = field;
        }
    }
    function setFilters(fieldName, measureName, condition, operand1, operand2) {
        fieldCollections[fieldName] = {
            name: fieldName,
            type: 'Value',
            measure: measureName,
            condition: condition,
            value1: operand1,
            value2: operand2
        };
    }
    document.getElementById('apply-btn').onclick = function () {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var fieldsddl = document.getElementById('fields').ej2_instances[0];
        var measuresddl = document.getElementById('measures').ej2_instances[0];
        var operatorddl = document.getElementById('conditions').ej2_instances[0];
        var valueInput1 = document.getElementById('value1').ej2_instances[0];
        var valueInput2 = document.getElementById('value2').ej2_instances[0];
        var filterOptions = [];
        filterOptions = [{
            name: fieldsddl.value,
            type: 'Value',
            measure: measuresddl.value,
            condition: operatorddl.value,
            value1: valueInput1.value === null ? 1 : valueInput1.value,
            value2: valueInput2.value === null ? 1 : valueInput2.value
        }];
        pivotObj.dataSourceSettings.filterSettings = filterOptions;
    }
    document.getElementById('clear').onclick = function () {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var valueInput1 = document.getElementById('value1').ej2_instances[0];
        var valueInput2 = document.getElementById('value2').ej2_instances[0];
        pivotObj.dataSourceSettings.filterSettings = [];
        valueInput1.value = '0';
        valueInput2.value = '0';
    };
    document.addEventListener('DOMContentLoaded', function () {
        var fieldsddl = document.getElementById('fields').ej2_instances[0];
        var measuresddl = document.getElementById('measures').ej2_instances[0];
        var operatorddl = document.getElementById('conditions').ej2_instances[0];
        fieldsddl.dataSource = fields;
        measuresddl.dataSource = measures;
        operatorddl.dataSource = operators;
    });
</script>
}

@section PreScripts {
<script>
    ej.base.enableRipple(false);
</script>
}

@section ActionDescription{
<div id="action-description">
    <p>This sample demonstrates filtering row and column headers based on a specific measure and the grand total. The
        different conditions that can be applied to the grand total are equals, less than, greater than, between, etc.
    </p>
</div>
}

@section Description{
<div id="description">
    <p>
        In this sample, any field can be selected from the
        <b>Fields</b> dropdown list along with value field from
        <b>Measures</b> dropdown list to filter. Further, choose an option from the
        <b>Conditions</b> dropdown list, enter the values in
        <b>Value1</b> and
        <b>Value2</b> input textbox and apply the same to view the field headers filtered based on the grand total.
    </p>
    <p>
        Value filtering can be applied either through code-behind or UI. To achieve this in code-behind, use the
        <code>filterSettings</code> object in the pivot table along with the following properties.
    </p>
    <table>
        <tr>
            <td style="vertical-align: top;padding: 10px 0;width:100px">
                <code>name :</code>
            </td>
            <td>Specifies the normal field.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>type :</code>
            </td>
            <td>Specifies the filter type and it should be "Value" in this scenario.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>measure :</code>
            </td>
            <td>Specifies the value based field.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>condition :</code>
            </td>
            <td>Specifies the operator type like equals, greater than, less than, etc.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>value1 :</code>
            </td>
            <td>Gets the value to view the filter result. For example, select "DoesNotEquals" and enter "9590" to
                exclude the grand total with this value.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>value2 :</code>
            </td>
            <td>For conditions like "between" and "not between", this option will be enabled. Enter both start and end
                value to view the filter result. For example, enter "9590" and "17500" to filter the grand totals within
                this range.</td>
        </tr>
    </table>
    <br />
    <p>
        To achieve value filtering through UI, navigate to
        <b>"User Interaction > Field List"</b> sample and open the filter dialog.
        For API details, refer to the
        <b>"Field List"</b> sample description.
    </p>
</div>
}
@section Title{
<title>ASP.NET Core Pivot Table Value Filtering Example - Syncfusion Demos </title>
}
@section Header{
<h1 class='sb-sample-text'>Example of Value Filtering in ASP.NET Core Pivot Table Control</h1>
}