@page

@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@section Meta{
                    <meta name="description" content="This example demonstrates the Calculated Field in ASP.NET Core Pivot Table control. Explore here for more details."/>
}

@{
    var stock = "\"" + "Sum(In_Stock)" + "\"";
    var sold = "\"" + "Sum(Sold)" + "\"";
    var totalPrice = stock + "+" + sold;
    var data = new PivotTableData().GetPivot_Data();
}

@section ControlsSection{
    

    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            <ejs-pivotview id="pivotview"  width="100%" height="300" allowCalculatedField="true" showFieldList="true">
                <e-datasourcesettings dataSource="@data" expandAll="false" enableSorting="true">
                    <e-formatsettings>
                        <e-field name="Amount" format="C0" maximumSignificantDigits="10" minimumSignificantDigits="1" useGrouping="true"></e-field>
                    </e-formatsettings>
                    <e-rows>
                        <e-field name="Country"></e-field>
                        <e-field name="Products"></e-field>
                    </e-rows>
                    <e-columns>
                        <e-field name="Year"></e-field>
                        <e-field name="Order_Source" caption="Order Source"></e-field>
                    </e-columns>
                    <e-values>
                        <e-field name="In_Stock" caption="In Stock"></e-field>
                        <e-field name="Sold" caption="Units Sold"></e-field>
                        <e-field name="Total" caption="Total Units" type="CalculatedField"></e-field>
                    </e-values>
                    <e-filters>
                        <e-field name="Product_Categories" caption="Product Categories"></e-field>
                    </e-filters>
                    <e-calculatedfieldsettings>
                        <e-field name="Total" formula="@totalPrice"></e-field>
                    </e-calculatedfieldsettings>
                </e-datasourcesettings>
                <e-gridSettings columnWidth="140"></e-gridSettings>
            </ejs-pivotview>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td>
                        <div>
                            <ejs-button id="calculated-field-btn" content="Calculated Field" isPrimary="true"></ejs-button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        #pivotview {
            width: 100%;
            height: 100%;
        }
        .sb-sample-content-area {
            min-height: 255px !important;
        }
        .control-section {
            min-height: 255px !important;
        }
    </style>
    <script>
        document.getElementById("calculated-field-btn").addEventListener('click', function () {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            if (ej.base.Browser.isDevice) {
                pivotObj.pivotFieldListModule.dialogRenderer.onShowFieldList();
            } else {
                pivotObj.calculatedFieldModule.createCalculatedFieldDialog();
            }
        });
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
   <div id="action-description">
       <p>
           In this sample, <b>Total Units</b> acts as the calculated field. Users can insert a new basic arithmetic expression based on the existing measure items either through a dialog at runtime or through code behind.
       </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The calculated field feature allows users to create custom fields which are not present in the actual data. Users can
            create these fields using basic mathematical expression collaborating with existing fields. Calculated fields can
            be created through UI dialog as well as code behind and it can be enabled by setting <code>allowCalculatedField</code> as true. The
            <code>calculatedFieldSettings</code> property is available to configure the calculated field in code behind.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Pivot Table Calculated Field Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Calculated Field in ASP.NET Core Pivot Table Control</h1>
                }