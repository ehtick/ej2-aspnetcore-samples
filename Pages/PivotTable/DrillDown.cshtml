@page
@model EJ2CoreSampleBrowser.Pages.PivotTable.DrillDown

@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@using Syncfusion.EJ2.DropDowns
@section Meta{
<meta name="description"
    content="This example demonstrates the Drill Down in ASP.NET Core Pivot Table control. Explore here for more details." />
}

@{
    var data = new PivotTableData().GetPivot_Data();
    var selectedOption = "rowHeaders";
    var selectedField = "Country";
    var drillDownValues = new List<object>();
}
@section ControlsSection {
<div class="col-lg-8 control-section" style="overflow:auto">
    <div class="content-wrapper">
        <ejs-pivotview id="pivotview" width="100%" height="300" dataBound="onDataBound">
            <e-datasourcesettings dataSource="@data" expandAll="false" enableSorting="true">
                <e-formatsettings>
                    <e-field name="Amount" format="C0" maximumSignificantDigits="10" minimumSignificantDigits="1"
                        useGrouping="true"></e-field>
                </e-formatsettings>
                <e-rows>
                    <e-field name="Country" expandAll="true"></e-field>
                    <e-field name="Products"></e-field>
                </e-rows>
                <e-columns>
                    <e-field name="Year"></e-field>
                    <e-field name="Order_Source" caption="Order Source"></e-field>
                </e-columns>
                <e-values>
                    <e-field name="In_Stock" caption="In Stock"></e-field>
                    <e-field name="Sold" caption="Units Sold"></e-field>
                    <e-field name="Amount" caption="Sold Amount"></e-field>
                </e-values>
                <e-filters>
                    <e-field name="Product_Categories" caption="Product Categories"></e-field>
                </e-filters>
            </e-datasourcesettings>
            <e-gridSettings columnWidth="140"></e-gridSettings>
        </ejs-pivotview>
    </div>
</div>
<div class="col-lg-4 property-section pivot-property-section">
    <table id="property" title="Properties" style="width: 100%;height:100%;">
        <tbody>
            <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Drill Down:
                    </div>
                </td>
                <td>
                    <div>
                        <ejs-dropdownlist id="expandall" dataSource="@Model.drillDownOptions"
                            value="@selectedOption" width="100%" change="onOptionChange">
                            <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr class="field_cls" style="height: 50px; display: none">
                <td>
                    <div class="hdrlabel">Fields:
                    </div>
                </td>
                <td>
                    <div>
                        <ejs-multiselect id="expand-fields" dataSource="@Model.drillDownFields" mode="CheckBox"
                            showDropDownIcon="true" enabled="true" showClearButton="false" enableSelectionOrder="false"
                            index="0" placeHolder="Select fields" select="onFieldSelect" removed="onFieldRemoved"
                            open="onOpen">
                            <e-multiselect-fields text="Field"></e-multiselect-fields>
                        </ejs-multiselect>
                    </div>
                </td>
            </tr>
            <tr class="field_cls_1" style="height: 50px; display: none">
                <td>
                    <div class="hdrlabel">Fields:
                    </div>
                </td>
                <td>
                    <div>
                        <ejs-dropdownlist id="expand-fields-1" placeHolder="Select field"
                            dataSource="@Model.drillDownFields" value="@selectedField" width="100%"
                            change="multiFieldChange">
                            <e-dropdownlist-fields text="Field"></e-dropdownlist-fields>
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr class="members_cls" style="height: 50px; display: none">
                <td>
                    <div class="hdrlabel">Headers:
                    </div>
                </td>
                <td>
                    <div>
                        <ejs-multiselect id="expand-members" dataSource="@drillDownValues" mode="CheckBox"
                            showDropDownIcon="true" showClearButton="false" enableSelectionOrder="false"
                            placeHolder="Select headers" select="onHeaderSelect" removed="onHeaderRemoved"
                            open="onOpen">
                            <e-multiselect-fields text="Member"></e-multiselect-fields>
                        </ejs-multiselect>
                    </div>
                </td>
            </tr>
            <tr class="apply_cls" style="height: 50px; display: none">
                <td></td>
                <td>
                    <div style="float: right;">
                        <ejs-button id="expand-apply" isPrimary="true" content="Apply"></ejs-button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<style>
    .e-multiselect.e-input-group {
        padding: 0px !important;
    }

    .pivot-property-section table tr td:first-child {
        width: 20%;
    }

    .e-bigger .pivot-property-section .e-input-group.e-control-wrapper .e-input-group-icon {
        padding: 0px !important;
        min-height: 36px;
        min-width: 36px;
    }
</style>
<script>
    var isInitial = true;
    var fieldCollections = {};
    var storeMembers = { 'Country': [], 'Year': [] };
    var values = [];
    var isRowSelect = false;
    var isColumnSelect = false;
    ej.base.enableRipple(false);
    var options = [
        { value: 'allHeaders', text: 'All headers' },
        { value: 'rowHeaders', text: 'Row headers' },
        { value: 'columnHeader', text: 'Column headers' },
        { value: 'specificFields', text: 'Specific fields' },
        { value: 'specificHeaders', text: 'Specific headers' }
    ];
    var fields = [
        { Field: 'Country', expandAll: false },
        { Field: 'Year', expandAll: false }
    ];
    function onDataBound(args) {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        if (isInitial) {
            /** To fill the members for each fields into the object fieldCollections. */
            var fieldCnt = fields.length - 1;
            while (fieldCnt > -1) {
                var members = Object.keys(pivotObj.engineModule.fieldList[fields[fieldCnt].Field].members);
                var memberCnt = members.length;
                var membersCollection = [];
                for (var i = 0; i < memberCnt; i++) {
                    membersCollection.push({ Member: members[i], Checked: members[i] + '_' + false });
                }
                fieldCollections[fields[fieldCnt].Field] = membersCollection;
                fieldCnt--;
            }
            values = fieldCollections[fields[0].Field];
            membersOrder.dataSource = values;
            membersOrder.dataBind();
            fieldsddl.dataBind();
            isInitial = false;
        }
    }
    function onFieldSelect(args) {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        var optionsdll = document.getElementById('expandall').ej2_instances[0];
        membersOrder.value = [];
        if (storeMembers.Country.length > 0 || storeMembers.Year.length > 0) {
            storeMembers = { 'Country': [], 'Year': [] };
            isInitial = true;
        }
        if (args.itemData.Field === 'Country') {
            pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            updateRowColumn(false, true, isColumnSelect);
            isRowSelect = true;
        } else if (args.itemData.Field === 'Year') {
            pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            updateRowColumn(false, isRowSelect, true);
            isColumnSelect = true;
        }
    }
    function onFieldRemoved(args) {
        if (args.itemData.Field === 'Country') {
            updateRowColumn(false, false, isColumnSelect);
            isRowSelect = false;
        } else if (args.itemData.Field === 'Year') {
            updateRowColumn(false, isRowSelect, false);
            isColumnSelect = false;
        }
    }
    function onOpen(args) {
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        var optionsdll = document.getElementById('expandall').ej2_instances[0];
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        if (args.popup.element.querySelector(".e-filter-parent")) {
            args.popup.element.querySelector(".e-filter-parent").style.display = 'none';
        }
    }
    function onOptionChange(args) {
        document.querySelector('.field_cls').style.display = 'none';
        document.querySelector('.field_cls_1').style.display = 'none';
        document.querySelector('.members_cls').style.display = 'none';
        document.querySelector('.apply_cls').style.display = 'none';
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        if (args.value == 'allHeaders') {
            clear();
            pivotObj.setProperties({ dataSourceSettings: { expandAll: true, drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            pivotObj.refreshData();
        } else if (args.value == 'rowHeaders') {
            clear();
            pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            updateRowColumn(false, true, false);
        } else if (args.value == 'columnHeader') {
            clear();
            pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            updateRowColumn(false, false, true);
        } else if (args.value == 'specificFields') {
            document.querySelector('.field_cls').style.display = '';
        } else if (args.value == 'specificHeaders') {
            document.querySelector('.field_cls_1').style.display = '';
            document.querySelector('.members_cls').style.display = '';
            document.querySelector('.apply_cls').style.display = '';
        }
    }
    function multiFieldChange(args) {
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields-1').ej2_instances[0];
        membersOrder.dataSource = fieldCollections[args.itemData.Field.toString()];
        membersOrder.value = getSelectedMembers(args.itemData.Field.toString());
        membersOrder.dataBind();
        fieldsddl.dataBind();
    }
    function onHeaderSelect(args) {
        var field1 = document.getElementById('expand-fields-1').ej2_instances[0];
        var applyBtn = document.getElementById('expand-apply').ej2_instances[0];
        setMemberCheckedState(field1.itemData.Field, args.item.textContent, args.item.textContent + '_' + true);
        applyBtn.disabled = false;
        storeMembers[field1.itemData.Field].push(args.itemData.Member);
    }
    function onHeaderRemoved(args) {
        var field1 = document.getElementById('expand-fields-1').ej2_instances[0];
        setMemberCheckedState(field1.itemData.Field, args.item.textContent, args.item.textContent + '_' + false);
        index = storeMembers[field1.itemData.Field].indexOf(args.itemData.Member);
        if (storeMembers[field1.itemData.Field].includes(args.itemData.Member)) {
            storeMembers[field1.itemData.Field].splice(index, 1);
        }
    }
    document.getElementById('expand-apply').onclick = function () {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        fieldsddl.value = [];
        isRowSelect = false;
        isColumnSelect = false;
        pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: storeMembers.Country }, { name: 'Year', items: storeMembers.Year }] } }, true);
        updateRowColumn(false, false, false);
    };

    /** To set the checked status of the members maintained in the object fieldCollections. */
    function setMemberCheckedState(field, member, checkedState) {
        var members = fieldCollections[field];
        var membersLength = members.length - 1;
        while (membersLength > -1) {
            if (members[membersLength].Member === member) {
                members[membersLength].Checked = checkedState;
                break;
            }
            membersLength--;
        }
    }

    /** To get the checked members/status here as string array. */
    function getSelectedMembers(field) {
        var membersColls = [];
        var members = fieldCollections[field];
        var membersLength = members.length - 1;
        while (membersLength > -1) {
            if (members[membersLength].Checked === members[membersLength].Member + '_' + true) {
                membersColls.push(members[membersLength].Member.toString());
            }
            membersLength--;
        }
        return membersColls;
    }

    function updateRowColumn(isExpand, isRowExpand, isColumnExpand) {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        pivotObj.setProperties({
            dataSourceSettings: {
                expandAll: isExpand, rows: [
                    { name: 'Country', expandAll: fieldsddl.dataSource[0].expandAll = isRowExpand },
                    { name: 'Products' }
                ], columns: [
                    { name: 'Year', expandAll: fieldsddl.dataSource[1].expandAll = isColumnExpand },
                    { name: 'Order_Source' }
                ]
            }
        }, true);
        pivotObj.refreshData();
    }

    function clear() {
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        fieldsddl.value = [];
        isRowSelect = false;
        isColumnSelect = false;
        membersOrder.value = [];
        if (storeMembers.Country.length > 0 || storeMembers.Year.length > 0) {
            storeMembers = { 'Country': [], 'Year': [] };
            isInitial = true;
        }
    }
</script>
}

@section PreScripts {
<script>
    ej.base.enableRipple(false);
</script>
}

@section ActionDescription{
<div id="action-description">
    <p>This sample demonstrates how to drill down on all headers, column headers only, row headers only, specific
        field(s), and specific member(s) within the specific field(s).</p>
</div>
}

@section Description{
<div id="description">
    <p>In this sample, drill down can be performed based on the option selected from the <b>Drill Down</b> dropdown
        list. The available options are described in detail below.</p>
    <table>
        <tr>
            <td style="vertical-align: top;padding: 10px 0;width: 150px">
                <code>All headers :</code>
            </td>

            <td style="padding-top: 10px;">Allows to expand all headers of row and column axes in the pivot table.
                It can be achieved by setting the <code>expandAll</code> property to <b>true</b> in the
                <code>dataSourceSettings</code>.
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Row headers :</code>
            </td>
            <td style="padding-top: 2px;">Allows to expand all row headers in the pivot table.
                It can be achieved by setting the <code>expandAll</code> property to <b>true</b> for row fields only.
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Column headers :</code>
            </td>
            <td style="padding-top: 2px;">Allows to expand all column headers in the pivot table.
                It can be achieved by setting the <code>expandAll</code> property to <b>true</b> for column fields only.
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Specific fields :</code>
            </td>
            <td style="padding-top: 3px;">Allows to expand specific field(s) in the pivot table's row or column axes.
                It can be achieved by setting the <code>expandAll</code> property for the relevant field(s) in the row
                and column axes to <b>true</b>.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Specific headers :</code>
            </td>
            <td style="padding-top: 3px;">Allows to expand specific header(s) within the respective field available in
                the pivot table's row or column axes.
                It can be achieved by specifying the respective field name and its member(s), aka header name(s), inside
                the <code>drilledMembers</code> property in the <code>dataSourceSettings</code>.</td>
        </tr>
    </table>
</div>
}
@section Title{
<title>ASP.NET Core Pivot Table Drill Down Example - Syncfusion Demos </title>
}
@section Header{
<h1 class='sb-sample-text'>Example of Drill Down in ASP.NET Core Pivot Table Control</h1>
}