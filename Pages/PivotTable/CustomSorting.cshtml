@page
@model EJ2CoreSampleBrowser.Pages.PivotTable.CustomSorting

@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@using Syncfusion.EJ2.DropDowns;
@section Meta{
                    <meta name="description" content="This example demonstrates the Custom Sorting in ASP.NET Core Pivot Table control. Explore here for more details."/>
}

@{
    var data = new PivotTableData().GetPivot_Data();
    var drilledMembers = new string[] { "Germany" };
    var sortSettings = new string[] { "France", "United States" };
    var sortSettings_1 = new string[] { "FY 2018", "FY 2017" };
    var sortSettings_2 = new string[] { "Gloves", "Bottles and Cages" };
    var customSortingOrder = new string[] { "Ascending", "Descending" };
    var customSortingData = new string[] { };
}
@section ControlsSection {
    <div class="col-lg-8 control-section" style="overflow:auto">
        <div class="content-wrapper">
            <ejs-pivotview id="pivotview" width="100%" height="450" showGroupingBar="true" dataBound="onDataBound" actionComplete="actionComplete">
                <e-datasourcesettings dataSource="@data" expandAll="false" enableSorting="true">
                    <e-drilledmembers>
                        <e-field name="Country" items="@drilledMembers"></e-field>
                    </e-drilledmembers>
                    <e-sortsettings>
                        <e-field name="Country" order="Ascending" membersOrder="@sortSettings"></e-field>
                        <e-field name="Year" order="Descending" membersOrder="@sortSettings_1"></e-field>
                        <e-field name="Products" order="Descending" membersOrder="@sortSettings_2"></e-field>
                    </e-sortsettings>
                    <e-formatsettings>
                        <e-field name="Amount" format="C0" maximumSignificantDigits="10" minimumSignificantDigits="1" useGrouping="true"></e-field>
                    </e-formatsettings>
                    <e-rows>
                        <e-field name="Country"></e-field>
                        <e-field name="Products"></e-field>
                    </e-rows>
                    <e-columns>
                        <e-field name="Year"></e-field>
                        <e-field name="Order_Source" caption="Order Source"></e-field>
                    </e-columns>
                    <e-values>
                        <e-field name="In_Stock" caption="In Stock"></e-field>
                        <e-field name="Sold" caption="Units Sold"></e-field>
                        <e-field name="Amount" caption="Sold Amount"></e-field>
                    </e-values>
                    <e-filters>
                        <e-field name="Product_Categories" caption="Product Categories"></e-field>
                    </e-filters>
                </e-datasourcesettings>
                <e-gridSettings columnWidth="140"></e-gridSettings>
                <e-groupingBarSettings showSortIcon="true"></e-groupingBarSettings>
            </ejs-pivotview>
        </div>
    </div>
    <div class="col-lg-4 property-section pivot-property-section">
    <table id="property" title="Properties" style="width: 100%;height:100%;">
        <tbody>
            <tr style="height: 50px">
                <td colspan="2">
                    <div class="row">
                        <ejs-checkbox id="sorting" change="onChange" label="Enable Sorting" labelPosition="After" checked="true"></ejs-checkbox>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Field:
                    </div>
                </td>
                <td>
                    <div>
                        <ejs-dropdownlist id="sorting-fields" dataSource="@Model.customSortingFields" change="onFieldChange" index="0" enabled="true">
                            <e-dropdownlist-fields text="caption" value="Order"></e-dropdownlist-fields>
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px;">
                <td>
                    <div class="hdrlabel">Headers:
                    </div>
                </td>
                <td>
                    <div>
                        <ejs-multiselect id="sorting-members" dataSource="@customSortingData" mode="CheckBox" showDropDownIcon="true" showClearButton="false"
                            enableSelectionOrder="false" placeHolder="Select headers" select="onSelect" removed="onRemoved" open="onOpen">
                            <e-multiselect-fields text="Member"></e-multiselect-fields>
                        </ejs-multiselect>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Order:
                    </div>
                </td>
                <td>
                    <div>
                        <ejs-dropdownlist id="sorting-order" dataSource="@customSortingOrder" change="onOrderChange" enabled="true" index="0">
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td></td>
                <td>
                    <div style="float: right;">
                        <ejs-button id="apply-btn" isPrimary="true" content="Apply"></ejs-button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
    </div>

    <style>
    .row{
        margin-left: -10px;
    }
    .pivot-property-section .e-multiselect.e-input-group {
        padding: 0px !important;
    }

    .pivot-property-section table tr td:first-child {
        width: 20%;
    }
    </style>
    <script>
        var isInitial = true;
        var fieldCollections = {};
        var getMembers = {'Country': [], 'Products': [], 'Year': [], 'Order_Source': []};
        var memOrder = [];
        var isMemberAdded = true;
        var isMemberAdded_1 = true;
        var index;
        var data = [];
        var order = ['Ascending', 'Descending'];
        var fields = [
        { Field: 'Country', Order: 'Country_asc', caption: 'Country' },
        { Field: 'Products', Order: 'Products_desc', caption: 'Products' },
        { Field: 'Year', Order: 'Year_desc', caption: 'Year' },
        { Field: 'Order_Source', Order: 'Order_Source_asc', caption: 'Order Source' }
        ];
        function onChange(args) {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var fieldsObj = document.getElementById('sorting-fields').ej2_instances[0];
            var orderInfo = document.getElementById('sorting-order').ej2_instances[0];
            var membersOrder = document.getElementById('sorting-members').ej2_instances[0];
            var applyBtn = document.getElementById('apply-btn').ej2_instances[0];
            var ischecked = args.checked;
            fieldsObj.enabled = ischecked;
            orderInfo.enabled = ischecked;
            membersOrder.enabled = ischecked;
            applyBtn.disabled = !ischecked;
            pivotObj.dataSourceSettings.enableSorting = ischecked;
        }
        function onDataBound(args) {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var membersOrder = document.getElementById('sorting-members').ej2_instances[0];
            if (isInitial) {
                /** To fill the members for each fields into the object fieldCollections. */
                var fieldCount = fields.length - 1;
                while (fieldCount > -1) {
                    var members = Object.keys(pivotObj.engineModule.fieldList[fields[fieldCount].Field].members);
                    var memberCnt = members.length;
                    var memberColl = [];
                    for (var i = 0; i < memberCnt; i++) {
                        memberColl.push({ Member: members[i], Checked: members[i] + '_' + false });
                    }
                    fieldCollections[fields[fieldCount].Field] = memberColl;
                    fieldCount--;
                }
                fieldCollections.Order_Source.reverse();
                data = fieldCollections[fields[0].Field];
                membersOrder.dataSource = data;
                fieldCollections.Country[0].Checked = "France_true";
                fieldCollections.Country[3].Checked = "United States_true";
                getMembers.Country.push('France', 'United States');
                getMembers.Year.push('FY 2018', 'FY 2017');
                getMembers.Products.push('Gloves', 'Bottles and Cages');
                membersOrder.value = updateSelectedMembers("Country").reverse();
                membersOrder.dataBind();
                isInitial = false;
            }
        }
        function actionComplete(args) {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var sortDetails = pivotObj.dataSourceSettings.sortSettings;
            for (var i = 0; i < (pivotObj.dataSourceSettings.rows.length + pivotObj.dataSourceSettings.columns.length); i++) {
                if (sortDetails.length > 0) {
                    if (sortDetails[i] && sortDetails[i].name === 'Country') {
                        updateOrder(sortDetails, i, 'Country', 0);
                    }
                    else if (sortDetails[i] && sortDetails[i].name === 'Products') {
                        updateOrder(sortDetails, i, 'Products', 1);
                    }
                    else if (sortDetails[i] && sortDetails[i].name === 'Year') {
                        updateOrder(sortDetails, i, 'Year', 2);
                    }
                    else if (sortDetails[i] && sortDetails[i].name === 'Order_Source') {
                        updateOrder(sortDetails, i, 'Order_Source', 3);
                    }
                }
            }
        }
        function onFieldChange(args) {
            var fieldsObj = document.getElementById('sorting-fields').ej2_instances[0];
            var orderInfo = document.getElementById('sorting-order').ej2_instances[0];
            var membersOrder = document.getElementById('sorting-members').ej2_instances[0];
            if (fieldsObj.dataSource[fieldsObj.index].Order === fieldsObj.dataSource[fieldsObj.index].Field + '_asc') {
                orderInfo.index = 0;
            } else {
                orderInfo.index = 1;
            }
            if (memOrder.length > 0) {
                if (memOrder[fieldsObj.index] === 'Ascending') {
                    orderInfo.index = 0;
                } else if (memOrder[fieldsObj.index] === 'Descending') {
                    orderInfo.index = 1;
                }
            }
            if (args.itemData['Field'] === 'Year' && isMemberAdded) {
                fieldCollections.Year[3].Checked = "FY 2018_true";
                fieldCollections.Year[2].Checked = "FY 2017_true";
                membersOrder.value = updateSelectedMembers("Year").reverse();
                isMemberAdded = false;
            } else if (args.itemData['Field'] === 'Products' && isMemberAdded_1) {
                fieldCollections.Products[9].Checked = "Gloves_true";
                fieldCollections.Products[0].Checked = "Bottles and Cages_true";
                membersOrder.value = updateSelectedMembers("Products").reverse();
                isMemberAdded_1 = false;
            }
            membersOrder.dataSource = fieldCollections[args.itemData['Field']];
            membersOrder.value = updateSelectedMembers(args.itemData['Field']);
            membersOrder.dataBind();
            orderInfo.dataBind();
        }
        function onSelect(args) {
            var fieldsObj = document.getElementById('sorting-fields').ej2_instances[0];
            var orderInfo = document.getElementById('sorting-order').ej2_instances[0];
            var membersOrder = document.getElementById('sorting-members').ej2_instances[0];
            var applyBtn = document.getElementById('apply-btn').ej2_instances[0];
            applyBtn.disabled = false;
            maintainCheckedState(fieldsObj.itemData.Field, args.item.textContent, args.item.textContent + '_' + true);
            getMembers[fieldsObj.itemData.Field].push(args.itemData.Member);
        }
        function onRemoved(args) {
            var fieldsObj = document.getElementById('sorting-fields').ej2_instances[0];
            var orderInfo = document.getElementById('sorting-order').ej2_instances[0];
            var membersOrder = document.getElementById('sorting-members').ej2_instances[0];
            maintainCheckedState(fieldsObj.itemData.Field, args.item.textContent, args.item.textContent + '_' + false);
            index = getMembers[fieldsObj.itemData.Field].indexOf(args.itemData.Member);
            if (getMembers[fieldsObj.itemData.Field].includes(args.itemData.Member)) {
                getMembers[fieldsObj.itemData.Field].splice(index, 1);
            }
        }
        function onOpen(args) {
            var fieldsObj = document.getElementById('sorting-fields').ej2_instances[0];
            var orderInfo = document.getElementById('sorting-order').ej2_instances[0];
            var membersOrder = document.getElementById('sorting-members').ej2_instances[0];
            if (args.popup.element.querySelector(".e-filter-parent")) {
                args.popup.element.querySelector(".e-filter-parent").style.display = 'none';
            }
        }
        function onOrderChange(args) {
            var fieldsObj = document.getElementById('sorting-fields').ej2_instances[0];
            var orderInfo = document.getElementById('sorting-order').ej2_instances[0];
            if (args.value === 'Ascending') {
                fieldsObj.dataSource[fieldsObj.index].Order = fieldsObj.dataSource[fieldsObj.index].Field + '_asc';
            } else {
                fieldsObj.dataSource[fieldsObj.index].Order = fieldsObj.dataSource[fieldsObj.index].Field + '_desc';
            }
            fieldsObj.refresh();
        }
        /** To set the checked status of the members maintained in the object fieldCollections. */
        function maintainCheckedState(field, member, checkedState) {
            var members = fieldCollections[field];
            var count = members.length - 1;
            while (count > -1) {
                if (members[count].Member === member) {
                    members[count].Checked = checkedState;
                    break;
                }
                count--;
            }
        }
        /** To get the checked members/status here as string array. */
        function updateSelectedMembers(field) {
            var membersColls = [];
            var members = fieldCollections[field];
            var count = members.length - 1;
            while (count > -1) {
                if (members[count].Checked === members[count].Member + '_' + true) {
                    membersColls.push(members[count].Member.toString());
                }
                count--;
            }
            return membersColls;
        }
        function updateOrder(sortDetails, i, fieldName, j) {
            var fieldsObj = document.getElementById('sorting-fields').ej2_instances[0];
            var orderInfo = document.getElementById('sorting-order').ej2_instances[0];
            if (sortDetails[i].order === 'Ascending') {
                if (fieldsObj.itemData.Field === fieldName) {
                    orderInfo.index = 0;
                }
                memOrder[j] = 'Ascending';
            } else {
                if (fieldsObj.itemData.Field === fieldName) {
                    orderInfo.index = 1;
                }
                memOrder[j] = 'Descending';
            }
        }
        document.getElementById('apply-btn').onclick = function () {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var fieldsObj = document.getElementById('sorting-fields').ej2_instances[0];
            var orderInfo = document.getElementById('sorting-order').ej2_instances[0];
            var membersOrder = document.getElementById('sorting-members').ej2_instances[0];
            var checkBoxObj = document.getElementById('sorting').ej2_instances[0];
            if (checkBoxObj.checked) {
                pivotObj.setProperties({
                    dataSourceSettings: {
                        enableSorting: true, sortSettings: [
                            { name: 'Country', order: fieldsObj.dataSource[0].Order === 'Country_asc' ? 'Ascending' : 'Descending', membersOrder: getMembers['Country'] },
                            { name: 'Products', order: fieldsObj.dataSource[1].Order === 'Products_asc' ? 'Ascending' : 'Descending', membersOrder: getMembers['Products'] },
                            { name: 'Year', order: fieldsObj.dataSource[2].Order === 'Year_asc' ? 'Ascending' : 'Descending', membersOrder: getMembers['Year'] },
                            { name: 'Order_Source', order: fieldsObj.dataSource[3].Order === 'Order_Source_asc' ? 'Ascending' : 'Descending', membersOrder: getMembers['Order_Source'] }
                        ]
                    }
                }, true);
            } else {
                pivotObj.setProperties({ dataSourceSettings: { enableSorting: false, sortSettings: [] } }, true);
            }
            pivotObj.refreshData();
        };
    </script>
}
         
@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
   <div id="action-description">
    <p>This sample demonstrates ordering used-defined member(s), aka header name(s), of specific field in row and column axes in ascending or descending order.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>In this sample, any field from the <b>Field</b> dropdown list and its member(s), aka header name(s), from the <b>Headers</b> dropdown list can be ordered ascending or descending.
             It is possible to achieve this by setting the <code>enableSorting</code> property to <b>true</b>, 
             as well as the field name, sort order, and member(s) (which can be in any order) inside the pivot table's <code>sortSettings</code> property.
             The <code>dataSourceSettings</code> includes <code>enableSorting</code> and <code>sortSettings</code> properties.</p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Pivot Table Custom Sorting Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Custom Sorting in ASP.NET Core Pivot Table Control</h1>
                }
