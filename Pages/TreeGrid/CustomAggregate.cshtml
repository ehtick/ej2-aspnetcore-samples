@page
@using EJ2CoreSampleBrowser.Models;
@using Syncfusion.EJ2

@section ControlsSection{
    <div class="control-section">
        <ejs-treegrid id="TreeGrid" dataSource="@OrdersTreeData.GetShipmentData()" height="400"  ExcelAggregateQueryCellInfo="excelAggregateQuerCellInfo"
                      PdfAggregateQueryCellInfo="pdfAggregateQuerCellInfo" dataBound="ondataBound" toolbarClick="toolbarClick" gridLines="Both" allowExcelExport="true" allowPdfExport="true"
                      toolbar="@(new List<string>() { "ExcelExport", "PdfExport","CsvExport"})" childMapping="Subtasks" width="Auto" treeColumnIndex="1">
            <e-treegrid-aggregates>
                <e-treegrid-aggregate>
                    <e-treegrid-aggregate-columns>
                        <e-treegrid-aggregate-column field="Category" type="Custom" footerTemplate="Count of <input type='text' id='customers' /> : ${Custom}" customAggregate=@("customAggregateFn")></e-treegrid-aggregate-column>
                    </e-treegrid-aggregate-columns>
                </e-treegrid-aggregate>
            </e-treegrid-aggregates>
            <e-treegrid-columns>
                <e-treegrid-column field="ID" headerText="Order ID" textAlign="Left" width="120"></e-treegrid-column>
                <e-treegrid-column field="Name" headerText="Shipment Name" width="195"></e-treegrid-column>
                <e-treegrid-column field="ShipmentDate" headerText="Shipment Date" width="130" type="date" format="yMd" textAlign="Right"></e-treegrid-column>
                <e-treegrid-column field="Category" headerText="Category" width="230" minWidth="230"></e-treegrid-column>
                <e-treegrid-column field="Units" headerText="Total Units" textAlign="Right" width="100"></e-treegrid-column>
                <e-treegrid-column field="UnitPrice" headerText="Unit Price($)" textAlign="Right" format="C0" width="100" type="number"></e-treegrid-column>
                <e-treegrid-column field="Price" headerText="Price($)" textAlign="Right" format="C0" width="100" type="number"></e-treegrid-column>
            </e-treegrid-columns>
        </ejs-treegrid>
    </div>

    @*custom code start*@

    <style>
        .fluent2 input#customers {
            padding-bottom: 8px !important;
        }
        .bootstrap5\.3 input#customers {
            padding-bottom: 5px !important;
        }

        .e-summarycell.e-templatecell {
            pointer-events: visible !important;
        }
    </style>

    @*custom code end*@

    <script>
        var value = "Seafood";
        var listObj;
        var foods = [
            { food: 'Seafood' },
            { food: 'Dairy' },
            { food: 'Edible' },
            { food: 'Crystal' },
        ];
        
        //Initializes a DropDownList in the footer for category selection.
        function ondataBound(args) {
            if (!ej.base.isNullOrUndefined(listObj)) {
                listObj.destroy();
            }
            listObj = new ej.dropdowns.DropDownList({
                dataSource: foods,
                fields: { value: 'food' },
                placeholder: 'Select a Category',
                width: '110px',
                value: value,
                change: function () {
                    var treegrid = document.getElementById("TreeGrid").ej2_instances[0];
                    value = listObj.value.toString();
                    treegrid.refresh();
                }
            });
            listObj.appendTo('#customers');
        }
        
        //Handles the 'excelQueryCellInfo' event to customize aggregate cells during Excel export.
        function excelAggregateQuerCellInfo(args) {
            if(args.cell.column.headerText === "Category") {
                args.style.value = "Count of" + " " + value + " : " + args.row.data.Category.Custom;
            }
        }
       
        //Handles the 'pdfQueryCellInfo' event to customize aggregate cells during PDF export.
        function pdfAggregateQuerCellInfo(args) {
            if(args.cell.column.headerText === "Category") {
                args.value = "Count of" + " " + value + " : " + args.row.data.Category.Custom;
            }
        }

        function toolbarClick(args) {
            var treeGridObj = document.getElementById("TreeGrid").ej2_instances[0];
            if (args.item.id === treeGridObj.grid.element.id + '_excelexport') {
                treeGridObj.excelExport();
            } else if (args.item.id === treeGridObj.grid.element.id + '_pdfexport') {
                if (treeGridObj.enableRtl === true && treeGridObj.locale === 'ar') {
                    var innercontent = 'You need custom fonts to export Arabic characters, refer this <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/tree-grid/pdf-export/#add-custom-font-for-pdf-exporting" aria-label="Navigate to the documentation for PDF Export in ASP.NET Core TreeGrid control">documentation section</a>';
                    ej.popups.DialogUtility.alert({ content: innercontent });
                }
                else {
                    treeGridObj.pdfExport({pageOrientation: 'Landscape'});
                }
            } else if (args.item.id === treeGridObj.grid.element.id + '_csvexport') {
                treeGridObj.csvExport();
            }
        }
        
        //Custom aggregate function to calculate the count of items for the selected category.
        function customAggregateFn(data) {
            var sampleData = data.result ? ej.grids.getObject("result",data) : data;
            var countLength;
            countLength = 0;
            sampleData.filter(function (item) {
                var data = ej.grids.getObject('Category', item);
                if (data === value) {
                    countLength++;
                }
            });
            return countLength;
        }
    </script>


}

@*custom code start*@

@section Meta{
    <meta name="description" content="This example demonstrates the Custom Aggregate in ASP.NET Core Tree Grid control. Explore here for more details." />
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates custom aggregates and exporting functionality in the Tree Grid. Aggregate values for the columns are displayed in the column footer, and export options are available via the toolbar buttons.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The Tree Grid supports aggregates displayed in the footer, which can be configured using the <code>aggregates</code> property. Here, a <code>customAggregate</code> configuration is applied to the <b>Category</b> column to show a dropdown that displays the count of the selected category.
        </p>
        <p>
            The Tree Grid also supports seamless exports to <b>Excel</b>, <b>PDF</b>, or <b>CSV</b> with a single click. The <code>excelAggregateQueryCellInfo</code> and <code>pdfAggregateQueryCellInfo</code> events ensure that footer aggregate values are accurately preserved in the exported files.
        </p>
        <p>
            More information about custom aggregate can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/tree-grid/aggregates/custom-aggregate" aria-label="Navigate to the documentation for custom-aggregate in ASP.NET Core TreeGrid control">documentation</a> section.
        </p>
    </div>
}

@*custom code end*@
@section Title{
    <title>ASP.NET Core Tree Grid Custom Aggregate Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Custom Aggregate in ASP.NET Core Tree Grid Control</h1>
}
