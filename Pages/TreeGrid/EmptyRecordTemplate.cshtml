@page
@using EJ2CoreSampleBrowser.Models;
@using Syncfusion.EJ2

@{
    ViewBag.DropDownData = new List<object>
    {
        new { priority = "Low"},
        new { priority = "Medium" },
        new { priority = "High" },
        new { priority = "Critical" }
    };
    var DropDownList = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.DropDownData, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "priority", Text = "priority" } };
}
@{
    ViewBag.DropDownData = new List<object>
    {
        new { status = "Open"},
        new { status = "In progress" },
        new { status = "Review-Request" },
        new { status = "Review-Reject" },
        new { status = "Closed" }
    };
    var DropDownList1 = new Syncfusion.EJ2.DropDowns.DropDownList() { DataSource = ViewBag.DropDownData, Query = "new ej.data.Query()", AllowFiltering = true, Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Value = "status", Text = "status" } };
}

@section ControlsSection{
    <div class="control-section">

        <ejs-treegrid id="TreeGrid" childMapping="Children" actionComplete="actionComplete" allowPaging="true" dataBound="ondataBound" treeColumnIndex="1" allowFiltering="true" emptyRecordTemplate="#emptyrecordtemplate"
                      toolbar="@(new List<string>() {  "Add", "Delete", "Update", "Cancel", "Search" })">
            <e-treegrid-filtersettings type="Menu" hierarchyMode="Parent"></e-treegrid-filtersettings>
            <e-treegrid-editSettings allowAdding="true" allowEditing="true" allowDeleting="true"></e-treegrid-editSettings>
            <e-treegrid-columns>
                <e-treegrid-column field="taskID" headerText="Task ID" validationRules="@(new { required=true, min=0})"  textAlign="Right" type="number" isPrimaryKey="true" width="120"></e-treegrid-column>
                <e-treegrid-column field="taskName" headerText="Task Name" validationRules="@(new { required=true})" textAlign='Left' type="string" width="120"></e-treegrid-column>
                <e-treegrid-column field="priority" headerText="Priority" textAlign='Left' type="string" editType="dropdownedit" edit="new {@params = DropDownList }" width="100"></e-treegrid-column>
                <e-treegrid-column field="assignee" headerText="Assignee" textAlign="Left" type="string" width="100"></e-treegrid-column>
                <e-treegrid-column field="status" headerText="Status" textAlign="Left" type="string" editType="dropdownedit" edit="new {@params = DropDownList1 }" width="100"></e-treegrid-column>
                <e-treegrid-column field="duration" headerText="Duration in Days" textAlign="Right" editType="numericedit" type="number" width="150"></e-treegrid-column>
            </e-treegrid-columns>
        </ejs-treegrid>

    </div>
    <script>
        function ondataBound() {
            var treegrid = document.getElementById("TreeGrid").ej2_instances[0];
            var isGridEmpty = treegrid.flatData.length === 0;
            if (treegrid.searchSettings.key === '' || treegrid.searchSettings.key === undefined) {
                treegrid.toolbarModule.enableItems([treegrid.element.id +'_gridcontrol_searchbar'], !isGridEmpty);
            }
            var filterMenudivs = treegrid.element.querySelectorAll('.e-filtermenudiv');
            filterMenudivs.forEach((div) => {
                if (isGridEmpty && treegrid.grid.filterSettings.columns.length == 0) {
                    div.classList.add('e-disabled');
                    div.style.cursor = 'default';
                } else {
                    div.classList.remove('e-disabled');
                    div.style.removeProperty('cursor');
                }
            });
        }

        function actionComplete(args) {
            var treegrid = document.getElementById("TreeGrid").ej2_instances[0];
            // Toggle filter dialog based on visible records
            if (args.requestType === 'filterAfterOpen' && treegrid.flatData.length === 0) {
                if (args.filterModel.filterSettings.columns.length > 0 && args.filterModel.filterSettings.columns.some((col) => col.field === args.columnName)) {
                    args.filterModel.dlgObj.show();
                }
                else {
                    args.filterModel.dlgObj.hide();
                }
            }
            if ((args.requestType === 'delete' || args.requestType === 'searching') && treegrid.flatData.length === 0 && treegrid.searchSettings.key === '') {
                treegrid.toolbarModule.enableItems([treegrid.element.id + '_gridcontrol_searchbar'], false);
            }

            if (args.action === 'clearFilter' && treegrid.flatData.length !== 0) {
                treegrid.toolbarModule.enableItems([treegrid.element.id + '_gridcontrol_searchbar'], true);
            }
        }
    </script>
     <style>
        .emptyRecordTemplate {
            text-align: center;
            margin: 31px auto;
        }
        .e-emptyRecord {
            display: block;
            margin: 10px auto;
            border-radius: 4px;
            box-shadow: 2px 4px 10px #34343480;
        }
    </style>
    <script id="emptyrecordtemplate" type="text/x-template">
        <div class='emptyRecordTemplate'>
            <img src="https://ej2.syncfusion.com/angular/demos/assets/grid/images/emptyRecordTemplate_light.svg" alt="No record" className="e-emptyRecord"/>
            <div><b>There is no data available to display at the moment.</b></div><br>
        </div>
    </script>
}

@*custom code start*@

@section Meta{
    <meta name="description" content="This example demonstrates the Empty Record Template in ASP.NET Core Tree Grid control. Explore here for more details." />
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the use of the empty record template in the Tree Grid. The <code>emptyRecordTemplate</code> accepts either a string or an HTML element value, which will be used as the template when there is no data.</p>
    </div>
}

@section Description{
    <div id="description">
        <p> The Tree Grid provides a way to use custom content when it has no data to present. Custom content, such as images, text, or other components, can be used when the tree grid does not contain any records to display. This feature replaces the default message of "No records to display" typically shown in the tree grid.</p>
        <p>More information on the empty record template can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/tree-grid/overview"> documentation</a> section.</p>
    </div>
}

@*custom code end*@
@section Title{
    <title>ASP.NET Core Tree Grid Empty Record Template Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Empty Record Template in ASP.NET Core Tree Grid Control</h1>
}
