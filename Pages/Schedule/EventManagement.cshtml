@page
@model EJ2CoreSampleBrowser.Pages.EventManagement
@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2.Navigations
@using System.Text.Json
@using Syncfusion.EJ2

<link href="~/schedule/event-management.css" rel="stylesheet" />

@section ControlsSection {
<div class="control-section event-management-control-section">
        <div class="control-wrapper event-management-wrapper">
        <ejs-schedule id="Schedule"
                      cssClass="schedule-event-management"
                      width="100%"
                      height="550px"
                      selectedDate="@Model.SelectedDate"
                      startHour="08:00"
                      endHour="18:00"
                      currentView="Day"
                      allowOverlap="false"
                      allowdraganddrop="false"
                      allowresizing="false"
                      resourceHeaderTemplate="#resource-template"
                      eventRendered="onEventRendered"
                      cellClick="onCellClick"
                      popupOpen="onPopupOpen"
                          popupClose="onPopupClose">

            <!-- Event Settings: Data source + field mappings -->
            <e-schedule-eventSettings DataSource="@Model.Events">
                <e-eventsettings-fields>
                    <e-field-subject name="Subject"></e-field-subject>
                    <e-field-startTime name="StartTime"></e-field-startTime>
                    <e-field-endTime name="EndTime"></e-field-endTime>
                    <e-field-location name="Title" title="Event"></e-field-location>
                    <e-field-description name="Capacity" title="Participants Count"></e-field-description>
                </e-eventsettings-fields>
            </e-schedule-eventSettings> 

            <!-- TimeScale -->
            <e-schedule-timescale slotCount="3"></e-schedule-timescale>

            <!-- Grouping -->
            <e-schedule-group resources='new string[] { "Rooms" }'></e-schedule-group>

            <!-- Views -->
            <e-schedule-views>
                <e-schedule-view option="Day"></e-schedule-view>
                <e-schedule-view option="Week"></e-schedule-view>
                <e-schedule-view option="Agenda" eventTemplate="#agenda-template"></e-schedule-view>
            </e-schedule-views>

            <!-- Resources -->
            <e-schedule-resources>
                <e-schedule-resource field="RoomId"
                                     title="Rooms"
                                     name="Rooms"
                                     dataSource="@Model.Rooms"
                                     textField="RoomName"
                                     idField="RoomId"
                                     colorField="RoomColor">
                </e-schedule-resource>
            </e-schedule-resources>

            <e-schedule-quickinfotemplates header="#header-template" content="#content-template"></e-schedule-quickinfotemplates>

            <e-schedule-toolbaritems>
                <!-- Previous / Next / DateRangeText -->
                <e-schedule-toolbaritem name="Previous" align="Left"></e-schedule-toolbaritem>
                <e-schedule-toolbaritem name="Next" align="Left"></e-schedule-toolbaritem>
                <e-schedule-toolbaritem name="DateRangeText" align="Left"></e-schedule-toolbaritem>

                <!-- Views dropdown on right -->
                <e-schedule-toolbaritem name="Views" align="Right"></e-schedule-toolbaritem>

                <!-- Separator -->
                <e-schedule-toolbaritem type="Separator" align="Right" cssClass="toolbar-post-agenda"></e-schedule-toolbaritem>

                <e-schedule-toolbaritem type="Input"
                                        align="Right"
                                        template="#roomsDropdownTemplate"
                                            cssClass="toolbar-post-agenda room-filter">
                </e-schedule-toolbaritem>
                <!-- Separator -->
                <e-schedule-toolbaritem type="Separator"
                                        align="Right"
                                        cssClass="toolbar-post-agenda">
                </e-schedule-toolbaritem>

                <!-- Toggle unplanned-events button -->
                <e-schedule-toolbaritem name="Custom"
                                        type="Button"
                                        prefixIcon="e-icons e-show-hide-panel"
                                        align="Right"
                                        id="overview_toolbar_settings_unplanned_events"
                                        click="toggleUnplannedEventsElement"
                                        showTextOn="Overflow"
                                        overflow="Show"
                                        cssClass="toolbar-post-agenda">
                </e-schedule-toolbaritem>  

                <!-- Print & Export button -->
                <e-schedule-toolbaritem name="Custom"
                                        type="Button"
                                        prefixIcon="e-icons e-print-export"
                                        align="Right"
                                        showTextOn='Overflow' 
                                        overflow='Show'
                                        template="#printExportTemplate"
                                        cssClass="toolbar-post-agenda">
                </e-schedule-toolbaritem> 
            </e-schedule-toolbaritems> 

        </ejs-schedule>

        <div class="unplanned-events-container">
            <div class="title-container">
                <div class="title-text">Unscheduled Events</div>
            </div>
            <div id="list-container">
                <div class='events-list'>
                    <label class="event-label">Event</label>
                    <ejs-dropdownlist id="eventDropdown"
                                        dataSource="@Model.UnPlannedEventsList"
                                        fields="@(new DropDownListFieldSettings { Text = "Name", Value = "Id" })"
                                        index="0"
                                        change="onUnplannedEventSelect">
                    </ejs-dropdownlist>
                </div>

                <ejs-treeview id="treeviewAll"
                                cssClass="event-management-treeview"
                                allowDragAndDrop="true"
                                dragArea=".event-management-wrapper"
                                nodeTemplate="#treeTemplate"
                                nodeDragStart="onTreeDragStart"
                                nodeDragging="onTreeDragging"
                                nodeDragStop="onTreeDragStop"
                                fields="@(Model.AllEventsFields)">
                </ejs-treeview>

                <ejs-treeview id="treeviewCloud"
                                cssClass="event-management-treeview"
                                style="display:none"
                                allowDragAndDrop="true"
                                dragArea=".event-management-wrapper"
                                nodeTemplate="#treeTemplate"
                                nodeDragStart="onTreeDragStart"
                                nodeDragging="onTreeDragging"
                                nodeDragStop="onTreeDragStop"
                            fields="@(Model.CloudSecurityEventsFields)">
                </ejs-treeview>

                <ejs-treeview id="treeviewAI"
                                cssClass="event-management-treeview"
                                style="display:none"
                                allowDragAndDrop="true"
                                dragArea=".event-management-wrapper"
                                nodeTemplate="#treeTemplate"
                                nodeDragStart="onTreeDragStart"
                                nodeDragging="onTreeDragging"
                                nodeDragStop="onTreeDragStop"
                            fields="@(Model.AIAutomationEventsFields)">
                </ejs-treeview>

                <div class="no-events-message hidden">All events have been scheduled</div>
            </div>
        </div>

        <div id="target">
            <ejs-dialog id="modalDialog" header="Notice" visible="false" showCloseIcon="true"
                        isModal="true" width="335px" height="240px" cssClass="alert-dialog"
                        target="#target">
                <e-dialog-buttons>
                        <e-dialog-dialogbutton buttonModel="@(new { content = "OK", isPrimary = true })" click="dlgButtonClick"></e-dialog-dialogbutton>
                </e-dialog-buttons>
            </ejs-dialog>
        </div>
     </div>
</div>

<div id="printExportTemplate">
    <ejs-dropdownbutton id="printExportBtn"
                        iconCss="e-icons e-more-horizontal-1"
                        cssClass="e-caret-hide e-tbar-btn"
                        items="@(ViewData["PrintExportItems"] as List<object>)"
                        select="handlePrintExportSelect">
    </ejs-dropdownbutton>
</div>

@* roomsDropDown template *@
<div id="roomsDropdownTemplate" >
    <ejs-dropdownlist id="roomsDropdown"
                      DataSource="@Model.RoomsData"
                      Value="0"
                      Change="onRoomChange"
                      ValueTemplate="#roomValueTemplate">
                     <e-dropdownlist-fields text="RoomName" value="RoomId"></e-dropdownlist-fields>
    </ejs-dropdownlist>
</div>

<!-- Node Template HTML -->
<script id="treeTemplate" type="text/x-template">
    <div class="unplanned-item">
        <div class="unplanned-item-subject">${Subject}</div>
        <div class="unplanned-item-duration">
            <span class="duration-icon e-icons"></span>
            <span class="duration-value">Duration: ${Duration}</span>
        </div>
        <div class="unplanned-item-capacity">
            <span class="capacity-icon e-icons"></span>
            <span class="capacity-value">Audience Size: ${Capacity}</span>
        </div>
    </div>
</script>
 
<script id="roomValueTemplate" type="text/x-template">
       <span>${if (RoomName === 'All')}Room: All${else}${RoomName}${/if}</span>
</script> 

@* resource header template *@
<script id="resource-template" type="text/x-template">
    <div class="template-wrap">
        <div class="resource-detail">
            <div class="resource-name">${resourceData.RoomName}</div>
            <div class="capacity-wrap">
                <span class="e-icons e-capacity-icon"></span>
                <span class="e-capacity">
                    Capacity - ${resourceData.RoomCapacity}
                </span>
            </div>
        </div>
    </div>
</script>

<script id="agenda-template" type="text/x-template">
    <div class="agenda-event">
      <div class="event-subject">${Subject}</div>
      <div class="event-description">${Description}</div>
       @* call the function to show audience and Speakers *@
      ${renderDurationAudience(data)}
      ${renderSpeakers(data)}
    </div>
</script>

<!-- Header -->
<script id="header-template" type="text/x-template">
    <div class="e-popup-header e-event-header">
      <div class="e-header-icon-wrapper">
             <button id="close" class="e-close e-icons"
            title="Close" onclick="closeQuickPopup()"></button>
      </div>
      <div class="quick-info-header-content" style="${getQuickInfoHeaderStyle(data)}">
        <div class="quick-info-title">${Subject}</div>
        <div class="duration-text">${getQuickInfoDurationText(data)}</div>
      </div>
    </div>
</script>

<!-- CONTENT -->
<script id="content-template" type="text/x-template">
    <div class="quick-info-content">
      <div class="event-content">
        <div class="e-room e-content-item">
          <label>Room</label><span class="colon">:</span>
          <span class="e-content">${getRoomName(RoomId)}</span>
        </div>
        <div class="e-event e-content-item">
          <label>Event</label><span class="colon">:</span>
          <span class="e-content">${Title}</span>
        </div>

        ${if (Speakers.length >= 1)}
          <div class="e-speaker e-content-item">
            <label>${if (Speakers.length > 1)}Speakers${else}Speaker${/if}</label>
            <span class="colon">:</span>
            <span class="e-content">${getSpeakerNames(Speakers)}</span>
          </div>
        ${/if} 
        <div class="e-count e-content-item">
          <label>Participant count</label><span class="colon">:</span>
          <span class="e-content">${Capacity}</span>
        </div>
      </div>
    </div>
</script>

<script>
    var intl = new ej.base.Internationalization();
    let isDraggedItemDropped = false;
    var draggedItemId = null;
    var draggedItemSpeakers = [];
    var draggedItemDescription = '';
    var selectedUnplannedEventItem = 0;

    const treeviewRefs = [
        document.getElementById("treeviewAll"),
        document.getElementById("treeviewCloud"),
        document.getElementById("treeviewAI")
    ];

    var rooms = @Html.Raw(JsonSerializer.Serialize(Model.Rooms));
    var cloudData = @Html.Raw(Json.Serialize(Model.CloudSecurityEvents));
    var aiData = @Html.Raw(Json.Serialize(Model.AIAutomationEvents));
    var eventTitles = ["All", "Cloud Security Essentials", "AI for Automation"];
    var allData = cloudData.concat(aiData);

    function onPopupClose(args) {
        if (args.type === 'Editor') {
        var targetElement = args.event.target;
        const isSaveAction = targetElement && (targetElement.classList.contains('e-event-save') || targetElement.classList.contains('e-save-icon'));
        if (!isSaveAction) { return; }

        // Pull out the edited values
        var data       = args.data;
        var roomId     = data.RoomId;
        var startTime  = new Date(data.StartTime);
        var endTime    = new Date(data.EndTime);
        var capacity   = data.Capacity;

        var scheduleObj = document.getElementById('Schedule').ej2_instances[0];

        var isRoomFiltered = scheduleObj.resourceCollection[0].dataSource.length === 1;
        var resourceIndex  = isRoomFiltered ? 0 : (roomId - 1);

        var isRoomAvailable = scheduleObj.isSlotAvailable(startTime, endTime, resourceIndex)
                            && startTime.getHours() >= 8
                            && (endTime.getHours()  < 18
                                || (endTime.getHours() === 18 && endTime.getMinutes() === 0));

        var isCapacityAvailable = checkRoomCapacity(capacity, roomId);

        // Show/hide time warning
        var timeRow = args.element.querySelector('.e-start-end-row');
        if (!isRoomAvailable) {
            if (!args.element.querySelector('.time-alert')) {
                var newDiv = document.createElement('div');
                newDiv.classList.add('time-alert');
                newDiv.textContent = 'Select an open time between 8 a.m. and 6 p.m.';
                timeRow.insertAdjacentElement('afterend', newDiv);
            }
        } else {
            if (args.element.querySelector('.time-alert')) {
                    args.element.querySelector('.time-alert').remove();
            }
        }

        // Show/hide capacity warning
        var capRow = args.element.querySelector('.e-description-row');
        if (!isCapacityAvailable) {
            if (!args.element.querySelector('.capacity-alert')) {
                var newDiv = document.createElement('div');
                newDiv.classList.add('capacity-alert');
                newDiv.textContent = "Number of participants exceeds the room's limit.";
                capRow.insertAdjacentElement('afterend', newDiv);
            }
        } else {
            if (args.element.querySelector('.capacity-alert')) { 
                    args.element.querySelector('.capacity-alert').remove();
            }
        }

        // If any validation failed, cancel the save
        if (!isRoomAvailable || !isCapacityAvailable) {
            args.cancel = true;
        }
        else {
            // Remove the dragged item from the correct TreeView
                var unplannedEventsTreeViewRefs  = [
            document.getElementById('treeviewAll').ej2_instances[0],
            document.getElementById('treeviewCloud').ej2_instances[0],
            document.getElementById('treeviewAI').ej2_instances[0]
            ];
            var unplannedEventTreeViewRef  = unplannedEventsTreeViewRefs [selectedUnplannedEventItem];
            // Filter out the dragged item by its Id
            var updatedData  = (unplannedEventTreeViewRef.fields.dataSource || []).filter(function(item) {
            return item.Id !== draggedItemId;
            });

            unplannedEventTreeViewRef.fields.dataSource = updatedData ;
            unplannedEventTreeViewRef.dataBind();

            // Keep your JS-side copy in sync
            allData = allData.filter(function(item) {
            return item.Id !== draggedItemId;
            });

            // Hide the “no events” message if needed
            handleEmptyDataSourceDisplay(unplannedEventTreeViewRef, updatedData );

            // Push your custom fields onto the new event
            args.data.Speakers    = draggedItemSpeakers;
            args.data.Description = draggedItemDescription;
        }

        // Reset drag flag
        isDraggedItemDropped = false;
        }
    }

    function dlgButtonClick() {
        var dialogObj = document.getElementById('modalDialog').ej2_instances[0];
        dialogObj.hide();
    }

    function onTreeDragStart() {
        document.body.classList.add('e-disble-not-allowed');
    }

    function onTreeDragging(args) {
        var scheduleObj = document.getElementById("Schedule").ej2_instances[0];
        document.body.classList.add('tree-item-dragging');

        if (scheduleObj.isAdaptive) {
        document.querySelectorAll('.e-device-hover').forEach(element => element.classList.remove('e-device-hover'));
        if (args.target.classList.contains('e-work-cells')) {
            args.target.classList.add('e-device-hover');
        }
        }

        args.target.classList.toggle('not-allowed-cursor',
        !args.target.classList.contains('e-work-cells'));
    }


    function onTreeDragStop(args) {
        const scheduleObj = document.getElementById("Schedule").ej2_instances[0];
        const alertDialog = document.getElementById("modalDialog").ej2_instances[0];

        document.body.classList.remove('tree-item-dragging', 'e-disble-not-allowed');
        document.querySelectorAll('.not-allowed-cursor, .e-device-hover')
                .forEach(element => element.classList.remove('not-allowed-cursor','e-device-hover'));

        if (!args.target.closest(".e-treeview") && args.target.classList.contains('e-work-cells')) {
        const treeObj = ej.base.getComponent(
            treeviewRefs[selectedUnplannedEventItem],
            "treeview"
        );
        const data = treeObj.fields.dataSource.find(item => item.Id == +args.draggedNodeData.id);
        if (!data) return;

        // compute start/end
        const cellDetails = scheduleObj.getCellDetails(args.target);
        const startTime = cellDetails.startTime;
        const [value, unit] = data.Duration.split(" ");
        const endTime = new Date(startTime);
        unit.includes("hour") ? endTime.setHours(endTime.getHours() + +value)
                                : endTime.setMinutes(endTime.getMinutes() + +value);

        const roomDetails = scheduleObj.getResourcesByIndex(cellDetails.groupIndex);
        const roomId = roomDetails.resourceData.RoomId;
        var isRoomFiltered = scheduleObj.resourceCollection[0].dataSource.length === 1;
        var resourceIndex  = isRoomFiltered ? 0 : (roomId - 1);
        const isAvailable = scheduleObj.isSlotAvailable(startTime, endTime, resourceIndex);
        const isCapable = data.Capacity <= (rooms.find(r => r.RoomId === roomId)?.RoomCapacity || 0);

        if (!isAvailable || !isCapable) {
            alertDialog.content = !isAvailable
                ? "This room is already booked for this time slot. Please select a different room or time."
                : "This room cannot accommodate the stated number of attendees. Please select a room with a suitable capacity.";
            alertDialog.show();
            return;
        }

        isDraggedItemDropped = true;
        draggedItemId = data.Id;
        draggedItemSpeakers = data.Speakers || [];
        draggedItemDescription = data.Description || '';

        scheduleObj.openEditor({
            Subject: data.Subject,
            Title: data.Title,
            StartTime: startTime,
            EndTime: endTime,
            RoomId: roomId,
            Capacity: data.Capacity,
            Duration: data.Duration,
            EventType: data.EventType,
            TargetAudience: data.TargetAudience,
            EventLevel: data.EventLevel,
            EventTags: data.EventTags
        }, 'Add', true);
        }
        document.body.classList.remove('e-disble-not-allowed');
    }

    function checkRoomCapacity(capacity, roomId) {
        const room = rooms.find(r => r.RoomId === roomId);
        return room && room.RoomCapacity >= capacity;
    }


    function onUnplannedEventSelect(args) {

        const previouslySelectedItem = selectedUnplannedEventItem;
        selectedUnplannedEventItem = parseInt(args.itemData.Id);

        treeviewRefs[previouslySelectedItem].style.display = "none";
        treeviewRefs[selectedUnplannedEventItem].style.display = "block";

        const treeviewInstance = ej.base.getComponent(treeviewRefs[selectedUnplannedEventItem], "treeview");

        let newDataSource = selectedUnplannedEventItem === 0
            ? allData
            : unplannedEventsUpdatedData(allData, eventTitles[selectedUnplannedEventItem]);

        treeviewInstance.fields.dataSource = newDataSource;
        treeviewInstance.dataBind();

        handleEmptyDataSourceDisplay(treeviewInstance, newDataSource);
    }

    function unplannedEventsUpdatedData(dataSource, value) {
        if (!dataSource || !Array.isArray(dataSource)) return [];
        return dataSource.filter(item => item.Title === value);
    }

    function handleEmptyDataSourceDisplay(treeViewRef, dataSource) {
        const noEventsElement = document.querySelector(".no-events-message");

        if (!dataSource || dataSource.length === 0) {
            treeViewRef.element.style.display = "none";
            noEventsElement.classList.remove("hidden");
        } else {
            treeViewRef.element.style.display = "block";
            noEventsElement.classList.add("hidden");
        }
    }

    function handlePrintExportSelect(args) {
      var schedule = document.getElementById('Schedule').ej2_instances[0];

      switch (args.item.id) {
        case 'print':
          document.querySelectorAll('.toolbar-post-agenda').forEach(function(item) {
            item.style.display = 'none';
          });
          schedule.print();
          setTimeout(function() {
            document.querySelectorAll('.toolbar-post-agenda').forEach(function(item) {
              item.style.display = 'inline-block';
            });
          }, 1000);
          break;

        case 'export':
          var exportValues = {
            fields: ['Id','Subject','Title','StartTime','EndTime','RoomId','Capacity']
          };
          schedule.exportToExcel(exportValues);
          break;

        default:
          break;
      }
    }

    function toggleUnplannedEventsElement() {
        var settingsPanel = document.querySelector('.unplanned-events-container');
                var toggleButton = document.querySelector('.e-show-hide-panel') || document.querySelector('.e-view-side');

        if (!settingsPanel || !toggleButton) return;

        if (settingsPanel.classList.contains('hide')) {
            ej.base.removeClass([settingsPanel], 'hide');

                if (toggleButton.classList.contains('e-view-side')) {
                    ej.base.removeClass([toggleButton], 'e-view-side');
                    ej.base.addClass([toggleButton], 'e-show-hide-panel');
            }
        } else {
            ej.base.addClass([settingsPanel], 'hide');

                if (toggleButton.classList.contains('e-show-hide-panel')) {
                    ej.base.removeClass([toggleButton], 'e-show-hide-panel');
                    ej.base.addClass([toggleButton], 'e-view-side');
            }
        }
    }

    function onRoomChange(args) {
        var schedule = document.getElementById('Schedule').ej2_instances[0];
        var value = args.value;                
        var previous = args.previousItemData;  

        if (!previous) {
        return;
        }
        if (value === 0) {
        schedule.removeResource(previous.RoomId, 'Rooms');
        schedule.addResource(rooms, 'Rooms',value);
        } else {
            if (previous.RoomId === 0) {
                rooms.filter(function(r) { return r.RoomId !== value; })
                .forEach(function(r) {
                    schedule.removeResource(r.RoomId, 'Rooms');
                });
            } else {
                schedule.removeResource(previous.RoomId, 'Rooms');
                var newRoom = rooms.find(function(r) { return r.RoomId === value; });
                schedule.addResource(newRoom, 'Rooms',value);
            }
        }
        schedule.dataBind();
    }

      // Renders the duration + audience block (skips on "break"/"lunch")
    function renderDurationAudience(data) {
      var subject = (data.Subject || '').toLowerCase();
      if (subject.indexOf('break') !== -1 || subject.indexOf('lunch') !== -1) {
        return '';
      }
      var start = getTimeString(data.StartTime);
      var end   = getTimeString(data.EndTime);
      return `
          <div class="event-duration-audience">
            <div class="event-duration">
              <span class="e-icons e-duration-icon"></span>
              <span class="e-duration">${start} - ${end}</span>
            </div>
            <div class="event-audience">
              <span class="e-icons e-audience-icon"></span>
              <span class="e-audience-count">Audience : ${data.Capacity}</span>
            </div>
          </div>
      `;
    }

    // Renders the speakers block if any
    function renderSpeakers(data) {
      var sp = data.Speakers;
      if (!Array.isArray(sp) || sp.length === 0) {
        return '';
      }
      var label = sp.length > 1 ? 'Speakers' : 'Speaker';
      var html = ''
        + '<div class="event-speaker">'
        +   '<div class="separator-line"></div>'
        +   '<label>' + label + '</label>';
          for (var i = 0; i < sp.length; i++) {
            html += ''
              + '<div class="speaker-details">'
              +   '<div class="speaker-image">' + sp[i].Name.charAt(0) + '</div>'
              +   '<div class="speaker-info">'
              +     '<div class="speaker-name">' + sp[i].Name + '</div>'
              +     '<div class="speaker-title">' + sp[i].Title + '</div>'
              +     '<div class="speaker-note">' + sp[i].Note + '</div>'
              +   '</div>'
              + '</div>';
          }
      html += '</div>';
      return html;
    }

    function getResourceData(roomId) {
        var schedule = document.getElementById('Schedule').ej2_instances[0];
        var resourceData  = schedule.getResourceCollections().find(r => r.field === "RoomId");
        return (resourceData  && resourceData .dataSource.find(r => r.RoomId === roomId)) || {};
    }

    function getRoomName(roomId) {
      return getResourceData(roomId).RoomName || "";
    }

    function getSpeakerNames(speakers) {
      return speakers.map(function(speaker, index) {
        var text = speaker.Name + ' (' + speaker.Title + ')';
        if (index < speakers.length - 2) return text + ', ';
        if (index === speakers.length - 2) return text + ' and ';
      return text;
      }).join('');
    }

    function closeQuickPopup() {
            var scheduleObj = document.getElementById("Schedule").ej2_instances[0];
            scheduleObj.closeQuickInfoPopup();
    }

    function getQuickInfoHeaderStyle(data) {
        var resourceData = getResourceData(data.RoomId);
        return resourceData ? `background:${resourceData.RoomColor}; color: #FFFFFF;` : '';
    }

    function getQuickInfoDurationText(data) {
        return intl.formatDate(data.StartTime, { type: 'date', skeleton: 'full' }) + ' (' +
            intl.formatDate(data.StartTime, { skeleton: 'hm' }) + ' - ' +
            intl.formatDate(data.EndTime, { skeleton: 'hm' }) + ')';
    }

    function onPopupOpen(args) {
        var isQuickInfo = args.type === 'QuickInfo' || args.type === 'ViewEventInfo';
        var isEditor = args.type === 'Editor';
        var isBreak = args.target && args.target.classList.contains('e-break-event');
        if ((isQuickInfo && isBreak) || (isEditor && !isDraggedItemDropped)) {
            args.cancel = true;
            return;
        }
        if (isQuickInfo) {
            args.element.classList.add('event-management-quick-popup');
        } else if (isEditor) {
            args.element.classList.add('event-management-editor-popup');
            var capacityAlert = args.element.querySelector('.capacity-alert');
            var timeAlert = args.element.querySelector('.time-alert');
            if (capacityAlert) capacityAlert.remove();
            if (timeAlert) timeAlert.remove();
            var startElement = args.element.querySelector('.e-start-end-row .e-start.e-control.e-datetimepicker');
            var endElement = args.element.querySelector('.e-start-end-row .e-end.e-control.e-datetimepicker');
            if (startElement && endElement) {
                var startPicker = startElement.ej2_instances[0];
                var endPicker = endElement.ej2_instances[0];
                startPicker.change = function() {
                    var startTime = new Date(startPicker.value);
                    if (args.data && args.data.Duration) {
                        var match = args.data.Duration.match(/(\d+)\s+(hour|hours|minute|minutes)/i);
                        if (match) {
                            var val = parseInt(match[1], 10);
                            var unit = match[2].toLowerCase();
                            var newEndTime = new Date(startTime);
                            if (unit.indexOf('hour') >= 0) {
                                newEndTime.setHours(newEndTime.getHours() + val);
                            } else {
                                newEndTime.setMinutes(newEndTime.getMinutes() + val);
                            }
                            endPicker.value = newEndTime;
                        }
                    }
                };
            }
        }
    }

    function getTimeString(value) {
        return intl.formatDate(new Date(value), { type: 'time', skeleton: 'short' });
    }

    function onEventRendered(args) {
        var data = args.data;
        var subject = data.Subject ? data.Subject.toLowerCase() : '';
        var isBreakEvent = subject.includes('break') || subject.includes('lunch');

        if (isBreakEvent) {
            if (args.element.classList.contains('e-agenda-item')) {
                var appointment = args.element.querySelector('.e-appointment');
                if (appointment) {
                    appointment.classList.add('e-break-event');
                }
            } else {
                args.element.classList.add('e-break-event');
            }
        }
    }

    function onCellClick(args) {
        args.cancel = true;
    }
</script>
}

@*custom code start*@
@section Meta {
    <meta name="description" content="This example demonstrates the Tech Event Organizer ASP.NET Core Scheduler control. Explore here for more details." />
}


@section ActionDescription {
    <div id="action-description">
        <p>This demo showcases a technical event management system that uses the Scheduler component, where each technical event is split into multiple sessions with specific room allocations. The system features drag-and-drop capabilities for scheduling sessions, conflict prevention, and filtering by room.</p>
    </div>

}

@section Description {
    <div id="description">
        <p>
            This example demonstrates how to implement a technical event management system using the Scheduler component. The application includes the following key features:
        </p>
        <ul>
            <li>Each technical event is organized into multiple separate sessions, with specific room allocations on the same day.</li>
            <li>An external list of unscheduled sessions that can be scheduled via drag-and-drop functionality</li>
            <li>Prevention of scheduling conflicts and room capacity overflows while dragging and dropping externally maintained event sessions.</li>
            <li>Room-based filtering through toolbar dropdown selections.</li>
            <li>Ability to filter and view unscheduled event sessions by technical event.</li>
            <li>Detailed agenda view that displays event information including speakers, audience size, and session descriptions.</li>
        </ul>
    </div>
}
@section Title {
    <title>ASP.NET Core Scheduler Tech Event Organizer Example - Syncfusion Demos </title>
                }
@section Header {
    <h1 class='sb-sample-text'>Example of Tech Event Organizer in ASP.NET Core Scheduler Control</h1>
                }
@*custom code end*@