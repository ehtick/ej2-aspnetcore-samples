@page
@model EJ2CoreSampleBrowser.Pages.Schedule.Group

@using Syncfusion.EJ2

@{
    string[] resources = new string[] { "Airlines" };
}

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            <div class="schedule-demo-heading">Flight timings between Barcelona and Los Angeles</div>
            <ejs-schedule id="schedule" width="100%" height="650px" selectedDate="new DateTime(DateTime.Today.Year, 4, 6)" resourceHeaderTemplate="#restemplate" actionBegin="onActionBegin">
                <e-schedule-group resources="@resources"></e-schedule-group>
                <e-schedule-resources>
                    <e-schedule-resource dataSource="@Model.airlines" field="AirlineId" title="Airline Name" name="Airlines" textField="AirlineName" idField="AirlineId" colorField="AirlineColor" allowMultiple="true"></e-schedule-resource>
                </e-schedule-resources>
                <e-schedule-views>
                    <e-schedule-view option="Week"></e-schedule-view>
                    <e-schedule-view option="Month"></e-schedule-view>
                    <e-schedule-view option="Agenda"></e-schedule-view>
                </e-schedule-views>
                <e-schedule-eventsettings>
                    <e-eventsettings-fields>
                        <e-field-subject name="Subject" title="Travel Summary"></e-field-subject>
                        <e-field-location name="Location" title="Source"></e-field-location>
                        <e-field-description name="Description" title="Comments"></e-field-description>
                        <e-field-starttime name="StartTime" title="Departure Time"></e-field-starttime>
                        <e-field-endtime name="EndTime" title="Arrival Time"></e-field-endtime>
                    </e-eventsettings-fields>
                </e-schedule-eventsettings>
            </ejs-schedule>
        </div>
    </div>
    <style>
        .e-schedule .template-wrap {
            display: flex;
            text-align: left;
        }

        .e-schedule .e-agenda-view .template-wrap {
            display: table;
            width: inherit;
            text-align: center;
            padding-top: 10px;
        }

        .e-schedule:not(.e-device) .e-agenda-view .e-content-wrap table td:first-child {
            width: 110px;
        }

        .e-schedule .template-wrap .airline-image {
            width: 30px;
            margin-top: 15px;
            background-repeat: no-repeat;
        }

        .e-schedule.e-device .template-wrap .airline-image {
            margin-top: 5px;
        }

        .e-schedule .e-agenda-view .template-wrap .airline-image {
            height: 30px;
            margin-top: 0;
            margin-left: 35%;
        }

        .e-schedule .e-vertical-view .e-resource-cells {
            height: 80px;
        }

        .e-schedule .template-wrap .airline-details {
            padding-left: 15px;
        }

        .e-schedule .e-agenda-view .template-wrap .airline-details {
            padding: 0;
        }

        .e-schedule .template-wrap .airline-details .airline-name {
            font-size: 16px;
            font-weight: 500;
        }

        .e-schedule.e-device .template-wrap .airline-details .airline-name {
            font-size: inherit;
            font-weight: inherit;
        }

        .e-schedule .e-agenda-view .template-wrap .airline-model,
        .e-schedule .e-agenda-view .template-wrap .airline-seats {
            display: none;
        }

        .e-schedule.e-device .template-wrap .airline-model,
        .e-schedule.e-device .template-wrap .airline-seats {
            display: none;
        }

        /* custom code start*/
        .schedule-demo-heading {
            font-size: 16px;
            padding-bottom: 15px;
            text-align: center;
            font-weight: 500
        }

        @@media (max-width: 550px) {
            .schedule-demo-heading {
                font-size: 14px;
            }
        }
        /* custom code end*/
    </style>
    <script id="restemplate" type="text/x-template">
        <div class='template-wrap'>
            <div class="airline-image"><img src="@Url.Content("~/css/schedule/images/${getAirlineImage(data)}.svg")" alt="Airline Picture"/></div>
            <div class="airline-details">
                <div class="airline-name">${getAirlineName(data)}</div>
                <div class="airline-model">Model no: ${getAirlineModel(data)}</div>
                <div class="airline-seats">No.of seats: ${getAirlineSeats(data)}</div>
            </div>
        </div>
    </script>
    <script type="text/javascript">
        window.getAirlineImage = function (value) {
            var airlineName = window.getAirlineName(value);
            return airlineName.replace(' ', '-').toLowerCase();
        };
        window.getAirlineName = function (value) {
            return value.resourceData ?
                value.resourceData[value.resource.textField] : value.resourceName;
        };
        window.getAirlineModel = function (value) {
            var airlineName = window.getAirlineName(value);
            return (airlineName === 'Air India') ? 'CRJ 700' : (airlineName === 'Qatar Airways') ? 'Airbus A330' : 'ATR 72-600';
        };
        window.getAirlineSeats = function (value) {
            var airlineName = window.getAirlineName(value);
            return (airlineName === 'Air India') ? 50 : (airlineName === 'Qatar Airways') ? 75 : 100;
        };
        function onActionBegin(args) {
            if (args.requestType === "toolbarItemRendering") {
                var scheduleObj = document.getElementById('schedule').ej2_instances[0];
                scheduleObj.eventSettings.dataSource = generateEvents();
            }
        }
        function generateEvents() {
            var year = new Date().getFullYear();
            var subjectCollection = ['Barcelona to Los Angeles', 'Los Angeles to Barcelona'];
            var collections = [];
            var dataCollections = [1, 2, 3];
            var id = 1;
            for (var i = 0, dataCollections = dataCollections; i < dataCollections.length; i++) {
                var data = dataCollections[i];
                var startDate = new Date(year, 3, 1);
                startDate.setMilliseconds(1000 * 60 * 60 * .5 * (data - 1));
                var lastDate = new Date((+startDate) + (1000 * 60 * 60 * 24 * 30));
                for (var date = startDate; date.getTime() < lastDate.getTime(); date = new Date(date.getTime() + (1000 * 60 * 60 * 5))) {
                    var duration = 1000 * 60 * 60 * 5 * data;
                    var strDate = new Date(+date);
                    var endDate = new Date((+strDate) + (1000 * 60 * 60 * (2.5 + (0.5 * data))));
                    collections.push({
                        Id: id,
                        Subject: subjectCollection[id % 2],
                        StartTime: new Date(+strDate),
                        EndTime: new Date(+endDate),
                        AirlineId: data
                    });
                    id += 1;
                }
            }
            return collections;
        }
    </script>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Horizontal Grouping in ASP.NET Core Scheduler control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo illustrates the timings of different flight services on a specific route say between Barcelona and Los Angeles,
            on a daily basis. Here, the Scheduler is grouped based on the 3 Airline services.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, the scheduler has been grouped with multiple resources by making use of the property <code>group</code>.
            The resources to be grouped depends on the values of <code>resources</code> option within the <code>group</code>
            property, which accepts the array of resource names. The resource header has been customized by making use of the
            <code>resourceHeaderTemplate</code> property.
        </p>
        <p>
            In mobile mode, when the grouping is enabled, the resources will be listed out in a treeview as a side-panel which opens
            or closes, on clicking the hamburger icon at the resource header. Only a single resource will be viewable at a time,
            due to the space constraints on mobile. If in case, the users want to view the grouped layout on mobile with scrolling
            content, then it is necessary to set <code>false</code> to the <code>enableCompactView</code> option within the
            <code>group</code> property which is set to <code>true</code> by default. This option is not applicable on desktop mode.
        </p>
        <p>
            Note: If the <code>group</code> property is not defined, then the default scheduler will be rendered with no grouping
            on layout, but the appointments of all the resources will be displayed on a single schedule.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Scheduler Horizontal Grouping Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Horizontal Grouping in ASP.NET Core Scheduler Control</h1>
                }