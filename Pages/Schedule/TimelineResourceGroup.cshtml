@page

@model EJ2CoreSampleBrowser.Pages.Schedule.TimelineResourceGroup
@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2

@{
    var resourceData = new ScheduleData().GetResourceData();
    var timelineResourceData = new ScheduleData().GetTimelineResourceData();
    var timelineDataSource = resourceData.Concat(timelineResourceData);
    var resources = new string[] { "Projects", "Categories" };
    var workDays = new int[] { 0, 1, 2, 3, 4, 5 };
}

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            <ejs-schedule id="schedule" width="100%" height="650px" currentView="TimelineWeek" selectedDate="new DateTime(DateTime.Today.Year, 4, 4)" workDays="@workDays">
                <e-schedule-views>
                    <e-schedule-view option="TimelineDay"></e-schedule-view>
                    <e-schedule-view option="TimelineWeek"></e-schedule-view>
                    <e-schedule-view option="TimelineWorkWeek"></e-schedule-view>
                    <e-schedule-view option="TimelineMonth"></e-schedule-view>
                    <e-schedule-view option="Agenda"></e-schedule-view>
                </e-schedule-views>
                <e-schedule-group resources="@resources"></e-schedule-group>
                <e-schedule-resources>
                    <e-schedule-resource dataSource="@Model.projects" field="ProjectId" title="Choose Project" name="Projects" textField="text" idField="id" colorField="color"></e-schedule-resource>
                    <e-schedule-resource dataSource="@Model.categories" field="TaskId" title="Category" name="Categories" textField="text" idField="id" groupIDField='groupId' colorField="color" allowMultiple="true"></e-schedule-resource>
                </e-schedule-resources>
                <e-schedule-eventsettings dataSource="@timelineDataSource">
                    <e-eventsettings-fields>
                        <e-field-subject name="Subject" title="Summary"></e-field-subject>
                        <e-field-description name="Description" title="Comments"></e-field-description>
                    </e-eventsettings-fields>
                </e-schedule-eventsettings>
            </ejs-schedule>
        </div>
    </div>
    <style type="text/css">
        .e-schedule:not(.e-device) .e-agenda-view .e-content-wrap table td:first-child {
            width: 90px;
        }

        .e-schedule .e-agenda-view .e-resource-column {
            width: 100px;
        }
    </style>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Timeline Grouping in ASP.NET Core Scheduler control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo showcases how the multiple resources are grouped as well as how the events are portrayed in timeline view layouts.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In the timeline view, each row depicts a single resource whereas in vertical views, each resource are grouped parallelly
            as columns. Here, the resource grouping follows the tree-view like hierarchical grouping structure and can contain
            any level of child resources. In this sample, we have used two level hierarchy, where the
            <code>PROJECT 1</code> and
            <code>PROJECT 2</code> are the parent level and the
            <code>development</code> and
            <code>testing</code> are child level resources which are defined using the
            <code>resources</code> property. They are grouped in layout by making use of the
            <code>group</code> property and its order of grouping depends on the order of names passed onto the
            <code>resources</code> option within
            <code>group</code>.
        </p>
        <p>
            Also, the colors defined for the child level resources will get applied to the events of those resources by default. In case,
            if the colors of parent level needs to be applied to those child events, then it is necessary to define the
            <code>resourceColorField</code> option within the
            <code>eventSettings</code> property with the parent level resource name value.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Scheduler Timeline Grouping Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Timeline Grouping in ASP.NET Core Scheduler Control</h1>
                }