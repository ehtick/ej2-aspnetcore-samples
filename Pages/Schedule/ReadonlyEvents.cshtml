@page

@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2

@{
    var appointments = new ScheduleData().GetReadonlyEventsData();
}

@section ControlsSection{
    <div class="control-section">
        <div class="schedule-wrapper">
            <ejs-schedule id="schedule" height="650" actionBegin="onActionBegin" popupOpen="onPopupOpen" dragStop="onDragStop" resizeStop="onResizeStop">
                <e-schedule-views>
                    <e-schedule-view option="Day"></e-schedule-view>
                    <e-schedule-view option="Week"></e-schedule-view>
                    <e-schedule-view option="WorkWeek"></e-schedule-view>
                    <e-schedule-view option="Month"></e-schedule-view>
                </e-schedule-views>
                <e-schedule-eventsettings dataSource="@appointments"></e-schedule-eventsettings>
            </ejs-schedule>
        </div>
    </div>

    <style>
        .e-schedule .e-read-only {
            opacity: .8;
        }
    </style>

    <script type="text/javascript">
        function onDragStop(args) {
            args.cancel = onEventCheck(args);
        }

        function onResizeStop(args) {
            args.cancel = onEventCheck(args);
        }

        function onActionBegin(args) {
            if ((args.requestType === 'eventCreate') || args.requestType === 'eventChange') {
                args.cancel = onEventCheck(args);
            }
        }

        function onPopupOpen(args) {
            if ((args.type === 'QuickInfo' || args.type === 'Editor') && !args.target.classList.contains('e-appointment')) {
                args.cancel = onEventCheck(args);
            }
        }

        function onEventCheck(args) {
            var eventObj = args.data instanceof Array ? args.data[0] : args.data;
            return (eventObj.StartTime < new Date());
        }

    </script>
}

@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Read-only Events in ASP.NET Core Scheduler control. Explore here for more details."/>
                }
@*custom code end*@

@section ActionDescription{
    <div id="action-description">
        <p>
            This demo showcases how to make specific events on the Scheduler to be displayed in a read-only mode. The read-only events
            can be simply viewed and prevented from undergoing any edit actions.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            In this demo, the events that has occurred on the past hours from the current time are made as read-only and
            the CRUD actions has been prevented on it. This has been done by setting <code>true</code> to the <code>IsReadonly</code> field of
            past events. By doing so, the <code>aria-readonly</code> attribute gets added into the event element and differentiate it
            from the other normal events.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Scheduler Read-only Events Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Read-only Events in ASP.NET Core Scheduler Control</h1>
                }