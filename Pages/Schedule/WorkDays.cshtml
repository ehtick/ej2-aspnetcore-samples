@page
@model EJ2CoreSampleBrowser.Pages.Schedule.WorkDays

@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2

@{
    var appointments = new ScheduleData().GetEmployeeEventData();
    var workingDays = new int[] { 1, 3, 5 };
}

@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="schedule-wrapper">
            <ejs-schedule id="schedule" width="100%" height="650px" currentView="WorkWeek" selectedDate="new DateTime(DateTime.Today.Year, 2, 15)" workDays="@workingDays" eventRendered="onEventRendered">
                <e-schedule-workhours start="08:00"></e-schedule-workhours>
                <e-schedule-views>
                    <e-schedule-view option="Week"></e-schedule-view>
                    <e-schedule-view option="WorkWeek"></e-schedule-view>
                    <e-schedule-view option="Month"></e-schedule-view>
                    <e-schedule-view option="TimelineWeek"></e-schedule-view>
                    <e-schedule-view option="TimelineMonth"></e-schedule-view>
                </e-schedule-views>
                <e-schedule-eventsettings dataSource="@appointments"></e-schedule-eventsettings>
            </ejs-schedule>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id='property' title='Properties' class='property-panel-table' style="width: 100%;">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 100%;">
                        <div>
                            <ejs-dropdownlist id="scheduleworkdays" dataSource="@Model.workDays" change="onChange" value="@("1,3,5")" popupWidth="auto" placeholder="Work days" floatLabelType="Always">
                                <e-dropdownlist-fields text="Name" value="Value"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 100%;">
                        <div>
                            <ejs-dropdownlist id="scheduledayofweek" dataSource="@Model.dayOfWeek" change="onDayChange" value="@("0")" popupWidth="auto" placeholder="First day of week" floatLabelType="Always">
                                <e-dropdownlist-fields text="Name" value="Value"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <script src="~/scripts/schedule/applyCategoryColor.js"></script>
    <script type="text/javascript">
        function onChange(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.workDays = args.value.toString().split(',').map(Number);
            scheduleObj.dataBind();
        }
        function onDayChange(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.firstDayOfWeek = parseInt(args.value, 10);
            scheduleObj.dataBind();
        }
        function onEventRendered(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            applyCategoryColor(args, scheduleObj.currentView);
        }
    </script>
}

@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Work Days in ASP.NET Core Scheduler control. Explore here for more details."/>
                }
@*custom code end*@

@section ActionDescription{
    <div id="action-description">
        <p>
            This demo showcases how to set customized working days as well as first day of a week on Scheduler.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            In this demo, the working days of a week can be set on Scheduler using the
            <code>workDays</code> property which accepts the collection of day indexes (from 0 to 6) of a week. By default, it is set to
            <code>[1, 2, 3, 4, 5]</code> and in this demo, it has been set to
            <code>[1, 3, 5]</code> which means that
            <code>Monday, Wednesday, Friday</code> is being set as working days of a week and is visually differentiated from non-working days. The working hours usually
            applies only on these given working days.
        </p>
        <p>
            The first day of the week can also be set on the Scheduler by making use of the
            <code>firstDayOfWeek</code> property, doing so which will make the Scheduler to start with that day.
        </p>
        <p>
            <strong>Note: </strong> Here, Sunday is always denoted as 0, Monday as 1 and so on.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Scheduler Work Days Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Work Days in ASP.NET Core Scheduler Control</h1>
                }