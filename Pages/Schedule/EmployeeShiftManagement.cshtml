@page
@model EJ2CoreSampleBrowser.Pages.EmployeeShiftManagement
@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2.DropDowns
@using System.Text.Json
@using Syncfusion.EJ2

<link href="~/schedule/employee-shift-management.css" rel="stylesheet" />

@section ControlsSection {
    <div class="schedule-control-section shift-management-control-section">
        <div class="col-lg-12 control-section">
            <div class="control-wrapper shift-management-sample-wrapper">
                <ejs-schedule id="schedule" width="100%" height="550px" cssClass="schedule-shift-management" startHour="07:00" endHour="23:00" currentView="TimelineWeek" selectedDate="new DateTime(2025, 3, 5)" allowResizing="false" allowDragAndDrop="false" eventRendered="onEventRendered" popupOpen="onPopupOpen" editorHeaderTemplate="#editorHeaderTemplate" popupClose="onPopupClose" cellClick="onCellClick" navigating="onNavigating" eventClick="onEventClick" actionComplete="onActionComplete">
                    <e-schedule-group enableCompactView="false" resources="@Model.GroupResources"></e-schedule-group>
                    <e-schedule-views>
                        <e-schedule-view option="TimelineWeek"></e-schedule-view>
                        <e-schedule-view option="Agenda" eventTemplate="#agendaTemplate"></e-schedule-view>
                    </e-schedule-views>
                    <e-schedule-resources>
                        <e-schedule-resource field="RoleId"
                                             title="Roles"
                                             name="Roles"
                                             textField="Role"
                                             idField="Id"
                                             allowMultiple="false"
                                             dataSource="@Model.EmployeeRoles">
                        </e-schedule-resource>
                        <e-schedule-resource field="DesignationId"
                                             title="Designations"
                                             name="Designations"
                                             textField="Name"
                                             idField="Id"
                                             groupIDField="GroupId"
                                             allowMultiple="false"
                                             dataSource="@Model.Designations">
                        </e-schedule-resource>
                    </e-schedule-resources>
                    <e-schedule-toolbaritems>
                        <e-schedule-toolbaritem name="Previous" align="Left"></e-schedule-toolbaritem>
                        <e-schedule-toolbaritem name="Next" align="Left"></e-schedule-toolbaritem>
                        <e-schedule-toolbaritem name="DateRangeText" align="Left"></e-schedule-toolbaritem>
                        <e-schedule-toolbaritem name="Views" align="Right"></e-schedule-toolbaritem>
                    </e-schedule-toolbaritems>
                    <e-schedule-workhours highlight="true" start="00:00" end="23:59"></e-schedule-workhours>
                    <e-schedule-timescale interval="480"
                                          slotCount="3"
                                          majorSlotTemplate="#majorSlotTemplate">
                    </e-schedule-timescale>

                    <e-schedule-eventsettings dataSource="@Model.EmployeeShiftData"></e-schedule-eventsettings>
                </ejs-schedule>

                <div class="treeview-container">
                    <div class="title-text"><span>Available List</span></div>

                    <!--  ChipList for filtering -->
                    <div class="role-tabs">
                        <ejs-chiplist id="chip-avatar"
                                      selection="Single"
                                      cssClass="e-outline"
                                      selectedChips="@(Model.SelectedChips)"
                                      beforeClick="onBeforeClick"
                                      click="chipClick"
                                      aria-labelledby="choiceChips">    
                            <e-chips>
                                <e-chip text="All"></e-chip>
                                <e-chip text="Doctors"></e-chip>
                                <e-chip text="Nurses"></e-chip>
                                <e-chip text="Staffs"></e-chip>
                            </e-chips>
                        </ejs-chiplist>
                    </div>

                    <!--  TreeView Instances -->
                    <ejs-treeview id="allStaffsTreeview"
                                  cssClass="shift-management-treeview"
                                  style="display:block"
                                  allowDragAndDrop="true"
                                  dragArea=".shift-management-sample-wrapper"
                                  nodeDragStart="onTreeDragStart"
                                  nodeDragStop="onTreeDragStop"
                                  nodeTemplate="#treeTemplate"
                                  fields="@(Model.AllStaffsFields)">
                    </ejs-treeview>

                    <ejs-treeview id="doctorsTreeview"
                                  cssClass="shift-management-treeview"
                                  style="display:none"
                                  allowDragAndDrop="true"
                                  dragArea=".shift-management-sample-wrapper"
                                  nodeDragStart="onTreeDragStart"
                                  nodeDragStop="onTreeDragStop"
                                  nodeTemplate="#treeTemplate"
                                  fields="@(Model.DoctorsFields)">
                    </ejs-treeview>

                    <ejs-treeview id="nursesTreeview"
                                  cssClass="shift-management-treeview"
                                  style="display:none"
                                  allowDragAndDrop="true"
                                  dragArea=".shift-management-sample-wrapper"
                                  nodeDragStart="onTreeDragStart"
                                  nodeDragStop="onTreeDragStop"
                                  nodeTemplate="#treeTemplate"
                                  fields="@(Model.NursesFields)">
                    </ejs-treeview>

                    <ejs-treeview id="supportStaffsTreeview"
                                  cssClass="shift-management-treeview"
                                  style="display:none"
                                  allowDragAndDrop="true"
                                  dragArea=".shift-management-sample-wrapper"
                                  nodeDragStart="onTreeDragStart"
                                  nodeDragStop="onTreeDragStop"
                                  nodeTemplate="#treeTemplate"
                                  fields="@(Model.StaffsFields)">
                    </ejs-treeview>
                </div>

                <div id="target" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999; display: none;">
                    <ejs-dialog id="modalDialog"
                                header="Shift Swap"
                                width="378px"
                                isModal="true"
                                visible="false"
                                showCloseIcon="true"
                                cssClass="swap-dialog"
                                animationSettings="@(new DialogAnimationSettings { Effect = DialogEffect.None })">
                        <e-dialog-buttons>
                            <e-dialog-dialogbutton buttonModel="@(new { content = "Cancel" })" click="onCancelClick"></e-dialog-dialogbutton>
                            <e-dialog-dialogbutton buttonModel="@(new { content = "Swap Shift", isPrimary = false, disabled = true })" click="onSwapClick"></e-dialog-dialogbutton>
                        </e-dialog-buttons>
                        <e-content-template>
                            <div class="e-shift-swap">
                                <div>
                                    <label>Select an employee(Available for swapping)</label>
                                    <ejs-dropdownlist id="employeeDropdown"
                                                      placeholder="Select an employee"
                                                      fields="@(new DropDownListFieldSettings { Text = "name", Value = "id" })"
                                                      change="employeeNameChange">
                                    </ejs-dropdownlist>
                                </div>
                                <div style="margin-top: 10px;">
                                    <label>Select shift</label>
                                    <ejs-dropdownlist id="shiftDropdown"
                                                      placeholder="Select shift"
                                                      fields="@(new DropDownListFieldSettings { Text = "name", Value = "id" })"
                                                      change="shiftChange">
                                    </ejs-dropdownlist>
                                </div>
                            </div>
                        </e-content-template>
                    </ejs-dialog>
                </div>
                <div style="display:none;" id="agenda-toolbar-wrapper">
                    <ejs-toolbar id="agenda-toolbar-container" cssClass="agenda-toolbar" overflowMode="Scrollable" width="100%">
                        <e-toolbar-items>
                            <!-- Chip List Toolbar Item -->
                            <e-toolbar-item type="Input" cssClass="tooltip-chips" align="Left" template="#agendaToolbarChipsTemplate">
                            </e-toolbar-item>
                            <!-- DropDownList Toolbar Item -->
                            <e-toolbar-item type="Input" cssClass="tooltip-ddl" align="Right" template="#agendaToolbarDropDownListTemplate">
                            </e-toolbar-item>
                        </e-toolbar-items>
                    </ejs-toolbar>
                </div>
                
                <div id="agendaToolbarChipsTemplate">
                    <ejs-chiplist id="chip-avatar-one" 
                                  selection="Single"
                                  cssClass="e-outline"
                                  selectedChips="@(Model.SelectedChips)"
                                  aria-labelledby="choiceChips"
                                  beforeClick="agendaBeforeClick"
                                  click="agendaChipsClick">
                        <e-chips>
                            <e-chip text="All"></e-chip>
                            <e-chip text="Doctors"></e-chip>
                            <e-chip text="Nurses"></e-chip>
                            <e-chip text="Staffs"></e-chip>
                        </e-chips>
                    </ejs-chiplist>
                </div>

                <!-- Toolbar DropDownList Template -->

                <div id="agendaToolbarDropDownListTemplate" style="width:230px;">
                    <ejs-dropdownlist id="agendaEmployeeDropdown"
                                      dataSource="new List<object>()"
                                      placeholder="Select an employee"
                                      popupHeight="220px"
                                      showClearButton="true"
                                      change="onDropDownListChange"
                                      beforeOpen="onDropDownListBeforeOpen">
                    </ejs-dropdownlist>
                </div>
            </div>
        </div>
    </div>

    <script id="majorSlotTemplate" type="text/x-template">
        <div>
                ${getShiftText(data.date)}
        </div>
    </script>

    @* The template option to render the customized header of the editor window. *@
    <script id="editorHeaderTemplate" type="text/x-template">
        <div id="event-header">Leave Replacement</div>
    </script>

    <!--  Define your node template -->
    <script id="treeTemplate" type="text/x-template">
        <div id="waiting">
            <div id="waitdetails">
                <img class="employee-image" src="${getImage(Name)}" alt="Employee" />
                <div class="text-container">
                    <div id="waitlist">${Name}</div>
                    <div id="waitcategory">${Description}</div>
                </div>
            </div>
        </div>
    </script>

    <script id="agendaTemplate" type="text/x-template">
        <div class="agenda-event">
            <div class='e-staff'>
                <div class="staff-image">
                          ${getInitial(data.Subject)}
                </div>
                <div class='event-details'>
                    <div class="staff-info">
                        <span class='staff-name'>${getEmployeeName(data)}</span>
                        <span class='staff-role'> ${getRole(data.RoleId)} </span>
                        <span class="staff-designation">
                               (${getDesignation(data.DesignationId)})
                        </span>
                        <span class='staff-availability'>${getLeaveTag(data.Description)} </span>
                    </div>
                    <div class="event-time">Shift Time: ${getTimeString(data.StartTime)} - ${getTimeString(data.EndTime)}</div>
                 </div>
            </div>
        </div>
    </script>

    <script>
        let currentChipIndex = 0;
        let previousChipIndex = 0;
        let draggedItemId = null;
        let isDraggedItemDropped = false;
        let agendaPrevoiusChip = 0;

        var rolesData = ['All', 'Doctors', 'Nurses', 'Support Staffs'];
        var allData = @Html.Raw(JsonSerializer.Serialize(Model.AllStaffs));

        var roles =  @Html.Raw(JsonSerializer.Serialize(Model.EmployeeRoles));
        var designations=@Html.Raw(JsonSerializer.Serialize(Model.Designations));

        var employeeImages =@Html.Raw(JsonSerializer.Serialize(Model.EmployeeImages));
        // Serializes the dictionary into a JS object literal
        var imageMap = @Html.Raw(JsonSerializer.Serialize(Model.ImageMap));

        function getImage(name) {
            return imageMap[name.toLowerCase()] || '/images/default.png';
        }
        // change the shift in the scheduler
        function getShiftText(date) {
            const hour = new Date(date).getHours();
            return hour === 7 ? 'Morning Shift' : 'Evening Shift';
        }

        var scheduleObj;
        var dropdownObj;
        var chipListObj;

        window.onload = function () {
            scheduleObj = document.querySelector("#schedule").ej2_instances?.[0];
            dropdownObj = document.querySelector("#agendaEmployeeDropdown").ej2_instances?.[0];
            chipListObj = document.querySelector("#chip-avatar-one").ej2_instances?.[0];
        };

        function agendaBeforeClick(args){
            const chipIndex = args.index;
            if (chipIndex === agendaPrevoiusChip) {
                args.cancel = true;
            }
        }

        function agendaChipsClick(args) {
            if (!scheduleObj || !dropdownObj || !chipListObj) return;

            const chipIndex = args.index; // 0 = All, 1 = Doctors, etc.

            dropdownObj.value = null;
            dropdownObj.dataSource = [];
            dropdownObj.dataBind();
            dropdownObj.focusOut();

            let query;
            if (chipIndex === 0) {
                query = new ej.data.Query();
            } else {
                query = new ej.data.Query().where('RoleId', 'equal', chipIndex);
            }

            // Update Scheduler view
            scheduleObj.eventSettings.query = query;

            // Immediately update dropdown list as well
            const allEvents = scheduleObj.eventSettings.dataSource || [];

            const filtered = (chipIndex === 0)
                ? allEvents
                : allEvents.filter(e => e.RoleId === chipIndex);

            var subjects = [...new Set(filtered
                .map(e => e.Subject)
                .filter(subject => subject && !subject.toLowerCase().includes('covers') && !subject.toLowerCase().includes('swapped'))
            )];
            const dropData = subjects.map(name => ({ value: name, text: name }));

            dropdownObj.dataSource = dropData;
            dropdownObj.fields = { text: 'text', value: 'value' };
            dropdownObj.dataBind();

            agendaPrevoiusChip = chipIndex;
        }

         function onDropDownListBeforeOpen() {
            if (!scheduleObj || !dropdownObj || !chipListObj) return;

            const chipIndex = chipListObj.selectedChips;
            const allEvents = scheduleObj.eventSettings.dataSource || [];

            const filteredEvents = (chipIndex === 0)
                ? allEvents
                : allEvents.filter(e => e.RoleId === chipIndex);

            const employeeNames = Array.from(
               new Set(
                 filteredEvents.filter(obj =>
                     obj.Subject &&
                     !obj.Subject.toLowerCase().includes('covers') &&
                     !obj.Subject.toLowerCase().includes('swapped')
                     ).map(obj => obj.Subject)
               )
            );

            // Only update if data is different
            const newData = employeeNames.map(name => ({ value: name, text: name }));
            const currentData = dropdownObj.dataSource || [];

            // Prevent unnecessary updates that could cause internal rendering issues
            const isSame = JSON.stringify(currentData) === JSON.stringify(newData);
            if (!isSame) {
                dropdownObj.dataSource = newData;
                dropdownObj.dataBind(); 
            }
        }

        function onDropDownListChange(args) {
            if (!scheduleObj || !dropdownObj || !chipListObj) return;

            const name = args.itemData?.value;
            const chipIndex = chipListObj.selectedChips;

            let query;
            if (name) {
                query = new ej.data.Query().where('Subject', 'contains', name, true);
            } else if (chipIndex === 0) {
                query = new ej.data.Query();
            } else {
                query = new ej.data.Query().where('RoleId', 'equal', chipIndex);
            }

            scheduleObj.eventSettings.query = query;
            dropdownObj.focusIn();
        }

        function onNavigating(args) {
            var scheduleToolbar = document.querySelector('.e-schedule-toolbar-container');
            var agendaToolbar = document.getElementById('agenda-toolbar-container');
            var agendaToolbarInstance = document.querySelector("#agenda-toolbar-container").ej2_instances[0];
            var scheduleObj = document.querySelector("#schedule").ej2_instances[0];
            if (args.currentView) {
               scheduleObj.setProperties({currentView:args.currentView},true);
            }

            if (!scheduleToolbar || args.action !== 'view') return;

            if (args.currentView === 'Agenda') {
                if (scheduleToolbar && agendaToolbar) {
                    const wrapper = document.getElementById('agenda-toolbar-wrapper');
                    wrapper.style.display = 'block';
                    scheduleToolbar.appendChild(agendaToolbar);
                    agendaToolbarInstance.refresh();
                }

                // Ensure "All" chip is selected
                if (chipListObj && chipListObj.selectedChips !== 0) {
                    chipListObj.select(0); // Select "All"
                }

                // Clear dropdown selection
                if (dropdownObj) {
                    dropdownObj.value = null;
                    dropdownObj.dataBind();
                }

                //  Trigger filter for "All"
                agendaChipsClick({ index: 0 });

            } else {
                // Hide agenda toolbar on other views
                if (agendaToolbar?.parentElement === scheduleToolbar) {
                    agendaToolbar.style.display = 'none';
                    document.body.appendChild(agendaToolbar);
                }

                // Reset scheduler filter
                if (scheduleObj) {
                    scheduleObj.eventSettings.query = new ej.data.Query();
                    scheduleObj.refreshEvents();
                }

                // Reset chip and dropdown selections
                if (chipListObj && chipListObj.selectedChips !== 0) {
                    chipListObj.select(0); // reset chip to "All"
                }

                // Also clear dropdown if user navigates away from agenda
                if (dropdownObj) {
                    dropdownObj.value = null;
                    dropdownObj.dataBind();
                }
            }
        }

        function onPopupClose(args) {
            if (args.type === 'Editor') {
                var target = args.event ? args.event.target : null;
                if (target && target.classList.contains('e-event-save')||target.classList.contains('e-save-icon'))  {
                    let treeIds = ['allStaffsTreeview', 'doctorsTreeview', 'nursesTreeview', 'supportStaffsTreeview'];
                    let activeTreeId = treeIds[currentChipIndex];
                    let treeObj = ej.base.getComponent(document.getElementById(activeTreeId), 'treeview');

                    if (treeObj && draggedItemId) {
                        let draggedId = parseInt(draggedItemId, 10);

                        // Filter out the dragged item
                        let updatedTreeData = treeObj.fields.dataSource.filter(function (item) {
                            return item.Id !== draggedId;
                        });

                        // Update TreeView dataSource
                        treeObj.fields.dataSource = updatedTreeData;
                        treeObj.dataBind();

                        // Remove dragged elements from DOM
                        document.querySelectorAll('.e-drag-item.treeview-external-drag').forEach(function (el) {
                            el.remove();
                        });

                        // If you're maintaining a global allData array, update it too
                        if (window.allData && Array.isArray(window.allData)) {
                            window.allData = window.allData.filter(function (item) {
                                return item.Id !== draggedId;
                            });
                        }

                        // Update event Description for "Leave"
                        if (args.data && args.data.Description && args.data.Description.includes('Leave')) {
                            args.data.Description = args.data.Description.replace('Leave ', 'Available ');
                        }

                        isDraggedItemDropped = false;
                    }
                }
            }
        }

        function onTreeDragStart(args) {
             draggedItemId = args.draggedNodeData.id;
            document.body.classList.add('e-disble-not-allowed');
        }

        function onTreeDragStop(args) {
            var classElement = document.querySelector('.e-schedule .e-device-hover');
            if (classElement) {
                classElement.classList.remove('e-device-hover');
            }

            args.cancel = true;
            var scheduleElement = ej.base.closest(args.target, '.e-content-wrap');

            if (scheduleElement) {
                var scheduleObj = document.getElementById('schedule').ej2_instances[0];
                var treeObj = document.getElementById('allStaffsTreeview').ej2_instances[0];

                var draggedId = parseInt(args.draggedNodeData.id, 10);
                var draggedData = treeObj.fields.dataSource.find(item => item.Id === draggedId);

                var target = ej.base.closest(args.target, '.e-appointment.event-leave');

                if (target) {
                    var eventDetails = scheduleObj.getEventDetails(target);

                    var role = roles.find(r => r.Id === eventDetails.RoleId)?.Role;
                    var designation = designations.find(d => d.Id === eventDetails.DesignationId)?.Name;

                    if (draggedData && role === draggedData.Role && designation === draggedData.Description) {
                        var copiedEventDetails = { ...eventDetails };
                        copiedEventDetails.Subject = draggedData.Name + ' covers for ' + eventDetails.Subject;
                        copiedEventDetails.Designation = draggedData.Description;
                        isDraggedItemDropped = true;
                        scheduleObj.openEditor( copiedEventDetails, 'EditOccurrence');
                    }
                }
            }

            document.body.classList.remove('e-disble-not-allowed');
        }

        var treeViewRefs = [
            '#allStaffsTreeview', // All
            '#doctorsTreeview', // Doctors
            '#nursesTreeview', // Nurses
            '#supportStaffsTreeview'  // Staffs
        ];

        function onBeforeClick(args) {
            const currentChipIndex = args.index;
            if (currentChipIndex === previousChipIndex) {
                args.cancel = true;
            }
        }

        function filterData(dataSource, role) {
            return dataSource.filter(function (data) {
                return data.Role === role;
            });
        }

        function chipClick(args) {
            currentChipIndex = args.index;

            var previousTree = document.querySelector(treeViewRefs[previousChipIndex]);
            var activeTree = document.querySelector(treeViewRefs[currentChipIndex]);

            if (previousTree) previousTree.style.display = 'none';
            if (activeTree) {
                activeTree.style.display = 'block';

                var treeObj = activeTree.ej2_instances[0];
                treeObj.fields.dataSource = currentChipIndex === 0
                    ? allData
                    : filterData(allData, rolesData[currentChipIndex]);
                treeObj.dataBind();
            }
            previousChipIndex = currentChipIndex;
        }

        @* Triggers before any of the scheduler popups opens on the page. *@
        function onPopupOpen(args) {
            var isEditorPopup = args.type === 'Editor';
            if (isEditorPopup) {
                if (!isDraggedItemDropped) {
                    args.cancel = true;
                    return;
                }
                args.element.classList.add('shift-management-editor-popup');
            }
        }

        @* Show the image and render the details *@
        function getEventTemplate(props) {
            const { Subject = '', Description = '', StartTime, EndTime } = props;
            const isSwappedEvent = Subject.includes('swapped');
            const isLeaveReplacedEvent = Subject.includes('covers for');
            const isLeave = Description.toLowerCase().includes('leave') && !isLeaveReplacedEvent;

            let employeeName = Subject;

             if (isLeaveReplacedEvent) {
                employeeName = Subject.split('covers for')[0].trim();
            } else if (isSwappedEvent) {
                const match = Subject.match(/with ([^']+)'s shift/);
                employeeName = match ? match[1] : Subject;
            } else {
                employeeName = Subject;
            }

            const matchedEmployee = employeeImages.find(emp => emp.Name === employeeName);
            const imageUrl = matchedEmployee ? matchedEmployee.Image : '/images/default.png';
            const nameText = isLeave ? Description.split('(')[0].trim() : employeeName;
            const timeText = `${getTimeString(StartTime)} - ${getTimeString(EndTime)}`;

            return `
                <div class="template-wrap">
                    <div class="e-staff">
                        <img class="staff-image" src="${imageUrl}" />
                        <div class="staff-info">
                            <div class="e-name">${nameText}</div>
                            <div class="e-designation">${timeText}</div>
                        </div>
                    </div>
                </div>
            `;
        }

        function onEventRendered(args) {
            const data = args.data;
            const element = args.element;

            // Shift-based background
            const startHour = new Date(data.StartTime).getHours();
            element.classList.add(startHour === 7 ? 'morning-shift' : 'evening-shift');

            // Appointment width handling
            const innerWrap = element.querySelector('.e-inner-wrap');
            if (innerWrap) {
                innerWrap.innerHTML = '';
                const newElement = document.createElement('div');
                newElement.innerHTML = getEventTemplate(data);
                const appointmentWidth = parseInt(element.style.width.split('px')[0], 10) - 5;
                element.style.width = `${appointmentWidth}px`;
                innerWrap.appendChild(newElement.firstElementChild);

                if (!element.classList.contains('e-read-only')) {
                    const groupIndex = parseInt(element.getAttribute('data-group-index'));
                    const classToAdd = groupIndex === 0 ? 'doctors-event' :
                                       groupIndex === 1 ? 'nurses-event' :
                                       'staffs-event';
                    element.classList.add(classToAdd);
                }
            }
            const view = document.querySelector("#schedule").ej2_instances[0].currentView;

            // Leave event
            if (data.Description && data.Description.toLowerCase().includes('leave')) {
                element.classList.add('event-leave');
                if (view !== 'Agenda') {
                    appendTooltipIcon(element, 'e-leave', `${data.Subject} is on leave. Drag a staff member with the same designation to cover this shift.`);
                }
            }

            // Covers for leave
            if (data.Subject && data.Subject.toLowerCase().includes('covers for')) {
                element.classList.add('e-covers');
                element.classList.remove('event-leave');
                if (view !== 'Agenda') {
                    appendTooltipIcon(element, 'e-replaced sf-icon-user-replace', 'Leave covered by replacement');
                }
            }

            // Swap request
            if (data.Description && data.Description.toLowerCase().includes('swap-request') &&
                !data.Subject.toLowerCase().includes('swapped') && view !== 'Agenda') {
                element.classList.add('event-swap');
                appendTooltipIcon(element, 'e-swap sf-icon-replace-request', 'Click here to swap shift', function (event) {
                    // Trigger your swap modal / handler here
                    requestShiftSwap(args);
                });
            }

            // Swapped event
            if (data.Subject && data.Subject.toLowerCase().includes('swapped')) {
                element.classList.remove('event-swap');
                element.classList.add('event-swapped');
                if (view !== 'Agenda') {
                    appendTooltipIcon(element, 'e-swapped sf-icon-replace-accepted', 'This shift has been swapped');
                }
            }
        }
        @* append tooltip icon for the scheduler *@
        function appendTooltipIcon(element, iconClass, tooltipText, onClick) {
                let container = element.querySelector('.e-icon-element');
                if (!container) {
                    container = document.createElement('span');
                    container.className = 'e-icon-element e-icons ' + iconClass;
                    container.title = tooltipText;
                    container.style.cursor = 'pointer';
                    element.appendChild(container);
                }

                if (onClick) {
                    container.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        onClick(e);
                    });
                }

                new ej.popups.Tooltip({
                    content: tooltipText,
                    position: 'RightCenter',
                    cssClass: 'shift-management-tooltip'
                }, container);
        }

        var requestedShift = null;
        var selectedEmployee = null;
        var selectedShift = null;
        var shiftsData = [];
        var employeeNamesList = [];

        function formatDateTimeRange(startTime, endTime) {
            return `${intl.formatDate(new Date(startTime), { skeleton: 'MMMd' })}, ${getTimeString(startTime)} to ${getTimeString(endTime)}`;
        }

        function onCancelClick() {
            selectedEmployee = null;
            selectedShift = null;
            employeeNamesList = [];
            shiftsData = [];
            //to close the dialog template
            document.getElementById('modalDialog').ej2_instances[0].hide();
        }

        function onSwapClick() {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            var dataSource = scheduleObj.eventSettings.dataSource;

            var requestingEvent = dataSource.find(e => e.Id === requestedShift.id);
            var approvedEvent = dataSource.find(e => e.Id === selectedShift.eventId);

            if (!requestingEvent || !approvedEvent) return;

            requestingEvent.Description = requestingEvent.Description.replace(' - Swap-Request', '');
            requestingEvent.Subject = requestedShift.name + ' swapped the shift with ' + selectedEmployee.name +
                "'s shift scheduled from " + formatDateTimeRange(approvedEvent.StartTime, approvedEvent.EndTime);

            approvedEvent.Description = approvedEvent.Description.replace(' - Swap-Request', '');
            approvedEvent.Subject = selectedEmployee.name + ' swapped the shift with ' + requestedShift.name +
                "'s shift scheduled from " + formatDateTimeRange(requestingEvent.StartTime, requestingEvent.EndTime);

            scheduleObj.refreshEvents();

            onCancelClick(); // Reset & close
        }

         function employeeNameChange(args) {
            if (!args.itemData) return;

            var shiftDropDown = document.getElementById('shiftDropdown').ej2_instances[0];
            selectedEmployee = employeeNamesList.find(e => e.id === args.itemData.id);

            if (!selectedEmployee) return;

            var filteredShifts = shiftsData.filter(item => item.employeeId === selectedEmployee.employeeId);
            shiftDropDown.dataSource = filteredShifts;
            shiftDropDown.value = null;
            shiftDropDown.dataBind();

            selectedShift = null;
            updateSwapButtonState(false);
        }

        function shiftChange(args) {
            if (!args.itemData) return;
            selectedShift = shiftsData.find(s => s.id === args.itemData.id);
            // Only enable the button if a valid shift is found
            updateSwapButtonState(true);
        }

         function updateSwapButtonState(enable) {
            var dialogObj = document.getElementById('modalDialog').ej2_instances[0];
            var buttonElements = dialogObj.element.querySelectorAll('.e-footer-content .e-btn');
            // Find the Swap Shift button DOM element based on its text
            buttonElements.forEach(function (btnEl) {
                    if (btnEl.innerText.trim().toUpperCase() === 'SWAP SHIFT') {
                        var buttonInstance = btnEl.ej2_instances?.[0];
                        if (buttonInstance) {
                            buttonInstance.disabled = !enable;
                            buttonInstance.dataBind();
                        }
                    }
            });
        }

        function requestShiftSwap(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            var appointment = args.element.classList.contains('e-appointment') ? args.element : args.element.closest('.e-appointment');
            if (!appointment) return;

            var eventDetails = scheduleObj.getEventDetails(appointment);
            if (!eventDetails) return;

            var roleId = eventDetails.RoleId;
            var designationId = eventDetails.DesignationId;
            var employeeName = eventDetails.Subject;
            var eventsData = scheduleObj.eventSettings.dataSource;

            requestedShift = { id: eventDetails.Id, name: employeeName };
            employeeNamesList = [];
            shiftsData = [];

            var filteredData = eventsData.filter(function (item) {
                return item.Description?.toLowerCase().includes("swap-request")
                    && item.RoleId === roleId
                    && item.DesignationId === designationId
                    && item.Subject !== employeeName;
            });

            filteredData.forEach(function (item, index) {
                if (!employeeNamesList.some(e => e.name === item.Subject)) {
                    employeeNamesList.push({
                        id: item.DesignationId,
                        name: item.Subject,
                        employeeId: item.EmployeeId
                    });
                }

                shiftsData.push({
                    id: index + 1,
                    name: getFormattedShiftName(item.StartTime, item.EndTime),
                    designationId: item.DesignationId,
                    employeeId: item.EmployeeId,
                    eventId: item.Id
                });
            });

            var empDropDown = document.getElementById('employeeDropdown').ej2_instances[0];
            empDropDown.dataSource = employeeNamesList;
            empDropDown.value = null;
            empDropDown.dataBind();

            var shiftDropDown = document.getElementById('shiftDropdown').ej2_instances[0];
            shiftDropDown.dataSource = [];
            shiftDropDown.value = null;
            shiftDropDown.dataBind();

            updateSwapButtonState(false); // Disable until shift selected
            //to show the dialog template
           document.getElementById('modalDialog').ej2_instances[0].show();
        }
        function getFormattedShiftName(start, end) {
            return intl.formatDate(new Date(start), { skeleton: 'MMMd' }) + ' ' +
                   getDayString(start) + ' ' +
                   getShortTimeString(start) + ' - ' +
                   getShortTimeString(end);
        }

        function onCellClick(args) {
            args.cancel = true;
        }

        function onEventClick(args) {
            if (args.event && args.event.IsReadonly) {
                args.cancel = true; // Prevent default popup/edit
            }
        }

        function onActionComplete(args) {
            if (args.requestType === 'viewNavigate' || args.requestType === 'dateNavigate') {
                const agendaContentElement = document.querySelector('.e-table-wrap.e-agenda-view .e-schedule-table .e-content-wrap');
                if (agendaContentElement) {
                    const agendaToolbarHeight = 60;
                    const currentHeight = parseFloat(getComputedStyle(agendaContentElement).height);
                    agendaContentElement.style.height = (currentHeight - agendaToolbarHeight) + 'px';
                }
            }
        }
        // Create an instance of Syncfusion's Internationalization
        var intl = new ej.base.Internationalization();

        function getTimeString(value) {
            return intl.formatDate(new Date(value), { skeleton: 'h' });
        }

            // Short Time String (e.g., "4:30 PM")
        function getShortTimeString(value) {
            return intl.formatDate(new Date(value), { type: 'time', skeleton: 'short' });
        }

        // Day String (e.g., "Mon", "Tue")
        function getDayString(value) {
            return intl.formatDate(new Date(value), { skeleton: 'E' });
        }

        function getEmployeeName(data) {
            return data.Subject || data.Name || "Unknown";
        }

        function getInitial(subject) {
            return subject ? subject.charAt(0).toUpperCase() : '?';
        }

        function getRole(roleId) {
            var role = roles.find(r => r.Id === roleId);
            return role ? role.Role : "No Role";
        }

        function getDesignation(designationId) {
            var designation = designations.find(d => d.Id === designationId);
            return designation ? designation.Name : "No Designation";
        }

        function getLeaveTag(description) {

            return description && description.toLowerCase().includes('leave') ? ' - On Leave' : '';
        }
    </script>
}

@*custom code start*@
@section Meta {
    <meta name="description" content="This example demonstrates the Event Shift Managementin ASP.NET Core Scheduler control. Explore here for more details." />
                }


@section ActionDescription {
    <div id="action-description">
        <p>
            This demo shows efficient employee shift management using the Scheduler, including shift scheduling, swapping, highlighting staff unavailability,
            and seamlessly assigning leave replacements using drag-and-drop.
        </p>
    </div>

}

@section Description {
    <div id="description">
        <p>In this demo, employees are categorized by roles (Doctors, nurses, and support staff) and designations, with two daily shifts: Morning (7 AM – 3 PM) and Evening (3 PM – 11 AM). Past shifts are disabled for clarity.</p>
        <p>
            <strong>Shift Swapping</strong>
        </p>
        <p>Shifts can be swapped between employees with the same designation using the swap request icon. The updated shift is highlighted with a swap icon, and details are available in the quick info popup.</p>
        <p>
            <strong>Leave Replacement</strong>
        </p>
        <p>To cover leave, drag and drop available staff from the same designation. The appointment updates with a replacement icon, and details appear in the quick info popup.</p>
        <p>
            <strong>Filtering</strong>
        </p>
        <p>Filter shifts by role or employee name in the agenda view to check staff availability and for shift management.</p>
    </div>
}
@section Title {
    <title>ASP.NET Core Scheduler Event Shift Management Example - Syncfusion Demos </title>
                }
@section Header {
    <h1 class='sb-sample-text'>Example of Event Shift Management in ASP.NET Core Scheduler Control</h1>
                }
@*custom code end*@