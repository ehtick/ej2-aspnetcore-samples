@page

@using Syncfusion.EJ2;
@using Syncfusion.EJ2.CircularGauge
@section Meta{
    <meta name="description" content="This example demonstrates the Semi-circular Gauge in ASP.NET Core CircularGauge control. Explore here for more details." />
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample shows how to create semi-circular or quarter-circular gauges by modifying a circular gauge with different start and end angles.
        </p>
    </div>

}
@section Description{
    <div id="description">
        <p>
            In this example, a circular gauge is rendered with different start and end angles to create semi-circular or quarter-circular gauges. The radius, start angle, end angle, and center position of the circular gauge can all be customized using the options in the properties panel.
        </p>
        <p>
            More information on the semi-circular or quarter-circular gauges can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/circular-gauge/gauge-appearance#radius-calculation-based-on-angles" aria-label="documentation section">documentation section</a>.
        </p>
    </div>
}
@section ControlsSection{
    @{
        var labelFont = new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { FontFamily = "inherit", FontWeight = "normal"};
        var style = new CircularGaugeLabel() { Format = "{value}%", Position = Position.Outside, Font = labelFont, AutoAngle = true};
    }
    <div class="col-lg-8 control-section">
        <div id="gauge">
            <ejs-circulargauge id="circular" load="gaugeLoad" background="transparent">
                <e-circulargauge-axes>
                    <e-circulargauge-axis startAngle="270" endAngle="90" minimum="0" maximum="100" radius="100%" hideIntersectingLabel="true" labelStyle="style">
                        <e-axis-linestyle width="3"></e-axis-linestyle>
                        
                        <e-axis-majorticks position="Inside" width="2" height="15" interval="10"></e-axis-majorticks>
                        <e-axis-minorticks position="Inside" height="8" width="1" interval="2"></e-axis-minorticks>
                        <e-circulargauge-pointers>
                            <e-circulargauge-pointer value="30" radius="75%" pointerWidth=7>
                                <e-pointer-animation enable="false"></e-pointer-animation>
                                <e-pointer-cap radius="8">
                                </e-pointer-cap>
                                <e-pointer-needletail length="13%" />
                            </e-circulargauge-pointer>
                        </e-circulargauge-pointers>
                    </e-circulargauge-axis>
                </e-circulargauge-axes>
            </ejs-circulargauge>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%;">
            <tr style="height: 50px">
                <td>
                    <div style="font-size:14px">Start Angle </div>
                </td>
                <td>
                    <div>
                        <input type="range" id="start" value="270" min="0" max="360" style="width: 70%;" />
                    </div>
                </td>
                <td style="width: 10%;padding-top: 10px;text-align: center;">
                    <span id='rangeStart' style="margin-left: -35px;font-size:14px">270째</span>
                </td>
            </tr>

            <tr style="height: 50px">
                <td>
                    <div style="font-size:14px">End Angle</div>
                </td>
                <td>
                    <div>
                        <input type="range" id="end" value="90" min="0" max="360" style="width: 70%;" />
                    </div>
                </td>
                <td style="width: 10%;padding-top: 10px;text-align: center;">
                    <span id='rangeEnd' style="margin-left: -35px;font-size:14px;">90째</span>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div style="font-size:14px">Radius</div>
                </td>
                <td>
                    <div>
                        <input type="range" id="radius" value="100" min="30" max="100" style="width: 70%;" />
                    </div>
                </td>
                <td style="width: 10%;padding-top: 10px;text-align: center;">
                    <span id='radius1' style="margin-left: -35px;font-size:14px">100%</span>
                </td>
            </tr>
            <tr>
                <td style="width: 40%">
                    <div class="property-text" style="margin-top: 10px;font-size:14px"> Radius based on angle</div>
                </td>
                <td style="width: 40%;">
                    <div style="margin-left:-10px;">
                        <ejs-checkbox id="angle" checked="false" change="onChange" style="margin-top: 20px; margin-left: 15px"></ejs-checkbox>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div style="margin-top: 10px;font-size:14px">Center X</div>
                </td>
                <td>
                    <div>
                        <input type="range" id="centerX" value="50" min="0" max="100" style="width: 70%; margin-top: 10px;" />
                    </div>
                </td>
                <td style="width: 10%;padding-top: 20px;text-align: center;">
                    <span id='center1' style="margin-left: -35px;font-size:14px;">50%</span>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div style="margin-top: 10px;font-size:14px">Center Y</div>
                </td>
                <td>
                    <div>
                        <input type="range" id="centerY" value="50" min="0" max="100" style="width: 70%; margin-top: 10px;" />
                    </div>
                </td>
                <td style="width: 10%;padding-top: 20px;text-align: center;">
                    <span id='center2' style="margin-left: -35px;font-size:14px;">50%</span>
                </td>
            </tr>
            <tr>
                <td>
                    <div id="enablehide" style="margin-top: 20px;font-size:14px;"> Hide Intersecting Labels</div>
                </td>
                <td>
                    <div style="margin-left: -10px;margin-top: 10px">
                        <ejs-checkbox id="hidelabel" checked="true" change="onHideLabelChange"></ejs-checkbox>
                    </div>
                </td>
            </tr>
        </table>
    </div>
}
<style>
    .property-panel-header {
        margin-left: 10px;
    }
    .e-view.fluent2 #property .e-checkbox-wrapper, .e-view.fluent2-dark #property .e-checkbox-wrapper, .e-view.fluent2-highcontrast #property .e-checkbox-wrapper {
        padding-left: 0px;
    }
</style>
<script>
    var circulargauge;
    window.gaugeLoad = function (args) {
        @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        circulargauge = args.gauge;
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');
        @* custom code end *@
    }
    var highlightCheckBox;
    function onChange(args) {
        var centerX = document.getElementById('centerX');
        var centerY = document.getElementById('centerY');
        if (args.checked) {
            circulargauge.centerX = null;
            circulargauge.centerY = null;
            circulargauge.moveToCenter = true;
            centerX.disabled = true;
            centerY.disabled = true;
        } else {
            circulargauge.centerX = centerX.value + '%';
            circulargauge.centerY = centerY.value + '%';
            centerX.disabled = false;
            centerY.disabled = false;
            circulargauge.moveToCenter = false;
        }
        highlightCheckBox = args.checked;
        circulargauge.refresh();
    }

    function onHideLabelChange(args) {
        circulargauge.axes[0].hideIntersectingLabel = args.checked;
        circulargauge.refresh();
    }


    window.onload = function () {
        document.getElementById('start').onpointermove = document.getElementById('start').ontouchmove =
            document.getElementById('start').onchange = () => {
         var min = parseInt((document.getElementById('start')).value, 10);
        document.getElementById('rangeStart').innerHTML = min + '째';
        circulargauge.axes[0].startAngle = min;
        circulargauge.refresh();
    };
    document.getElementById('end').onpointermove = document.getElementById('end').ontouchmove =
    document.getElementById('end').onchange = () => {
        var max = parseInt((document.getElementById('end')).value, 10);
        document.getElementById('rangeEnd').innerHTML = max + '째';
        circulargauge.axes[0].endAngle = max;
        circulargauge.refresh();
    };
    document.getElementById('radius').onpointermove = document.getElementById('radius').ontouchmove =
    document.getElementById('radius').onchange = () => {
        var max = parseInt((document.getElementById('radius')).value, 10);
        document.getElementById('radius1').innerHTML = max + '%';
        circulargauge.axes[0].radius = '' + max + '%';
        circulargauge.refresh();
    };
    document.getElementById('centerX').onpointermove = document.getElementById('centerX').ontouchmove =
    document.getElementById('centerX').onchange = () => {
        if (!highlightCheckBox) {
            var max = parseInt((document.getElementById('centerX')).value, 10);
            document.getElementById('center1').innerHTML = max + '%';
            circulargauge.centerX = '' + max + '%';
            circulargauge.refresh();
        }
    };
    document.getElementById('centerY').onpointermove = document.getElementById('centerY').ontouchmove =
    document.getElementById('centerY').onchange = () => {
        if (!highlightCheckBox) {
            var max = parseInt((document.getElementById('centerY')).value, 10);
            document.getElementById('center2').innerHTML = max + '%';
            circulargauge.centerY = '' + max + '%';
            circulargauge.refresh();
        }
    };

    };
</script>
@section Title{
                    <title>ASP.NET Core CircularGauge Semi-circular Gauge Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Semi-circular Gauge in ASP.NET Core CircularGauge Control</h1>
                }