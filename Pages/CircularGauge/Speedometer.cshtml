@page

@using Syncfusion.EJ2;
@using Syncfusion.EJ2.CircularGauge
@section Meta{
    <meta name="description" content="This example demonstrates the Speedometer in ASP.NET Core CircularGauge control. Explore here for more details." />
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample depicts the appearance of a speedometer rendered using the circular gauge. The pointer value is dynamically updated with random values in this case.
        </p>
    </div>

}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to make a circular gauge look like a speedometer. Using the options in the properties panel, a gap can be added between ranges or ranges can be combined to form a single range.
        </p>
        <p>
            More information on the circular gauge can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/circular-gauge/getting-started" aria-label="Documentation" >Documentation</a> section.
        </p>
    </div>
}
@section ControlsSection{
    @{
        var labelFont = new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { FontFamily = "inherit", Size = "13px"  };
    }

   <script id='pointerValue' type="text/x-template">
    <div id='templateWrap'>
        <div class='annotation'>
            <div id='pointerannotation' style="width:90px;text-align:center;font-size:20px;font-family:Roboto">km/h</div>
        </div>
    </div>
</script>

    <div class="col-md-8 control-section">
        <ejs-circulargauge id="container" load="gaugeLoad" title="Speedometer" centerY="75%" loaded="onCreated" background="transparent">
            <e-circulargauge-titlestyle size="18px" fontFamily="inherit"></e-circulargauge-titlestyle>
            <e-circulargauge-axes>
                <e-circulargauge-axis startAngle="270" endAngle="90" minimum="0" maximum="120" radius="120%" labelStyle="@new CircularGaugeLabel{UseRangeColor=false, Position=Position.Outside, AutoAngle=true, Font=labelFont}">
                    <e-axis-linestyle width="0" color="#E0E0E0"></e-axis-linestyle>
                    <e-axis-majorticks width=0 color="transparent"></e-axis-majorticks>
                    <e-axis-minorticks width=0 color="transparent"></e-axis-minorticks>
                    <e-circulargauge-pointers>
                        <e-circulargauge-pointer value="40" radius="80%" color="#757575" pointerWidth=7>
                            <e-pointer-animation enable="false"></e-pointer-animation>
                            <e-pointer-cap radius="8" color="#757575">
                                <e-pointers-cap-border width=0></e-pointers-cap-border>
                            </e-pointer-cap>
                            <e-pointer-needletail length="15%" color="#757575" />
                        </e-circulargauge-pointer>
                    </e-circulargauge-pointers>
                    <e-circulargauge-ranges>
                        <e-circulargauge-range start=0 end=20 color='#82b944' radius="102%" startWidth="5" endWidth="10"></e-circulargauge-range>
                        <e-circulargauge-range start=20 end=40 color='#a1cb43' radius="102%" startWidth="10" endWidth="15"></e-circulargauge-range>
                        <e-circulargauge-range start=40 end=60 color='#ddec12' radius="102%" startWidth="15" endWidth="20"></e-circulargauge-range>
                        <e-circulargauge-range start=60 end=80 color='#ffbc00' radius="102%" startWidth="20" endWidth="25"></e-circulargauge-range>
                        <e-circulargauge-range start=80 end=100 color='#ff6000' radius="102%" startWidth="25" endWidth="30"></e-circulargauge-range>
                        <e-circulargauge-range start=100 end=120 color='red' radius="102%" startWidth="30" endWidth="35"></e-circulargauge-range>
                    </e-circulargauge-ranges>
                    <e-circulargauge-annotations>
                        <e-circulargauge-annotation content="#pointerValue" angle="0" zIndex="1.0" radius="30%"></e-circulargauge-annotation>
                    </e-circulargauge-annotations>
                </e-circulargauge-axis>
            </e-circulargauge-axes>
        </ejs-circulargauge>
    </div>
       <div class="col-md-4 property-section">
    <table id="property" title="Properties" style="width: 100%; margin-left: -10px">
        <tbody>
            <tr>
                <td>
                    <div class="property-text" style="margin-top: 10px; font-size: 14px"> Combine Ranges</div>
                </td>
                <td>
                    <div style="margin-left: 20px; margin-top: 5px">
                        <ejs-checkbox id="combineRange" change="combineRangeChange" />
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div class="property-text" style="margin-top: 10px; font-size: 14px"> Gap Between Ranges</div>
                </td>
                <td>
                    <div style="margin-left: 20px">
                        <ejs-checkbox id="range" change="rangeChange" />
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>
<svg style="height:0px;width:0px">
    <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#82b944;stop-opacity:1" />
            <stop offset="50%" style="stop-color:rgb(255,255,0);stop-opacity:1" />
            <stop offset="100%" style="stop-color:red;stop-opacity:1" />
        </linearGradient>
    </defs>
</svg>
<script type="text/javascript">
    var circulargauge;
    function onCreated() {
        circulargauge = document.getElementById('container').ej2_instances[0];
    }
    function gaugeLoad(sender) {
        @* custom code start *@
        var selectedTheme = themeName ? themeName : 'Material';
        sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() +
                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');
        @* custom code end *@
        circulargauge = sender.gauge;
    }
    var gaugeInterval = setInterval(function () {
        var newVal = circulargauge.axes[0].pointers[0].value + (Math.floor(Math.random() * (10 - (-10))) - 10);
        if (newVal <= 0) {
            newVal = 5;
        }
        if (document.getElementById('container')) {
            circulargauge.isProtectedOnChange = true;
            circulargauge.axes[0].pointers[0].animation.enable = true;
            circulargauge.setPointerValue(0, 0, newVal);
            if (!ej.base.isNullOrUndefined(document.getElementById('pointerannotation'))) {
                document.getElementById('pointerannotation').innerHTML = newVal.toString() + ' km/h';
            }
        }
        else {
            clearInterval(this.gaugeInterval);
        }
    }, 1000);
    
    function combineRangeChange(args) {
        var rangeCheckbox = document.getElementById("range").ej2_instances[0];
        if (args.checked) {
            rangeCheckbox.disabled = true;
            circulargauge.axes[0].ranges[0].start = 0;
            circulargauge.axes[0].ranges[0].end = 120;
            circulargauge.axes[0].ranges[0].startWidth = 5;
            circulargauge.axes[0].ranges[0].endWidth = 35;
            circulargauge.axes[0].ranges[0].color = 'url(#grad1)';
            circulargauge.axes[0].ranges[1].start = null;
            circulargauge.axes[0].ranges[1].end = null;
            circulargauge.axes[0].ranges[1].startWidth = '';
            circulargauge.axes[0].ranges[1].endWidth = '';
            circulargauge.axes[0].ranges[1].color = '';
            circulargauge.axes[0].ranges[2].start = null;
            circulargauge.axes[0].ranges[2].end = null;
            circulargauge.axes[0].ranges[2].startWidth = '';
            circulargauge.axes[0].ranges[2].endWidth = '';
            circulargauge.axes[0].ranges[2].color = '';
            circulargauge.axes[0].ranges[3].start = null;
            circulargauge.axes[0].ranges[3].end = null;
            circulargauge.axes[0].ranges[3].startWidth = '';
            circulargauge.axes[0].ranges[3].endWidth = '';
            circulargauge.axes[0].ranges[3].color = '';
            circulargauge.axes[0].ranges[4].start = null;
            circulargauge.axes[0].ranges[4].end = null;
            circulargauge.axes[0].ranges[4].startWidth = '';
            circulargauge.axes[0].ranges[4].endWidth = '';
            circulargauge.axes[0].ranges[4].color = '';
            circulargauge.axes[0].ranges[5].start = null;
            circulargauge.axes[0].ranges[5].end = null;
            circulargauge.axes[0].ranges[5].startWidth = '';
            circulargauge.axes[0].ranges[5].endWidth = '';
            circulargauge.axes[0].ranges[5].color = '';
            circulargauge.axes[0].pointers[0].animation.enable = false;
            circulargauge.refresh();
        }
        else {
            rangeCheckbox.disabled = false;
            circulargauge.axes[0].ranges[0].start = 0;
            circulargauge.axes[0].ranges[0].end = 20;
            circulargauge.axes[0].ranges[0].startWidth = 5;
            circulargauge.axes[0].ranges[0].endWidth = 10;
            circulargauge.axes[0].ranges[0].color = '#82b944';
            circulargauge.axes[0].ranges[1].start = 20;
            circulargauge.axes[0].ranges[1].end = 40;
            circulargauge.axes[0].ranges[1].startWidth = 10;
            circulargauge.axes[0].ranges[1].endWidth = 15;
            circulargauge.axes[0].ranges[1].color = '#a1cb43';
            circulargauge.axes[0].ranges[2].start = 40;
            circulargauge.axes[0].ranges[2].end = 60;
            circulargauge.axes[0].ranges[2].startWidth = 15;
            circulargauge.axes[0].ranges[2].endWidth = 20;
            circulargauge.axes[0].ranges[2].color = '#ddec12';
            circulargauge.axes[0].ranges[3].start = 60;
            circulargauge.axes[0].ranges[3].end = 80;
            circulargauge.axes[0].ranges[3].startWidth = 20;
            circulargauge.axes[0].ranges[3].endWidth = 25;
            circulargauge.axes[0].ranges[3].color = '#ffbc00';
            circulargauge.axes[0].ranges[4].start = 80;
            circulargauge.axes[0].ranges[4].end = 100;
            circulargauge.axes[0].ranges[4].startWidth = 25;
            circulargauge.axes[0].ranges[4].endWidth = 30;
            circulargauge.axes[0].ranges[4].color = '#ff6000';
            circulargauge.axes[0].ranges[5].start = 100;
            circulargauge.axes[0].ranges[5].end = 120;
            circulargauge.axes[0].ranges[5].startWidth = 30;
            circulargauge.axes[0].ranges[5].endWidth = 35;
            circulargauge.axes[0].ranges[5].color = 'red';
            circulargauge.axes[0].pointers[0].animation.enable = false;
            circulargauge.refresh();
        }
    };
    function rangeChange(args) {
        if (args.checked) {
            circulargauge.axes[0].rangeGap = 5;
        }
        else {
            circulargauge.axes[0].rangeGap = null;
        }
        circulargauge.axes[0].pointers[0].animation.enable = false;
        circulargauge.refresh();
    };
</script>
}
@section Title{
                    <title>ASP.NET Core CircularGauge Speedometer Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Speedometer in ASP.NET Core CircularGauge Control</h1>
                }