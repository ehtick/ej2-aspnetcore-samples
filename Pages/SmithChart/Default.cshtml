@page
@using Syncfusion.EJ2.Charts;

@section ControlsSection{
    @{

     }
        <div class="col-lg-9 control-section">
        <div id="container" class="row">
            <ejs-smithchart loaded="smithLoaded" load="smithLoad" id="container">
                <e-smithchart-title visible="true" text="Transmission details"></e-smithchart-title>
                <e-smithchart-legendsettings visible="true" shape="Circle"></e-smithchart-legendsettings>
                <e-smithchart-smithchartseriescollection>
                    <e-smithchart-smithchartseries name="Transmission1" enableAnimation="true"></e-smithchart-smithchartseries>
                    <e-smithchart-smithchartseries name="Transmission2" enableAnimation="true"></e-smithchart-smithchartseries>
                </e-smithchart-smithchartseriescollection>
            </ejs-smithchart>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" style="width:100%" title="Properties">
            <tbody>
                <tr style="height: 30px">
                    <td style="width: 50%">
                        Render Type
                    </td>
                    <td style="width: 50%">
                        <select id="rendering" style="width: 90px; height: 20px">
                            <option value="Impedance">Impedance</option>
                            <option value="Admittance">Admittance</option>
                        </select>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script src="~/scripts/SmithChart/theme-color.js"></script>
    <script type="text/javascript">
        function smithLoad(args) {
            loadSmithChartTheme(args);
        }
        window.onload = function () {
        window.renderingType = new ej.dropdowns.DropDownList({
            index: 0,
            width: 120,
            change: function (args) {
                window.smithchart.renderType = args.value;
                window.smithchart.refresh();
            }
        });
        window.renderingType.appendTo('#rendering');
        };

        function smithLoaded(args) {
            window.smithchart = args.smithchart;
            args.smithchart.series[0].marker = {
                shape: 'Circle',
                visible: true,
                border: {
                    width: 2,
                }
            };
            args.smithchart.series[0].tooltip.visible = true;
            args.smithchart.series[1].tooltip.visible = true;
            args.smithchart.series[0].points = [
                { resistance: 10, reactance: 25 }, { resistance: 8, reactance: 6 },
                { resistance: 6, reactance: 4.5 }, { resistance: 4.5, reactance: 2 },
                { resistance: 3.5, reactance: 1.6 }, { resistance: 2.5, reactance: 1.3 },
                { resistance: 2, reactance: 1.2 }, { resistance: 1.5, reactance: 1 },
                { resistance: 1, reactance: 0.8 }, { resistance: 0.5, reactance: 0.4 },
                { resistance: 0.3, reactance: 0.2 }, { resistance: 0, reactance: 0.15 },
            ];
            args.smithchart.series[1].marker = {
                shape: 'Circle',
                visible: true,
                border: {
                    width: 2,
                }
            };
            args.smithchart.series[1].points = [
                { resistance: 20, reactance: -50 }, { resistance: 10, reactance: -10 },
                { resistance: 9, reactance: -4.5 }, { resistance: 8, reactance: -3.5 },
                { resistance: 7, reactance: -2.5 }, { resistance: 6, reactance: -1.5 },
                { resistance: 5, reactance: -1 }, { resistance: 4.5, reactance: -0.5 },
                { resistance: 3.5, reactance: 0 }, { resistance: 2.5, reactance: 0.4 },
                { resistance: 2, reactance: 0.5 }, { resistance: 1.5, reactance: 0.5 },
                { resistance: 1, reactance: 0.4 }, { resistance: 0.5, reactance: 0.2 },
                { resistance: 0.3, reactance: 0.1 }, { resistance: 0, reactance: 0.05 },
            ];
            args.smithchart.loaded = null;
            args.smithchart.series[0].enableAnimation=false;
            args.smithchart.series[1].enableAnimation=false;
            args.smithchart.refresh();
        }
    </script>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET Core SmithChart control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample visualizes two transmissions in Smith chart. Rendering of smith chart can be changed by <code>Render Type</code> in properties panel.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render a smith chart with multiple series. Enabled legend to denote the series in smith chart.
        </p>
        <p>
            Tooltip is enabled in this example. To see the tooltip in action, hover the mouse over a data point or tap a data point in touch enabled devices
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core SmithChart Default Functionalities Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default Functionalities in ASP.NET Core SmithChart Control</h1>
                }