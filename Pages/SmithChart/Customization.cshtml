@page
@using Syncfusion.EJ2.Charts;

@section ControlsSection{
<div class="col-lg-9 control-section">
    <div id="container" class="row">
            <ejs-smithchart id="container" load="load" radius="1">
            <e-smithchart-title text="Impedance Transmission" enableTrim="true" maximumWidth="200" visible="true"></e-smithchart-title>
            <e-smithchart-legendsettings visible="true" position="Top" shape="Circle"></e-smithchart-legendsettings>
            <e-smithchart-smithchartseriescollection>
                <e-smithchart-smithchartseries name="Transmission1" width="2" enableSmartLabels="false" fill="#0F94C4">
                    <e-smithchartseries-marker visible="true" shape="rectangle"></e-smithchartseries-marker>
                    <e-smithchartseries-tooltip visible="true"></e-smithchartseries-tooltip>
                </e-smithchart-smithchartseries>
                <e-smithchart-smithchartseries name="Transmission2" width="2" enableSmartLabels="false" fill="#EE0C88">
                    <e-smithchartseries-marker visible="true" shape="rectangle"></e-smithchartseries-marker>
                    <e-smithchartseries-tooltip visible="true"></e-smithchartseries-tooltip>
                </e-smithchart-smithchartseries>
            </e-smithchart-smithchartseriescollection>
        </ejs-smithchart>
    </div>
</div>
    <div class="col-lg-3 property-section">
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>
        <table id="property" style="width:100%" title="Properties">
            <tbody>
                <tr style="height: 35px">
                    <td style="width: 70%" id="radius1">
                        Radius<span>&nbsp;&nbsp;&nbsp;10</span>
                    </td>
                    <td style="width: 70%">
                        <div>
                            <div id="radius"></div>
                        </div>
                    </td>
                </tr>
                <tr style="height: 35px">
                    <td style="width: 70%">
                        Marker
                    </td>
                    <td style="width: 50%">
                        <input type="checkbox" name="marker" id="marker">
                    </td>
                </tr>
                <tr style="height: 35px">
                    <td style="width: 70%">
                        Data Label
                    </td>
                    <td style="width: 50%">
                        <input type="checkbox" name="datalabel" id="datalabel">
                    </td>
                </tr>
                <tr style="height: 35px">
                    <td style="width: 70%">
                        Animation
                    </td>
                    <td style="width: 50%">
                        <input type="checkbox" name="high" id="animate">
                    </td>
                </tr>
                <tr style="height: 35px">
                    <td style="width: 70%">
                        Tooltip
                    </td>
                    <td style="width: 50%">
                        <input type="checkbox" name="high" id="tooltip" checked>
                    </td>
                </tr>
                <tr style="height: 35px">
                    <td style="width: 70%">
                        Legend
                    </td>
                    <td style="width: 50%">
                        <input type="checkbox" name="high" id="legend" checked>
                    </td>
                </tr>
                <tr style="height: 35px">
                    <td style="width: 70%" class="property-text">
                        Legend Position
                    </td>
                    <td style="width: 50%">
                        <select id="legend1" style="width: 50px; height: 20px">
                            <option value="top">Top</option>
                            <option value="bottom">Bottom</option>
                            <option value="right">Right</option>
                            <option value="left">Left</option>
                        </select>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        .smithinput {
            opacity: 1 !important;
            position: relative !important;
            height: 15px !important;
            width: 15px !important;
        }

        .property-text {
            font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif" !important;
            font-size: 13px !important;
            font-weight: 400 !important;
        }

        #radius > * {
            padding: 0px !important;
        }

        label {
            height: 32px !important;
        }
    </style>
    <script src="~/scripts/SmithChart/theme-color.js"></script>
    <script>
        var smithchart;
        function load(args) {
            loadSmithChartTheme(args);
            args.smithchart.horizontalAxis.minorGridLines.visible = true;
            args.smithchart.radialAxis.minorGridLines.visible = true;
            args.smithchart.series[0].points = [
                { resistance: 10, reactance: 25 }, { resistance: 8, reactance: 6 },
                { resistance: 6, reactance: 4.5 }, { resistance: 4.5, reactance: 4 },
                { resistance: 3.5, reactance: 3 }, { resistance: 2.5, reactance: 2 },
                { resistance: 2, reactance: 1.5 }, { resistance: 1.5, reactance: 1.25 },
                { resistance: 1, reactance: 0.9 }, { resistance: 0.5, reactance: 0.6 },
                { resistance: 0.3, reactance: 0.4 }, { resistance: 0, reactance: 0.15 },
            ];
            args.smithchart.series[0].marker = {
                border: {
                    width: 2,
                }
            };
            args.smithchart.series[1].points = [
                { resistance: 20, reactance: -50 }, { resistance: 10, reactance: -10 },
                { resistance: 9, reactance: -4.5 }, { resistance: 8, reactance: -3.5 },
                { resistance: 7, reactance: -2.5 }, { resistance: 6, reactance: -1.5 },
                { resistance: 5, reactance: -1 }, { resistance: 4.5, reactance: -0.8 },
                { resistance: 3.5, reactance: -0.8 }, { resistance: 2.5, reactance: -0.4 },
                { resistance: 2, reactance: -0.2 }, { resistance: 1.5, reactance: 0 },
                { resistance: 1, reactance: 0.1 }, { resistance: 0.5, reactance: 0.2 },
                { resistance: 0.3, reactance: 0.15 }, { resistance: 0, reactance: 0.05 },
            ];
            args.smithchart.series[1].marker = {
                border: {
                    width: 2,
                }
            };
            smithchart = args.smithchart;
        }
        var sliderChange;
        var slider = new ej.inputs.Slider({
            value: 1, type: 'MinRange',
            change: sliderChange,
            max: 1, min: 0, step: 0.1
        }, '#radius');
        document.getElementById('radius1').innerHTML = 'Radius <span> ' + 1;
        slider.change = sliderChange = function (e) {
            smithchart.radius = e.value;
            document.getElementById('radius1').innerHTML = 'Radius <span> ' + e.value;
            smithchart.refresh();
        };
        var markerChange;
        var markerCheckBox = new ej.buttons.CheckBox({
            change: markerChange, checked: true
        }, '#marker');
        var datalabelChange;
        var datalabelCheckBox = new ej.buttons.CheckBox({
            change: markerChange
        }, '#datalabel');
        var animateChange;
        var animateCheckBox = new ej.buttons.CheckBox({
            change: markerChange
        }, '#animate');
        var tooltipChange;
        var tooltipCheckBox = new ej.buttons.CheckBox({
            change: markerChange, checked: true
        }, '#tooltip');
        var legendChange;
        var legendCheckBox = new ej.buttons.CheckBox({
            change: markerChange, checked: true
        }, '#legend');
        markerCheckBox.change = markerChange = function (e) {
            var boolean = e.checked;
            if (boolean) {
                smithchart.series[0].marker.visible = true;
                smithchart.series[1].marker.visible = true;
            }
            else {
                smithchart.series[0].marker.visible = false;
                smithchart.series[1].marker.visible = false;
            }
            smithchart.refresh();
        };
        datalabelCheckBox.change = datalabelChange = function (e) {
            var boolean = e.checked;
            if (boolean) {
                smithchart.series[0].marker.dataLabel.visible = true;
                smithchart.series[1].marker.dataLabel.visible = true;
            }
            else {
                smithchart.series[0].marker.dataLabel.visible = false;
                smithchart.series[1].marker.dataLabel.visible = false;
            }
            smithchart.refresh();
        };
        animateCheckBox.change = animateChange = function (e) {
            var boolean = e.checked;
            if (boolean) {
                smithchart.series[0].enableAnimation = true;
                smithchart.series[1].enableAnimation = true;
            }
            else {
                smithchart.series[0].enableAnimation = false;
                smithchart.series[1].enableAnimation = false;
            }
            smithchart.refresh();
        };
        tooltipCheckBox.change = tooltipChange = function (e) {
            var boolean = e.checked;
            if (boolean) {
                smithchart.series[0].tooltip.visible = true;
                smithchart.series[1].tooltip.visible = true;
            }
            else {
                smithchart.series[0].tooltip.visible = false;
                smithchart.series[1].tooltip.visible = false;
            }
            smithchart.refresh();
        };
        legendCheckBox.change = legendChange = function (e) {
            var boolean = e.checked;
            if (boolean) {
                smithchart.legendSettings.visible = true;
                mode.enabled = true;
            }
            else {
                smithchart.legendSettings.visible = false;
                mode.enabled = false;
            }
            smithchart.refresh();
        };
        var mode = new ej.dropdowns.DropDownList({
            index: 0,
            width: 90,
            change: function () {
                var element = mode.value.toString();
                smithchart.legendSettings.position = element;
                smithchart.refresh();
            }
        });
        mode.appendTo('#legend1');
    </script>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Customization in ASP.NET Core SmithChart control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the options available for customizing the smith chart.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can customize the smith chart with several options. Tooltip is enabled in this example. To see the tooltip in action, hover the mouse over a data point or tap a data point in touch enabled devices.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core SmithChart Customization Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Customization in ASP.NET Core SmithChart Control</h1>
                }