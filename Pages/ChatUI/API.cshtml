@page
@model EJ2CoreSampleBrowser.Pages.ChatUI.APIModel
@using Syncfusion.EJ2

@section ControlsSection {
    <div class="col-lg-8 control-section sb-property-border">
        <div class="api-chatui">
            <ejs-chatui id="chatui" headerText="Design Community" headerIconCss="chat_header_icon" showTimeBreak=true
                        timeStampFormat="MM/dd hh:mm a" created="onCreated" mentionUsers="@Model.MentionUsers">
                <e-chatui-messagetoolbarsettings items="@Model.MessageToolbarItems" itemClicked="onMessageToolbarClicked"></e-chatui-messagetoolbarsettings>
                <e-chatui-user id="admin" user="Alice"></e-chatui-user>
                 <e-chatui-messages>
                    @foreach (var message in Model.CommunityMessagedata)
                    {
                        <e-chatui-message text="@message.Text" author="@message.Author" timeStamp="@message.TimeStamp"></e-chatui-message>
                    }
                </e-chatui-messages>
            </ejs-chatui>
        </div>
    </div>
    <div class="col-lg-4 property-section chat-property-section">
        <div class="property-panel-header"> Properties </div>
        <div class="property-panel-content">
            <table class="property-panel-table">
                <tbody>
                    <tr>
                        <td> Timestamp format </td>
                        <td style="padding-right: 10px">
                            <ejs-dropdownlist id="chat_dateformats" dataSource="@Model.TimeStampFormatOptions" placeholder="Format" width="180px" value="@Model.DDBListValue" change="onTimeStampFormatChange"></ejs-dropdownlist>
                        </td>
                    </tr>
                    <tr>
                        <td> <div>Show timeStamp</div> </td>
                        <td style="padding-right: 10px">
                            <ejs-switch id="chatTimestamp" checked=true change="onTimeStampSwitchChange"></ejs-switch>
                        </td>
                    </tr>
                    <tr>
                        <td> <div>Show timeBreak</div> </td>
                        <td style="padding-right: 10px">
                            <ejs-switch id="chatTimebreak" checked=true change="onTimeBreakSwitchChange"></ejs-switch>
                        </td>
                    </tr>
                    <tr>
                        <td> <div>Show header</div> </td>
                        <td style ="padding-right: 10px">
                            <ejs-switch id="chatHeader" checked=true change="onHeaderSwitchChange"></ejs-switch>
                        </td>
                    </tr>
                    <tr>
                        <td> <div>Show footer</div> </td>
                        <td style="padding-right: 10px">
                            <ejs-switch id="chatFooter" checked=true change="onFooterSwitchChange"></ejs-switch>
                        </td>
                    </tr>
                    <tr>
                        <td> <div>Compact mode</div> </td>
                        <td style="padding-right: 10px">
                            <ejs-switch id="compactMode" checked=false change="onCompactModeSwitchChange"></ejs-switch>
                        </td>
                    </tr>
                    <tr>
                        <td> <div>Typing users</div> </td>
                        <td style="padding-right: 10px">
                            <ejs-multiselect id="chat_typingUsers" dataSource="@Model.TypingUserOptions" placeholder="Typing users..." select="onTypingUsersSelect" removed="onTypingUsersRemove"></ejs-multiselect>
                        </td>
                    </tr>
                    <tr>
                        <td> <div>Mention users</div> </td>
                        <td style="padding-right: 10px">
                            <ejs-multiselect id="chat_mentionUsers" dataSource="@Model.MentionUserOptions" value="@Model.MentionUserValues" placeholder="Mention users..." select="onMentionUsersSelect" removed="onMentionUsersRemove"></ejs-multiselect>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}

@section PreScripts {
    <script>
        var chatUIObj;
        function onCreated() {
            chatUIObj = ej.base.getInstance(document.getElementById('chatui'), ejs.interactivechat.ChatUI);
        }

        function onTimeStampFormatChange(args) {
            chatUIObj.timeStampFormat = args.value.toString();
        }

        function onTimeStampSwitchChange(args) {
            chatUIObj.showTimeStamp = args.checked;
        }

        function onTimeBreakSwitchChange(args) {
            chatUIObj.showTimeBreak = args.checked;
        }

        function onHeaderSwitchChange(args) {
            chatUIObj.showHeader = args.checked;
        }

        function onFooterSwitchChange(args) {
            chatUIObj.showFooter = args.checked;
        }

        function onCompactModeSwitchChange(args) {
            chatUIObj.enableCompactMode = args.checked;
        }
        
        function onTypingUsersSelect(args) {
            const user = { user: args.itemData.value, avatarBgColor: '#87cefa' };
            if (['Laura', 'Charlie'].includes(args.itemData.value)) {
                user.avatarBgColor = args.itemData.value === 'Charlie' ? '#e6cdde' : '#dec287';
                user.avatarUrl = `./../css/chatui/images/${args.itemData.value.toLowerCase()}.png`;
            }
            chatUIObj.typingUsers = [...chatUIObj.typingUsers, user];
        }

         function onMentionUsersSelect(args) {
            const mentionUsers = {
                'Alice Brown': { user: 'Alice Brown', id: 'admin', avatarBgColor: '#87cefa', statusIconCss: 'e-icons e-user-busy' },
                'Michale Suyama': { user: 'Michale Suyama', id: 'user1', avatarBgColor: '#87cefa', statusIconCss: 'e-icons e-user-online' },
                'Charlie': { user: 'Charlie', id: 'user2', avatarBgColor: '#e6cdde', avatarUrl: './../css/chatui/images/charlie.png', statusIconCss: 'e-icons e-user-away' },
                'Janet': { user: 'Janet', id: 'user3', avatarBgColor: '#dec287', avatarUrl: './../css/chatui/images/janet.png', statusIconCss: 'e-icons e-user-offline' },
                'Jordan Peele': { user: 'Jordan Peele', id: 'user4', avatarBgColor: '#87cefa', statusIconCss: 'e-icons e-user-busy' }
            };
            const user = mentionUsers[args.itemData.value];
            chatUIObj.mentionUsers = [...chatUIObj.mentionUsers, user];
             chatUIObj.dataBind();
        }

        function onTypingUsersRemove(args) {
            chatUIObj.typingUsers = chatUIObj.typingUsers.filter(user => user.user !== args.itemData.value);
        }

        function onMentionUsersRemove(args) {
             chatUIObj.mentionUsers = chatUIObj.mentionUsers.filter(user => user.user !== args.itemData.value);
             chatUIObj.dataBind();
        }

        function onMessageToolbarClicked(args) {
            if (args.item.prefixIcon === "e-icons e-chat-forward") {
                var newMessageObj = {
                    id: 'chat-message-' + (chatUIObj.messages.length + 1).toString(),
                    isForwarded: true,
                    isPinned: args.message.isPinned,
                    author: args.message.author,
                    mentionUsers: args.message.mentionUsers,
                    text: args.message.text,
                    timeStamp: args.message.timeStamp,
                    timeStampFormat: args.message.timeStampFormat,
                    status: args.message.status,
                    replyTo: args.message.replyTo
                };
                chatUIObj.addMessage(newMessageObj);
            }
        }
    </script>
}

<style>
    .api-chatui {
        height: 500px;
        width: 60%;
        margin: 0 auto;
    }

    .api-chatui .chat_header_icon {
        background-image: url('./../css/chatui/images/public-event.png');
            background-color: unset;
    }

    .chat-property-section .property-panel-content td {
        padding: 10px 0px;
    }

    .chat-property-section .e-multiselect,
    .chat-property-section .e-multi-select-wrapper {
        padding-left: 0;
        padding-top: 0;
    }

    @@media only screen and (max-width: 850px) {
        .api-chatui {
            width: 80%;
        }
    }
</style>

@section Meta {
    <meta name="description" content="This example demonstrates the API's' in ASP.NET Core Chat UI control. Explore here for more details." />
}

@section ActionDescription {
    <div id="action-description">
        <p>This sample demonstrates the properties available in the Chat UI control, showcasing how various features can be customized through the property pane. It highlights the flexibility of the control, allowing users to adjust timestamps, headers, footers, time breaks, and more.</p>
    </div>
}

@section Description {
    <div id="description">
        <p>In this sample, the following APIs and properties are demonstrated for customization:</p>
        <ul>
            <li><code>timeStampFormat</code>: Allows users to change the timestamp format by selecting an option from the property pane.</li>
            <li><code>showTimeStamp</code>: Controls whether the timestamp is displayed in the chat, toggled via the property pane.</li>
            <li><code>showTimeBreak</code>: Enables or disables the display of time breaks in the chat interface.</li>
            <li><code>showHeader</code>: Lets users toggle the visibility of the chat header.</li>
            <li><code>showFooter</code>: Toggles the visibility of the chat footer.</li>
            <li><code>enableCompactMode</code>: Reduces spacing and left-aligns all messages to display more content within the visible chat area. </li>
            <li><code>typingUsers</code>: Allows users to manage the list of users who are typing, updated through the multi-select options in the property pane.</li>
            <li><code>mentionUsers</code>: Configurable list of users that can be tagged using <code>@@</code> in chat messages.</li>
            <li><code>statusIconCss</code>: Defines a CSS class for the status bar icon, with built-in styles for Online, Offline, Away, and Busy statuses, while allowing further customization.</li>
            <li><code>messageToolbarSettings</code>: Configures the toolbar that appears on individual messages, allowing customization such as copy, forward, reply, pin and delete. Supports adding, removing, or reordering toolbar items based on application needs.</li>
        </ul>
        <p>
            These properties can be adjusted via the property pane for a highly flexible and customizable chat experience.
        </p>
    </div>
}
