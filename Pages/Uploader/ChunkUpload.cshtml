@page

@using EJ2CoreSampleBrowser.Models
@using Syncfusion.EJ2
@{
    var asyncSettings = new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = "http://localhost:62928/api/FileUploader/Save", RemoveUrl = "http://localhost:62928/api/FileUploader/Remove", ChunkSize = 500000 };
    var data = new chunkValues().UploaderModel();
}

@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control_wrapper">
            <ejs-uploader id="UploadFiles" removing="onFileRemove" dropArea=".control-fluid" asyncSettings="@asyncSettings" maxFileSize="104857600" autoUpload="false"  chunkFailure ="onBeforeFailure" pausing="onPausing" resuming="onResuming">
            </ejs-uploader>
        </div>
    </div>

    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%;">
            <tr>
                <td class="left-side">Chunk Size :</td>
                <td style="padding-top: 10px">
                    <ejs-dropdownlist id="chunk" dataSource="@data" placeholder="Select chunk size" text="500 KB" popupHeight="220px" change="onChange">
                        <e-dropdownlist-fields text="text" value="chunkValue"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </td>
            </tr>
        </table>
    </div>
}

<style>
    .control_wrapper {
        max-width: 400px;
        margin: auto;
    }

    .e-upload {
        width: 100%;
        position: relative;
        margin-top: 15px;
    }

    .control_wrapper .e-upload .e-upload-drag-hover {
        margin: 0;
    }
</style>

@section PreScripts {
    <script>
        var dropElement = document.getElementsByClassName('control-fluid')[0];
        function onChange(args) {
            var uploadObj = document.getElementById("UploadFiles")
            uploadObj.ej2_instances[0].asyncSettings.chunkSize = parseInt(args.itemData.chunkValue);
        }
        var isInteraction = false;
         // to update flag variable value for automatic pause and resume
        function onPausing(args) {
            if (args.event !== null && !navigator.onLine) {
                isInteraction = true;
            }
            else {
                isInteraction = false;
            }
        }
        // to update flag variable value for automatic pause and resume
        function onResuming(args) {
            if (args.event !== null && !navigator.onLine) {
                isInteraction = true;
            }
            else {
                isInteraction = false;
            }
        }
        function onFileRemove(args) {
            args.postRawFile = false;
        }
        // to prevent triggering chunk-upload failure event and to pause uploading on network failure
        function onBeforeFailure(args) {
            args.cancel = !isInteraction;
            var uploadObj = document.getElementById('UploadFiles').ej2_instances[0];
            // interval to check network availability on every 500 milliseconds
            var clearTimeInterval = setInterval(function () {
                if (navigator.onLine && !ej.base.isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 4) {
                    uploadObj.resume(uploadObj.filesData);
                    clearSetInterval();
                }
                else {
                    if (!isInteraction && !ej.base.isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 3) {
                        uploadObj.pause(uploadObj.filesData);
                    }
                }
            }, 500);
            // clear Interval after when network is available.
            function clearSetInterval() {
                clearInterval(clearTimeInterval);
            }
        }

    </script>
}


@section ActionDescription{
    <div id="action-description">
        <p>
            This <a href="https://www.syncfusion.com/aspnet-core-ui-controls/file-upload"
        target="_blank" aria-label="Navigate to explore the Syncfusion ASP.NET Core File Upload">ASP.NET Core File Upload </a> example demonstrates the chunk upload functionalities of the Uploader control. Browse or drag-and-drop a large file to upload with pause, resume, and retry options.
        </p>
        <p>Also, configured property panel to change the chunk size dynamically.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>When the file size is large or transfer the file with slow network connection, the chunk upload feature slices the files and upload the sliced chunks to server in sequential order
    using the <a href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Inputs.UploaderAsyncSettings.html#Syncfusion_EJ2_Inputs_UploaderAsyncSettings_ChunkSize"
        target="_blank" aria-label="Navigate to the chunkSize property reference for UploaderAsyncSettings">chunkSize</a> API.
    </p>
    <p>The sample is configured with the following options:</p>
    <ul>
        <li>While uploading, you can pause the upload and resume it later.</li>
        <li> If the upload fails, retry option will be enabled.</li>
        <li> The sample is configured with maximum file size as `100 MB` to upload.</li>
    </ul>
    <h4>Automatic pause and resume</h4>
    <p>
        If the application lost its connection (<code>offline</code>), the upload component pauses the process automatically. After the connection is up (<code>online</code>), the upload component will resume its process.
    </p>
    <p>More information on the Uploader instantiation can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/uploader/chunk-upload" aria-label="Navigate to the documentation for Chunk Upload in ASP.NET Core Uploader control">documentation section</a>.</p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Chunk Upload in ASP.NET Core File Upload control. Explore here for more details."/>
                }
@section Title{
                    <title>ASP.NET Core File Upload Chunk Upload Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Chunk Upload in ASP.NET Core File Upload Control</h1>
                }