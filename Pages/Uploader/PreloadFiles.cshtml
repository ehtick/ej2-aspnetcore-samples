@page

@using Syncfusion.EJ2

@{
    var asyncSettings = new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = @Url.Content("http://localhost:62928/api/FileUploader/Save"), RemoveUrl = @Url.Content("http://localhost:62928/api/FileUploader/Remove") };
}

@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control_wrapper">
            <ejs-uploader id="UploadFiles" removing="onFileRemove" dropArea=".control-fluid" asyncSettings="@asyncSettings">
                <e-uploader-files>
                    <e-uploader-uploadedfiles name="Nature" Size=500000 type=".png"></e-uploader-uploadedfiles>
                    <e-uploader-uploadedfiles name="TypeScript Succinctly" Size=12000 type=".pdf"></e-uploader-uploadedfiles>
                    <e-uploader-uploadedfiles name="ASP.NET Webhooks" size="500000" type=".docx"></e-uploader-uploadedfiles>
                </e-uploader-files>
            </ejs-uploader>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <div id="property" title="Properties">
            <div style='margin-left: 50px; padding-top:25px;'>
                <button class="e-btn e-css" id="clearbtn">Clear All</button>
            </div>
        </div>
    </div>
}

<style>
    .control_wrapper {
        max-width: 500px;
        margin: auto;
    }

    .e-upload {
        width: 100%;
        position: relative;
        margin-top: 15px;
    }
</style>

@section PreScripts {
    <script>
        function onFileRemove(args) {
            args.postRawFile = false;
        }
        document.getElementById('clearbtn').onclick = function () {
            var uploadObj = document.getElementById("UploadFiles")
            uploadObj.ej2_instances[0].clearAll();
        };
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>This <a href="https://www.syncfusion.com/aspnet-core-ui-controls/file-upload"
        target="_blank" aria-label="Navigate to explore the Syncfusion ASP.NET Core File Upload">ASP.NET Core File Upload</a> example demonstrates how to pre-load the files of the Uploader. The already uploaded files are configured in file list to view and remove them.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>The Uploader control allows to load initial list of files which are already uploaded in server. The preload files are useful to view and remove from server. Also, you can achieve state persistence on page refresh. </p>
        <p>For more information, you can refer to the Preload Files section from this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/uploader/async/#preload-files "aria-label="Navigate to the documentation for Preload files in ASP.NET Core Uploader control" > Documentation section</a>.</p>
        <p> To achieve state persistence, you can refer to this How-to section.</p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Preload Files in ASP.NET Core File Upload control. Explore here for more details."/>
                }
@section Title{
                    <title>ASP.NET Core File Upload Preload Files Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Preload Files in ASP.NET Core File Upload Control</h1>
                }