@page

@using Syncfusion.EJ2

@{
    var asyncSettings = new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = @Url.Content("http://localhost:62928/api/FileUploader/Save"), RemoveUrl = @Url.Content("http://localhost:62928/api/FileUploader/Remove") };
}

@section ControlsSection{
    <div class="col-lg-12 control-section">
        <div class="control_wrapper">
            <ejs-uploader id="UploadFiles" removing="onFileRemove" dropArea=".control-fluid" allowedExtensions=".doc, .docx, .xls, .xlsx" selected="onFileSelected" asyncSettings="@asyncSettings" minFileSize="10000" autoUpload="false"></ejs-uploader>
        </div>
    </div>
}

<style>
    .control_wrapper {
        max-width: 500px;
        margin: auto;
    }

    .e-upload {
        width: 100%;
        position: relative;
        margin-top: 15px;
    }
</style>

@section PreScripts {
    <script>
        function onFileRemove(args) {
            args.postRawFile = false;
        }
        function onFileSelected(args) {
            // Filter the 5 files only to showcase
            var uploadObj = document.getElementById("UploadFiles")
            args.filesData.splice(5);
            var filesData = uploadObj.ej2_instances[0].getFilesData();
            var allFiles = filesData.concat(args.filesData);
            if (allFiles.length > 5) {
                for (var i = 0; i < allFiles.length; i++) {
                    if (allFiles.length > 5) {
                        allFiles.shift();
                    }
                }
                args.filesData = allFiles;
                // set the modified custom data
                args.modifiedFilesData = args.filesData;
            }
            args.isModified = true;
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This <a href="https://www.syncfusion.com/aspnet-core-ui-controls/file-upload"
        target="_blank" aria-label="Navigate to explore the Syncfusion ASP.NET Core File Upload">ASP.NET Core File Upload</a> example demonstrates how to validate the files before uploading it to server. Only document files (DOC, DOCX, XLS, XLSX),
            and the files should contain minimum 10 KB and maximum 4 MB sizes to upload it into server.This sample limits maximum files count as 5 to upload.
        </p>

    </div>
}
@section Description{
    <div id="description">
        <p>
            The Uploader control allows to validate the file’s type, and limit the file size using allowedExtensions, minFileSize, and maxFileSize properties.
            You can also achieve limit the files count before uploading it using select event.
        </p>

        <p>For more information, you can refer to the Validation section from this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/uploader/validation "aria-label="Navigate to the documentation for validation in ASP.NET Core Uploader control" > Documentation section</a>.</p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the File Validation in ASP.NET Core File Upload control. Explore here for more details."/>
                }
@section Title{
                    <title>ASP.NET Core File Upload File Validation Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of File Validation in ASP.NET Core File Upload Control</h1>
                }