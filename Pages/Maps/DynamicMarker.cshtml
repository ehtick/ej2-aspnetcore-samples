@page

@using Syncfusion.EJ2.Maps;
@section ControlsSection{
    
    <div class="col-lg-9 control-section">
        <ejs-maps id="maps" load="window.onMapLoad" click="window.click" loaded="onCreated">
            <e-maps-zoomsettings enable="true"></e-maps-zoomsettings>
            <e-maps-layers>
                <e-maps-layer urlTemplate="https://tile.openstreetmap.org/level/tileX/tileY.png">
                </e-maps-layer>
            </e-maps-layers>
        </ejs-maps>
        <div align="center"><p><i><p id="content" style="font-size: 16px;color:grey">Click on the maps to add marker/navigation line</p></i>
            </p>
        </div>
    </div>

    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td>
                        <div style="padding-top: 3px;padding-left: 0px;display: inline-block">Marker</div>
                    </td>
                    <td>
                        <div style="margin-bottom: 15px;margin-left: -10px;">
                            <input type="checkbox" id="marker"/>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div style="padding-top: 3px;padding-left: 0px;">Line</div>
                    </td>
                    <td>
                        <div style="margin-bottom: 15px;margin-left: -10px;">
                            <input type="checkbox" name="high" id="line" />
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div style="padding-top: 3px; padding-left: 0px;">Connecting line</div>
                    </td>
                    <td>
                        <div style="margin-bottom: 15px;margin-left: -10px;">
                            <input type="checkbox" id="connect" />
                        </div>
                    </td>
                </tr>
                <tr style="height: 10px"></tr>
                <tr style="height: 50px">
                    <td >
                        <div style="padding-left:0px;">Marker type</div>                        
                    </td>
                    <td>
                        <div>
                        <select name="widthName" id="type" style="width: 50px; height: 20px">
                            <option value="Image" selected>Image</option>
                            <option value="Circle">Circle</option>
                            <option value="Diamond">Diamond</option>
                            <option value="Star">Star</option>
                            <option value="Triangle">Triangle</option>
                        </select>
                            </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div style="padding-left: 0px;margin-top: 10px;">Width</div>
                    </td>
                    <td>
                     <div style="margin-top: 10px;">
                        <input type="text" class="e-input" value="1" id="width"/>
                     </div>
                    </td>
                </tr>
                <tr>
                    <td align="center">
                        <div>
                            <button id="togglebtn"
                                    style="text-transform: none !important; margin-left: 50%; margin-top: 20px">
                                Clear
                            </button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <!-- custom code start-->
    <style>

        .property-text {
            font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif";
            font-size: 13px;
            font-weight: 400;
        }
    </style>

}
<script>
    var markerCheck = true;
    var lineCheck; var markerShapeValue="Image";
    var widthChecked; var widthDisabled;
    var connectLineCheck;
    var widthCheck;
    var maps;
    var latitude = [];
    var longitude = []; var navigationLines = [];
    function onMapLoad(args) {
        var theme = themeName ? themeName : "Material";
        args.maps.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');
    }
    function onCreated() {
        maps = document.getElementById('maps').ej2_instances[0];
    }


    
    function click(args) {
          if (markerCheck) {
                addMarker(args);
            }
            if (lineCheck && !connectLineCheck) {
                addLine(args, widthChecked);
            }
            if (connectLineCheck) {
                addLine(args, widthChecked, true);
            }
        if (markerCheck || lineCheck || connectLineCheck) {

            maps.refresh();
                if (togglebtn.disabled && (maps.layers[0].markerSettings.length ||
                    maps.layers[0].navigationLineSettings.length)) {
                    togglebtn.disabled = false;
                }
            }
    }
    window.onload = function () {
       
        var markerCheckBox = new ej.buttons.CheckBox(
            {
                change: (e) => {

                    markerCheck = e.checked;
                    markerShape.enabled = (e.checked) ? true : false;
                }, checked: true
            },
            '#marker');
        var widthCheck = new ej.inputs.TextBox(
            {
                change: (e) => {
                    widthChecked = e.value;
                    
   
                }, enabled:false
            },
            '#width');
        var lineCheckBox = new ej.buttons.CheckBox(
            {
                change: (e) => {
                    lineCheck = e.checked;
                    if (e.checked) {
                        connectlineCheckBox.disabled = false;
                        connectlineCheckBox.checked = false;
                        widthCheck.enabled = true;
                    } else {
                        connectLineCheck = e.checked;
                        emptySavedLinePositions();
                        connectlineCheckBox.disabled = true;
                        connectlineCheckBox.checked = false;
                         widthCheck.enabled = false;
                    }
                }
            },
            '#line');
        var connectlineCheckBox = new ej.buttons.CheckBox(
            {
                change: (e) => {
                    disabled: true,
                        connectLineCheck = e.checked;
                    if (!e.checked) {
                        emptySavedLinePositions();
                    }
                }
            },
            '#connect');

        var markerShape = new ej.dropdowns.DropDownList({
            index: 0,
            placeholder: 'Select marker shape',
            width: '100%',
            change: function() {
                markerShapeValue = markerShape.value;
                
            }
        });
        markerShape.appendTo('#type');

        

        var togglebtn = new ej.buttons.Button({
            cssClass: 'e-info',
            isPrimary: true,
            disabled: true
        });
        togglebtn.appendTo('#togglebtn');

        document.getElementById('togglebtn').onclick = () => {
            maps.layers[0].markerSettings = [];
            maps.layers[0].navigationLineSettings = [];
            navigationLines = [];
            emptySavedLinePositions();
            togglebtn.disabled = true;
        };
    }
     
    function emptySavedLinePositions() {
        latitude = [];
        longitude = [];
    }
    function addMarker(args) {
       // var markerShape = document.getElementById("type");
        if (args['latitude'] !== null && args['longitude'] !== null) {
            var layerIndex = (args.target.indexOf('_LayerIndex_') !== -1) ?
                parseFloat(args.target.split('_LayerIndex_')[1].split('_')[0]) : 0;
            var marker;
            var dynamicMarker = maps.layersCollection[layerIndex].markerSettings;
            dynamicMarker.push(new ej.maps.MarkerSettings(maps, 'markerSettings', marker));
            var markerIndex = dynamicMarker.length - 1;
            dynamicMarker[markerIndex].visible = true;
            dynamicMarker[markerIndex].dataSource = [
                { latitude: args['latitude'], longitude: args['longitude'], name: 'dynamicmarker' }
            ];
            dynamicMarker[markerIndex].animationDuration = 0;
            dynamicMarker[markerIndex].fill = '#DB4537';
            dynamicMarker[markerIndex].shape = (markerShapeValue !== 'Image') ? markerShapeValue : 'Image';
            dynamicMarker[markerIndex].height = (markerShapeValue !== 'Image') ? 12 : 20;
            dynamicMarker[markerIndex].width = (markerShapeValue !== 'Image') ? 12 : 20;
            dynamicMarker[markerIndex].imageUrl = (markerShapeValue !== 'Image') ? '' : '../styles/images/maps/ballon.png';
        }
    }

    function addLine(lineArgs, lineWidth, connectiveLine) {
        if (lineArgs.latitude != null && lineArgs.longitude != null) {
            latitude.push(lineArgs.latitude);
            longitude.push(lineArgs.longitude);
        }
        if (latitude.length >= 2) {
            navigationLines.push({
                'visible': true,
                'latitude': [latitude[(latitude.length - 2)], latitude[(latitude.length - 1)]],
                'longitude': [longitude[(longitude.length - 2)], longitude[(longitude.length - 1)]],
                'angle': 0,
                'color': 'blue',
                'width': (lineWidth > 5) ? 5 : (((5 >= lineWidth) && (lineWidth >= 1)) ? lineWidth : 1)
            });
            maps.layers[0].navigationLineSettings = navigationLines;
            if (!connectiveLine) {
                emptySavedLinePositions();
            }
        }
    }
  
</script>
@section Description{
    <div id="description">
        <p>
            Using UI interaction, the markers or line can be added as follows: You can get the currently clicked geo location by passing "PointerEvent" or "MouseEvent" argument and layer index to the "getGeoLocation" method. Then, use that geo position to place the marker or line in the appropriate position.
        </p>
        <br />
        <p style="font-weight: 500">Injecting Module</p>
        <p>
            The features of maps component are segregated into individual feature-wise modules. To use navigation lines and marker, you need to inject the <code>NavigationLine </code> and <code>Marker </code> module using the <code>Maps.Inject(NavigationLine, Marker)</code> method.
        </p>

    </div>

}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample shows how custom markers and lines can be dynamically added to our maps with UI interaction. Marker or line can be chosen from the properties panel.
        </p>

    </div>

}
@section Title{
                    <title>ASP.NET Core Maps Dynamic Marker Example - Syncfusion Demos </title> 
                }
@section Meta{
                    <meta name="description" content="This example demonstrates the Dynamic Marker in ASP.NET Core Maps control. Explore here for more details."/>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Dynamic Marker in ASP.NET Core Maps Control</h1>
                }