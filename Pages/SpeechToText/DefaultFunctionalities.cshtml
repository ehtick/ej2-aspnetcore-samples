@page
@using Syncfusion.EJ2
@model EJ2CoreSampleBrowser.Pages.SpeechToText.DefaultModel

@section ControlsSection {
    <div class="col-lg-8 control-section">
        <div class="default-speechToText-section">
            <div class="speechToText-container">
                <!-- Initialize Speech to Text component -->
                <ejs-speechtotext id="speech-to-text" created="created" transcriptChanged="onTranscriptChanged" onStart="onListeningStart" onStop="onListeningStop" onError="onErrorHandler"></ejs-speechtotext>
                <mark class="speech-recognition-status">Click the mic button to start speaking...</mark>
            </div>
            <div class="output-container">
                <h4>Live Speech Transcription</h4>
                <!-- Initialize TextArea for output -->
                <ejs-textarea id="output-textarea" cssClass="e-outline" resizeMode="None" rows=10 placeholder="Transcribed text will appear here..." created="onTextAreaCreated" input="handleInputEvent"></ejs-textarea>
                <div class="output-options">
                    <ejs-button id="transcript-copy-button" class="e-btn" content="Copy" disabled="true"></ejs-button>
                    <ejs-button id="transcript-clear-button" class="e-btn" content="Clear"></ejs-button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 default-speechToText property-section">
        <div class="property-panel-header"> Properties </div>
        <div class="property-panel-content">
            <table>
                <tbody>
                    <tr>
                        <td> Styling </td>
                        <td>
                            <!-- Initialize DropDownList for styling options -->
                            <ejs-dropdownlist id="stt-styling-ddl" popupHeight="200px" popupWidth="200px" change="handleMiColor" dataSource="@Model.color" index="0">
                                <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </td>
                    </tr>
                    <tr>
                        <td> Language </td>
                        <td>
                            <!-- Initialize DropDownList for language options -->
                            <ejs-dropdownlist id="stt-lang-ddl" popupHeight="200px" popupWidth="200px" change="handleLanguageType" dataSource="@Model.language" index="0" created="onDropdownCreated">
                                <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </td>
                    </tr>
                    <tr>
                        <td>Interim results</td>
                        <td>
                            <!-- Initialize Switch for interim results -->
                            <ejs-switch id="interim-switch" checked="true" type="checkbox" change="handleAllowInterimResults" created="onSwitchCreated" />
                        </td>
                    </tr>
                    <tr>
                        <td>Show tooltip</td>
                        <!-- Initialize Switch for tooltip -->
                        <td>
                            <ejs-switch id="tooltip-switch" checked="true" type="checkbox" change="handleShowTooltip" />
                        </td>
                    </tr>
                    <tr>
                        <td>Show icon with text</td>
                        <!-- Initialize Switch for icon with text -->
                        <td>
                            <ejs-switch id="icon-with-text-switch" type="checkbox" checked="false" change="handleIconWithText" />
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}

<style>
    .default-speechToText-section,
    .default-speechToText-section .output-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .default-speechToText-section {
        gap: 50px;
        margin: 50px auto;
    }

    .default-speechToText-section .output-container {
        width: 75%;
        gap: 10px;
    }

    .default-speechToText-section .output-container h4 {
        margin: 0;
        align-self: baseline;
    }

    .default-speechToText-section .speech-recognition-status {
        font-size: 12px;
    }

    .default-speechToText .property-panel-content td {
        padding: 10px 0px;
        width: 50%;
    }

    .default-speechToText-section .speechToText-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
    }

    .default-speechToText-section #transcript-copy-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    @@media only screen and (max-width: 750px) {
        .default-speechToText-section .output-container {
            width: 100%;
        }

        .default-speechToText-section .output-options {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
    }
</style>

@section PreScripts {
    <script>
        var speechToTextObj;
        var textareaObj;
        var languageDropdownObj;
        var interimSwitchObj;
        var isSupportedBrowser = true;

        function created() {
            speechToTextObj = ej.base.getComponent(document.getElementById("speech-to-text"), "speech-to-text");
        }

        function onTextAreaCreated() {
            textareaObj = ej.base.getComponent(document.getElementById("output-textarea"), "textarea");
        }

         function onDropdownCreated() {
            languageDropdownObj = ej.base.getComponent(document.getElementById("stt-lang-ddl"), "dropdownlist");
        }

        function onSwitchCreated() {
            interimSwitchObj = ej.base.getComponent(document.getElementById("interim-switch"), "switch");
        }

        function handleInputEvent() {
            toggleCopyButtonState();
        }

        // Event handler for transcript change
        function onTranscriptChanged(args) {
            if (!args.isInterimResult)
                args.transcript += ' ';
            textareaObj.value = args.transcript;
            toggleCopyButtonState();
        }

        // Event handler for listening start
        function onListeningStart() {
            if (isSupportedBrowser) {
                if (textareaObj.value)
                    speechToTextObj.transcript = textareaObj.value + '\n';

                updateStatus('Listening... Speak now...');
            } else {
                updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');
            }
            interimSwitchObj.disabled = true;
            languageDropdownObj.enabled = false;
        }

        // Event handler for listening stop
        function onListeningStop(args) {
            if (isSupportedBrowser) {
                if (args.isInteracted)
                    updateStatus('Click the mic button to start speaking...');
            } else {
                updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');
            }
            interimSwitchObj.disabled = false;
            languageDropdownObj.enabled = true;
        }

        // Event handler for errors
        function onErrorHandler(args) {
            updateStatus(args.errorMessage);
            if (args.error === 'unsupported-browser')
                isSupportedBrowser = false;
        }

        // Function to updates the speech recognition status message
        function updateStatus(status) {
            document.querySelector('.speech-recognition-status').innerText = status;
        }

        function toggleCopyButtonState() {
            var copyButton = ej.base.getComponent(document.getElementById("transcript-copy-button"), "btn");
            var hasText = textareaObj.element.value.trim() !== '';
            copyButton.disabled = hasText ? false : true;
        }

        // Event listener for copy button
        document.getElementById('transcript-copy-button').addEventListener('click', function() {
            var copyText = textareaObj.value;
            var copyBtnElem = this;
            if (copyText && navigator.clipboard) {
                navigator.clipboard.writeText(copyText).then(function() {
                    copyBtnElem.innerText = 'Copied!';
                    setTimeout(function () {
                        copyBtnElem.innerText = 'Copy';
                    }, 1000);
                }).catch(function(err) {
                    console.error('Clipboard write failed', err);
                });
            }
        });

        // Event listener for clear button
        document.getElementById('transcript-clear-button').addEventListener('click', function() {
            textareaObj.value = textareaObj.element.value = speechToTextObj.transcript = '';
            toggleCopyButtonState();
        });

        function handleAllowInterimResults(args) {
            speechToTextObj.allowInterimResults = args.checked;
        }
        function handleShowTooltip(args) {
            speechToTextObj.showTooltip = args.checked;
        }
        function handleMiColor(args) {
            speechToTextObj.cssClass = args.value;
        }
        function handleLanguageType(args) {
            speechToTextObj.lang = args.value;
        }
        function handleIconWithText(args) {
            speechToTextObj.buttonSettings = {
                content: args.checked ? 'Start Listening' : '',
                stopContent: args.checked ? 'Stop Listening' : ''
            };
        }
    </script>
}
@section Meta {
    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET Core SpeechToText control. Explore here for more details." />
}

@section ActionDescription {
    <div id="action-description">
        <p>
            This sample showcases the functionality of the SpeechToText control, which converts spoken words into text using your device's microphone. It utilizes the built-in JavaScript SpeechRecognition API for speech processing. Speak into the microphone to see the transcribed text appear in the text area.
        </p>
    </div>
}
@section Description {
    <div id="description">
        <p>
            The SpeechToText control enables real-time speech-to-text conversion using the JavaScript <code>SpeechRecognition</code> API. This demo explores its key features and customization options:
        </p>
        <ul>
            <li><code>cssClass</code>: Modify the microphone button's appearance with predefined styles such as Success, Warning, or Danger.</li>
            <li><code>lang</code>: Select a preferred language for speech recognition.</li>
            <li><code>allowInterimResults</code>: Choose whether to display words as you speak or only after completing a phrase.</li>
            <li><code>showTooltip</code>: Enable or disable tooltips for additional guidance.</li>
            <li><code>buttonSettings</code>: Configure the button to display text alongside the microphone icon.</li>
        </ul>
        <p>
            These options allow you to configure the SpeechToText control to suit your needs. Try different settings in the property panel to see how they affect the control's appearance and functionality.
        </p>
    </div>
}

@section Title {
    <title>ASP.NET Core SpeechToText Default Functionalities Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of Default Functionalities in ASP.NET Core SpeechToText Control</h1>
}