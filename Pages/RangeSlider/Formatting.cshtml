@page

@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    var currencyValue = new int[] { 20, 80 };
    var kilometerValue = new int[] { 1100, 1850 };
    var timeValue = new decimal[] { 1373697000000, 1373718600000 };
}


@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section">
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="sliderwrap">
                    <label class="userselect">Currency Slider</label>
                    <ejs-slider id="currency" type="Range" created="onCreated" value=currencyValue min="0" max="100">
                        <e-slider-tooltipdata isVisible="true" placement="Before" format="c2"></e-slider-tooltipdata>
                        <e-slider-ticksdata placement="After" largeStep="25" smallStep="5" showSmallTicks="true" format="c1"></e-slider-ticksdata>
                    </ejs-slider>
                </div>
                <div class="sliderwrap">
                    <label class="userselect">Kilometer Slider</label>
                    <ejs-slider id="kilometer" type="Range" value="kilometerValue" min="900" max="2100">
                        <e-slider-tooltipdata isVisible="true" placement="Before" format="00##.## km"></e-slider-tooltipdata>
                        <e-slider-ticksdata placement="After" largeStep="400" smallStep="100" showSmallTicks="true" format="00##.## km"></e-slider-ticksdata>
                    </ejs-slider>
                </div>
                <div class="sliderwrap">
                    <label class="userselect">Time Slider</label>
                    <ejs-slider id="time" type="Range" tooltipChange="tooltipChangeHandler" renderingTicks="renderingTicksHandler" value=timeValue min="1373693400000" max="1373736600000" step="600000">
                        <e-slider-tooltipdata placement="Before" isVisible="true"></e-slider-tooltipdata>
                        <e-slider-ticksdata placement="After" largeStep="10800000" smallStep="3600000" showSmallTicks="true"></e-slider-ticksdata>
                    </ejs-slider>
                </div>
            </div>
        </div>

    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Formatting in ASP.NET Core Range Slider control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the formatting of ticks and tooltip of Slider. Drag the thumb over the bar for selecting the
            formatted values between min and max.
        </p>


    </div>
}

@section Description{
    <div id="description">
        <p>
            The format feature customizes the units of Slider values to the desired format. The formatted values will also be applied
            to the ARIA attributes of the slider.
        </p>
        <p>In this demo, Slider with currency, kilometer, and time formatting is demonstrated.</p>
        <ul>
            <li>
                Currency Slider – In this sample, ticks and tooltip are formatted to currency using format API in both tooltip and
                ticks.
            </li>
            <li>
                Kilometer Slider – In this sample, ticks and tooltip are formatted to kilometer using format API in both tooltip
                and ticks.
            </li>
            <li>
                Time Slider – In this sample, ticks and tooltip are formatted to time using change event in tooltip and renderingTicks
                event in ticks
            </li>
        </ul>
        <p>
            For more information, refer to the
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/range-slider/format" aria-label="Navigate to the documentation for format in ASP.NET Core RangeSlider control">format</a> section from the documentation.
        </p>
    </div>
}


<style>
    .content-wrapper {
        width: 40%;
        margin: 0 auto;
        min-width: 185px;
    }

    .sliderwrap {
        margin-top: 40px;
    }

    .e-bigger .content-wrapper {
        width: 80%;
    }

    .sliderwrap label {
        padding-bottom: 26px;
        font-size: 13px;
        font-weight: 500;
        margin-top: 15px;
        text-align: left;
        width: 100%;
    }

    .userselect {
        -webkit-user-select: none; /* Safari 3.1+ */
        -moz-user-select: none; /* Firefox 2+ */
        -ms-user-select: none; /* IE 10+ */
        user-select: none; /* Standard syntax */
    }

    body.fluent2-highcontrast .sliderwrap .e-scale,
    body.fluent2 .sliderwrap .e-scale,
    body.fluent2-dark .sliderwrap .e-scale {
        top: 2px;
    }

    body.tailwind3 .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,
    body.tailwind3-dark .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,
    body.tailwind3.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick
    body.tailwind3-dark.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick {
        top: 0px;
    }
</style>
<script type="text/javascript" >
    function tooltipChangeHandler(args) {
        // Splitting the range values from the tooltip using space into an array.
        let totalMiliSeconds = args.text.split(' ');
        // First part is the first handle value
        let firstPart = totalMiliSeconds[0];
        // Second part is the second handle value
        let secondPart = totalMiliSeconds[2];
        /**
         * toLocaleTimeString is predefined javascript date function, which is used to
         * customize the date in different format
         */
        let custom = { hour: '2-digit', minute: '2-digit' };
        firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);
        secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);
        // Assigning our custom text to the tooltip value.
        args.text = firstPart + ' - ' + secondPart;
    }

    function renderingTicksHandler(args) {
        let totalMiliSeconds = Number(args.value);
        /**
         * toLocaleTimeString is predefined javascript date function, which is used to
         * customize the date in different format
         */
        let custom = { hour: '2-digit', minute: '2-digit' };
        // Assigning our custom text to the tick value.
        args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);
    }

    function onCreated() {
        if(document.getElementById('right-pane')) {
        document.getElementById('right-pane').addEventListener('scroll', onScroll);
        }
    }

    function onScroll() {
        var slider = [document.getElementById("currency").ej2_instances[0], document.getElementById("kilometer").ej2_instances[0], document.getElementById("time").ej2_instances[0]];
        slider.forEach(function (slider) {
            // Refreshing each slider tooltip object position
            slider.refreshTooltip(slider.tooltipTarget);
        });
    }
</script>
@section Title{
                    <title>ASP.NET Core Range Slider Formatting Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Formatting in ASP.NET Core Range Slider Control</h1>
                }
