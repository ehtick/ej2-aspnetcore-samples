@page

@using Syncfusion.EJ2
@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="content-wrapper">
            <div class="sliderwrap">
                <ejs-slider id="minRange" value="30" type="MinRange" created="onCreated" change="onChange" changed="onChanged">
                    <e-slider-tooltipdata isVisible="true" placement="Before" showOn="Focus"></e-slider-tooltipdata>
                    <e-slider-ticksdata placement="Both" largeStep="20" smallStep="5" showSmallTicks="true" ></e-slider-ticksdata>
                </ejs-slider>
            </div>
        </div>
    </div>

    <div id="slider_event" class="col-lg-4 property-section">
        <table id="property" title="Event Trace">
            <tr>
                <td>
                    <div class="eventarea" style="height: 245px;overflow: auto">
                        <!-- Event log element -->
                        <span class="EventLog" id="EventLog" style="word-break: normal;"></span>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div class="evtbtn" style="padding-bottom: 10px">
                        <!-- clear button element -->
                        <input id="clear" type="button" class="btn btn-default" value="Clear" />
                    </div>
                </td>
            </tr>
        </table>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Events in ASP.NET Core Range Slider control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the events that have been triggered on the Slider operations with the help of event trace panel.
            Drag the thumb over the bar between min and max to know the event details.
        </p>

    </div>
}

@section Description{
    <div id="description">
        <p>
            Slider component triggers the event based on its actions. The events can be used as an extension point to perform custom
            operations.
        </p>
        <p>In this demo, Slider performs following actions which can be traced by event trace panel: </p>
        <ul>
            <li>Created - Triggers when the Slider is created.</li>
            <li>Change - Triggers when the Slider value is changed.</li>
            <li>Changed - Triggers when the Slider action is completed with change in Slider value.</li>
        </ul>
    </div>
}

<style>
    .content-wrapper {
        padding-top: 50px;
        width: 55%;
        margin: 0 auto;
        min-width: 185px;
    }

    .sliderwrap {
        margin-top: 40px;
    }

    .e-bigger .content-wrapper {
        width: 80%;
    }

    .userselect {
        -webkit-user-select: none;
        /* Safari 3.1+ */
        -moz-user-select: none;
        /* Firefox 2+ */
        -ms-user-select: none;
        /* IE 10+ */
        user-select: none;
        /* Standard syntax */
    }

    #EventLog b {
        color: #29742c;
    }

    hr {
        margin-top: 6px;
        margin-bottom: 6px;
    }

    #slider_event .property-panel-table div {
        margin-top: -4px;
        padding-bottom: 0px;
    }

    #slider_event.property-section {
        margin-bottom: -19px;
    }
</style>
<script type="text/javascript">
    //Handler for create event trace
    function onCreated() {
        if(document.getElementById('right-pane')) {
        document.getElementById('right-pane').addEventListener('scroll', onScroll);
        }
        //Clears the event log details
        document.getElementById('clear').onclick = () => {
            document.getElementById('EventLog').innerHTML = '';
        };
        appendElement('Slider control has been <b>created</b><hr>');
    }
    //Handler for change event trace
    function onChange(args) {
        appendElement('Slider value is <b>changing</b> from ' + args.previousValue + '  to  ' + args.value + '<hr>');
    }
    //Handler for changed event trace
    function onChanged(args) {
        appendElement('Slider value has been <b>changed</b> from ' + args.previousValue + '  to  ' + args.value + '<hr>');
    }
    //Display event log
    function appendElement(html) {
        let span = document.createElement('span');
        span.innerHTML = html;
        let log = document.getElementById('EventLog');
        log.insertBefore(span, log.firstChild);
    }

    function onScroll() {
        var slider = [document.getElementById("minRange").ej2_instances[0]];
        slider.forEach(function (slider) {
            // Refreshing each slider tooltip object position
            slider.refreshTooltip(slider.tooltipTarget);
        });
    }
</script>
@section Title{
                    <title>ASP.NET Core Range Slider Events Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Events in ASP.NET Core Range Slider Control</h1>
                }