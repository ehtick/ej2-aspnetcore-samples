@page
@model EJ2CoreSampleBrowser.Pages.Grid.DetailTemplateModel
@using System.Linq
@using System.Text.Json
@{
    ViewData["Title"] = "DetailTemplate";
}

<h2>DetailTemplate</h2>

@section ControlsSection{
    <div class="control-section">
       
        <ejs-grid id="Grid" dataSource="@Model.DataSource" allowSorting="true" allowFiltering="true" detailTemplate="#detailtemplate" detailDataBound="detailDataBound">
            <e-grid-filterSettings type="CheckBox"></e-grid-filterSettings>
            <e-grid-columns> 
                <e-grid-column field="EmployeeImage" headerText="Image" width="110" textAlign="Center" allowFiltering="false" template="#employeeImageTemplate" ></e-grid-column>
                <e-grid-column field="EmployeeID" headerText="ID" width="110"></e-grid-column>               
                <e-grid-column field="Name" headerText="Name" width="110"></e-grid-column>
                <e-grid-column field="MailID" headerText="Email ID" width="150" template="#mailIDTemplate"></e-grid-column>   
                <e-grid-column field="SoftwareTeam" headerText="Team(s)" width="110"></e-grid-column>             
                <e-grid-column field="ReportTo" headerText="Reporter" width="110"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>    
<style type="text/css" class="cssStyles">
    .detailtable td {
        font-size: 13px;
        padding: 4px;
        max-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
	font-weight: normal;
    }

    .image img {
        height: 55px;
        width: 55px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(68, 66, 66, 0.2);
    }
    .report {
        font-size: 17px;
        text-align: center;
        padding-top: 5px;
    }
    .e-grid .e-detailrow .e-detailcell .e-tab .e-content {
        overflow-y: auto;
    }
</style>
<script type="text/x-template" id="employeeImageTemplate">
${employeeTemplate(data)}
</script>
<script id="mailIDTemplate" type="text/x-template">
    <a href="mailto:${MailID}">${MailID}</a>
</script>
<script id="detailtemplate" type="text/x-template">
    <p class='report'><b>Sprint</b></p>
    <div class="e-tab-section">
        <div id="tab">
            <div class="e-tab-header">
                <div>Taskboard</div>
                <div>Burndown Chart</div>
            </div>
            <div class="e-content">
                <div>
                    <div id="taskTemplate"></div>
                </div>
                <div>
                    <div id="chartTemplate"></div>
                </div>
            </div>
        </div>
    </div>
</script>
<script id="cardTemplate" type="text/x-template">
    <div class='card-template'>
            <table class='card-template-wrap' style="width: 100%">
                <tbody>
                    <tr>
                        <td class='e-title'>
                            <div class='e-card-header'>
                                <div class='e-card-header-caption'>
                                    <div class='e-card-header-title e-tooltip-text'>${Id}</div>
                                </div>
                            </div>
                            <div>
                                <table class='card-template-wrap'>
                                    <tbody>
                                        <tr class='e-tooltip-text'>
                                            <td>
                                                <div class=e-card-content>${Summary}</div>
                                                <span class=e-card-content><b>Estimated hour:</b> ${Estimate}</span>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                        </td>
                    </tr>
                </tbody>
            </table>
    </div>
</script>
<script type="text/javascript">
    function detailDataBound(args) {
        var data = @Html.Raw(JsonSerializer.Serialize(@Model.TaskData));
        var rowData = args.data;
        var detailData = data.filter(function(item){ return item.Assignee === rowData.Name;});
        var salesData = generateData(detailData);
        
        var tabObj = new ej.navigations.Tab({ 
            animation: {
                previous: { effect: 'None', duration: 0, easing: '' },
                next: { effect: 'None', duration: 0, easing: '' }
            }
         });
        tabObj.appendTo(args.detailElement.querySelector('#tab'));
        var kanbanObj = new ej.kanban.Kanban({
                dataSource: detailData,
                keyField: 'Status',
                columns: [
                    { headerText: 'Open', keyField: 'Open' },
                    { headerText: 'In Progress', keyField: 'InProgress' },
                    { headerText: 'Testing', keyField: 'Testing' },
                    { headerText: 'Done', keyField: 'Close' }
                ],
                cardSettings: {
                    template: '#cardTemplate',
                    headerField: 'Id',
                }
            });
        kanbanObj.appendTo(args.detailElement.querySelector('#taskTemplate'));
        var chart = new ej.charts.Chart({
            primaryXAxis: {
                valueType: 'Category',
                title: 'Status'
            },
            height: '302px',
            title: 'Burndown Chart',
            tooltip: { enable: true },
            series: [
                {
                    dataSource: salesData,
                    xName: 'taskid',
                    yName: 'estimatedHours',
                    type: 'Line',
                    name: 'Estimated Hours',
                    marker: { visible: true, width: 10, height: 10 }
                },
                {
                    dataSource: salesData,
                    xName: 'taskid',
                    yName: 'spentHours',
                    type: 'Line',
                    name: 'Spent Hours',
                    marker: { visible: true, width: 10, height: 10 }
                }
            ],
            legendSettings: { visible: true }
        });
        var chartsContainer = args.detailElement.querySelector('#chartTemplate');
        if (chartsContainer) {
            detailData.forEach(function(data) {
                chartsContainer.id = 'chartTemplate_' + data.Assignee;
                chart.appendTo(chartsContainer);
            });
        }
    }
    function generateData(employeeTaskData) {
        var statusCategories = ['Open', 'InProgress', 'Testing', 'Close'];
        var statusData = statusCategories.map(function(status) {
            var filteredTasks = employeeTaskData.filter(function(task) { return task.Status === status;});
            var estimatedHours = filteredTasks.reduce(function(sum, task) { return sum + task.Estimate;}, 0);
            var spentHours = filteredTasks.reduce(function(sum, task) { return sum + task.Spent;}, 0);
            var taskid = '';
            if (filteredTasks.length) {
                taskid = filteredTasks[0].Id;
            }
            return { spentHours: spentHours, estimatedHours: estimatedHours, status: status, taskid: taskid };
        });
        return statusData;
    }
    function employeeTemplate(e) {
        var divElement = document.createElement('div');
        divElement.className = 'image';
        var imgElement = document.createElement('img');
        imgElement.src = '../scripts/Images/Employees/' + e.EmployeeID.replace('Emp100','') + '.png';
        imgElement.alt = e.EmployeeID;
        divElement.appendChild(imgElement);
        return divElement.outerHTML;
    };
</script>

}
@section ActionDescription{
	<div id="action-description">
		 <p>This sample demonstrates the Grid component's with the detail template feature. It lets users click the expand button
        in each grid row to display detailed information about that row.
		</p>
	</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Detail Template in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
        This additional information can be shown or hidden by clicking on the expand or collapse button. The 
        <code>detailTemplate</code> property accepts either a string or HTML element`s ID value, which will be used as the template for the detail row.
        </p>
        <p>
            In this demonstration, the parent row provides information about employees name, ID, team and reporter names. In each employee row with 
            a details view, when expanding the details, you can see the sprint report of that employee. In the details row with two tabs, the first tab contains 
            <code>Syncfusion Kanban component</code> used to list assigned tasks and their current statuses, and the second tab contains <code>Syncfusion Chart Component</code> used to 
            display the burndown chart of employee task estimated time vs actual spend time.
        </p>
			<p>The template expression should be provided inside <code>${...}</code> interpolation syntax.</p>
			<br/>
    </div>
}
@section Title{
                    <title>ASP.NET Core Data Grid Detail Template Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Detail Template in ASP.NET Core Data Grid Control</h1>
                }
