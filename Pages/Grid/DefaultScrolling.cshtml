@page
@model EJ2CoreSampleBrowser.Pages.Grid.DefaultScrollingModel

@{
    ViewData["Title"] = "DefaultScrolling";
}

<h2>DefaultScrolling</h2>

@section ControlsSection{
    <div class="control-section">
        <ejs-grid id="Grid" dataSource="@Model.DataSource" height="410" width="auto" allowSorting="true" allowFiltering="true" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
            <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
            <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
            <e-grid-columns>
                <e-grid-column field="OrderID" headerText="Order ID" textAlign="Right" isPrimaryKey="true" validationRules="@(new { required=true, number=true })" width="120"></e-grid-column>
                <e-grid-column field="CustomerID" headerText="Customer Name" validationRules="@(new { required=true })" width="150"></e-grid-column>
                <e-grid-column field="OrderDate" headerText=" Order Date" textAlign="Right" format="yMd" editType="datepickeredit" width="130"></e-grid-column>
                <e-grid-column field="Freight" headerText="Freight" textAlign="Right" format="C2" width="120"></e-grid-column>
                <e-grid-column field="ShippedDate" headerText="Shipped Date" textAlign="Right" format="yMd" editType="datepickeredit" width="140" ></e-grid-column>
                <e-grid-column field="ShipName" headerText="Ship Name" width="170"></e-grid-column>
                <e-grid-column field="ShipAddress" headerText="Ship Address" width="170"></e-grid-column>
                <e-grid-column field="ShipCity" headerText="Ship City" width="150"></e-grid-column>
                <e-grid-column field="ShipCountry" headerText="Ship Country" width="150"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the Grid component with the horizontal and vertical scrollbars to view the exceeded grid content.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Default Scrolling in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
            The Grid will show scrollbar when the content exceeds the element width or height. The vertical and horizontal scrollbar
            will be displayed based on the following criteria.
        </p>
        <ul>
            <li>The vertical scrollbar appears when the total height of rows present in Grid exceeds its element height.</li>
            <li>The horizontal scrollbar appears when the sum of column`s width exceeds Grid element width.</li>
        </ul>
        <p>
            The <code>height</code> and <code>width</code> property is used to set the Grid height and width respectively. The value of these properties can be
            a numeric value, pixel(<code>px</code>) or percentage (<code>%</code>).
        </p>
        <p>
            In this demo, the <code>height</code> and <code>width</code> property of the Grid is set to <strong><em>410</em></strong> and <strong><em>auto</em></strong> respectively.
            Now, the Grid will render with vertical scrollbar when the total height of rows exceeds its element height and horizontal
            scrollbar will appear when the total column width exceeds the element width.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Data Grid Default Scrolling Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default Scrolling in ASP.NET Core Data Grid Control</h1>
                }