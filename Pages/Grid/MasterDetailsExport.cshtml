@page
@model EJ2CoreSampleBrowser.Pages.Grid.MasterDetailsExportModel
@{
    var SecondChildGrid = new Syncfusion.EJ2.Grids.Grid()
    {
        DataSource = Model.CustomerDataSource,
        QueryString = "CustomerID",
        Columns = new List<Syncfusion.EJ2.Grids.GridColumn> {
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="CustomerID", HeaderText="Customer ID", Width="90", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="ContactName", HeaderText="Name", Width="100" },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="CompanyName", HeaderText="Company", Width="120" },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="Country", HeaderText="Country", Width="90" },
        }
    };
    var ChildGrid = new Syncfusion.EJ2.Grids.Grid() {
        DataSource = Model.DataSource,
        QueryString = "EmployeeID",
        Columns = new List<Syncfusion.EJ2.Grids.GridColumn> {
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="OrderID", HeaderText="Order ID", Width="120" },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="Freight", HeaderText="Freight", Width="120", Format="C2", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="ShipName", HeaderText="Ship Name", Width="150" },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="ShipCity", HeaderText="Ship City", Width="120" },
        },
        ChildGrid = SecondChildGrid
    };
}

@section ControlsSection{
    <div class="control-section">
        <ejs-grid id="HierarchyPrint" dataSource="@Model.EmpDataSource" childGrid="@ChildGrid" toolbarClick="toolbarClick" toolbar="@(new List<string>() {"PdfExport", "ExcelExport" })"
        allowPdfExport="true" allowExcelExport="true">
            <e-grid-columns>
                <e-grid-column field="EmployeeID" headerText="Employee ID" textAlign="Right" width="125"></e-grid-column>
                <e-grid-column field="FirstName" headerText="Name" width="120"></e-grid-column>
                <e-grid-column field="Title" headerText="Title"  width="170"></e-grid-column>
                <e-grid-column field="City" headerText="City" format='yMd' textAlign="Right" width="135"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>

    <script>
        function toolbarClick(args) {
             if (args.item.id === 'HierarchyPrint_pdfexport') {
                this.pdfExport({hierarchyExportMode: "All"});
            }
            if (args.item.id === 'HierarchyPrint_excelexport') {
                this.excelExport({hierarchyExportMode: "All"});
            }
        }
    </script>

}
@section ActionDescription{
	<div id="action-description">
		<p>This sample demonstrates the hierarchy Grid export feature. In this sample, you can export the hierarchy grid by clicking the corresponding export button from the grid's toolbar.</p>
	</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Hierarchy Exporting in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
            <p>Grid supports client-side Hierarchy Grid exporting which allows you to export its data to the Excel and Pdf formats.</p>
            <p>In this demo, ExcelExport and PdfExport items are defined in the toolbar. For these toolbar items, we have defined actions
                in toolbarClick event to export hierarchy Grid using the <code>excelExport</code>, <code>pdfExport</code>
            methods and the grid will export using <code>All</code> mode.</p>
        The hierarchy grid allows us to export the grid with following options,
        <ul>
            <li><code>Expanded</code> - Exports only the visible child grids in expanded state.</li>
            <li><code>All</code> - Exports the all the child grids in expanded state.</li>
            <li><code>None</code> - Exports the child grids in collapse state.</li>
        </ul>
        <p>
            We can change the hierarchy grid's export option by using the <code>hierarchyExportMode</code> property.
        </p>
        <p>
            More information on the exporting configuration can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/grid/pdf-export" aria-label="Navigate to the documentation for PDF Export in ASP.NET Core Grid control">
            pdf-export</a> and  <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/grid/excel-exporting" aria-label="Navigate to the documentation for excel-exporting in ASP.NET Core Grid control">
            excel-export</a> Documentation sections.
        </p>
    </div>

}
@section Title{
                    <title>ASP.NET Core Data Grid Hierarchy Exporting Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Hierarchy Exporting in ASP.NET Core Data Grid Control</h1>
                }