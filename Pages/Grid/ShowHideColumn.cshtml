@page
@model EJ2CoreSampleBrowser.Pages.Grid.ShowHideColumnModel
@{
    ViewData["Title"] = "ShowHideColumn";
}

<h2>ShowHideColumn</h2>

@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control-wrapper">
            <div class="control-section">
                <ejs-grid id="Grid" dataSource="@Model.DataSource" allowPaging="true" allowSorting="true" allowFiltering="true">
                    <e-grid-pagesettings pageCount="2"></e-grid-pagesettings>
                    <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
                    <e-grid-columns>
                        <e-grid-column field="CategoryName" headerText="Category Name" width="160"></e-grid-column>
                        <e-grid-column field="ProductName" headerText="Product Name" width="170"></e-grid-column>
                        <e-grid-column field="UnitsInStock" headerText="Units In Stock" textAlign="Right" width="170"></e-grid-column>
                        <e-grid-column field="Discontinued" headerText="Discontinued" width="150" displayAsCheckBox="true" textAlign="Center" type="boolean"></e-grid-column>
                    </e-grid-columns>
                </ejs-grid>
            </div>
        </div>
    </div>

    <div class="col-lg-4 property-section">



        <table id="property" title="Properties" style="width: 100%;">


            <tr>
                <td class="left-side">Columns</td>
                <td style="padding-bottom:10px">
                    <ejs-dropdownlist id="columns" dataSource="@Model.columns" value="@("CategoryName")" change="onChange" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </td>
            </tr>
            <tr>
                <td class="left-side" style="padding-bottom:10px">
                    <ejs-button id="hide" content="Hide"></ejs-button>
                </td>
                <td style="padding-bottom:10px">
                    <ejs-button id="show" disabled="true" content="Show"></ejs-button>
                </td>
            </tr>
            <tr>
                <td style="width: 30%">
                        Hidden Columns
                </td>
                <td style="width: 70%;">
                    <textarea id="hiddencolumns" style="resize: none;height:65px;padding: 6px" class="e-input e-textbox" readonly="readonly"></textarea>
                </td>
            </tr>
        </table>
    </div>

    <script>

        function onChange(args) {

            var columnName = this.value;
            var grid = document.getElementById("Grid").ej2_instances[0];
            var column = grid.getColumnByField(columnName);
            if (column.visible === undefined || column.visible) {
                document.getElementById("show").disabled = true;
                document.getElementById("hide").disabled = false;
            } else {
                document.getElementById("hide").disabled = true;
                document.getElementById("show").disabled = false;
            }
        }

        document.getElementById("hide").addEventListener("click", function() {
            var drop = document.getElementById("columns").ej2_instances[0], grid = document.getElementById("Grid").ej2_instances[0];
            var columnName = drop.value;
            var column = grid.getColumnByField(columnName);
            if (grid.getHeaderTable().querySelectorAll('th.e-hide').length === 3) {
                alert('Atleast one Column should be visible');
            } else {
                grid.showHider.hide(column.headerText, 'headerText');
                document.getElementById("hide").disabled = true;
                document.getElementById("show").disabled = false;
                document.getElementById("hiddencolumns").value = document.getElementById("hiddencolumns").value + column.headerText + '\n';
            }
        })

        document.getElementById("show").addEventListener("click", function() {
            var drop = document.getElementById("columns").ej2_instances[0], grid = document.getElementById("Grid").ej2_instances[0];
            var columnName = drop.value;
            var column = grid.getColumnByField(columnName);
            grid.showHider.show(column.headerText, 'headerText');
            document.getElementById("show").disabled = true;
            document.getElementById("hide").disabled = false;
            document.getElementById("hiddencolumns").value = document.getElementById("hiddencolumns").value.replace(column.headerText + '\n', '');
        })
    </script>
}
@section ActionDescription{
	<div id="action-description">
		<p>This sample demonstrates dynamic show hide columns feature of Grid. Select column name from the properties panel and
        click hide/show to toggle visibility.
		</p>
	</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Show or Hide Column in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
		<p>The Grid column can be showed/hidden dynamically using <code>showColumns </code> and <code>hideColumns</code> method of the Grid.</p>
    <p>In this demo, the columns can be showed and hidden by selecting the column name in the dropdown and click the Show or
        Hide buttons to toggle visibility. And the column`s visibility is toggled based on the
        <code>columns->headerText</code> value.</p>
    <br/>
    <p>The <code>columns->visible</code> property specifies the visibility of a column. To hide a column at the initial rendering, set the <code>columns->visible
     </code> property to false.</p>
	
    </div>
}
@section Title{
                    <title>ASP.NET Core Data Grid Show or Hide Column Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Show or Hide Column in ASP.NET Core Data Grid Control</h1>
                }