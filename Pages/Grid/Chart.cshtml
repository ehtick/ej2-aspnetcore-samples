@page
@model EJ2CoreSampleBrowser.Pages.Grid.ChartModel
@section ControlsSection {
    <div class="control-section">

        <style type="text/css" class="cssStyles">
            #GridChart .e-gridcontent .e-product-info,
            #GridChart .e-gridcontent .e-category-info {
                display: flex;
                align-items: center;
            }

            #GridChart .e-gridcontent .e-product-info img {
                width: 40px;
                height: 40px;
                border-radius: 20px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
            }

            #GridChart .e-gridcontent .e-product-info span,
            #GridChart .e-gridcontent .e-category-info span {
                margin: 0px 10px;
            }

            #GridChart .e-gridcontent .e-gridchart-sales-loss {
                color: red;
            }

            #GridChart .e-gridcontent .e-gridchart-sales-profit {
                color: green;
            }

            .material3-dark #GridChart .e-gridcontent .e-category-info path,
            .bootstrap5\.3-dark #GridChart .e-gridcontent .e-category-info path,
            .fluent2-dark #GridChart .e-gridcontent .e-category-info path,
            .tailwind3-dark #GridChart .e-gridcontent .e-category-info path,
            .fluent2-highcontrast #GridChart .e-gridcontent .e-category-info path,
            .fluent-dark #GridChart .e-gridcontent .e-category-info path,
            .highcontrast #GridChart .e-gridcontent .e-category-info path {
                fill: white;
            }

            .fluent2-highcontrast #GridChart .e-gridcontent .e-row:hover .e-category-info path,
            .fluent2-highcontrast #GridChart .e-gridcontent .e-rowcell.e-selectionbackground .e-category-info path,
            .highcontrast #GridChart .e-gridcontent .e-rowcell.e-selectionbackground .e-category-info path {
                fill: black;
            }

            #GridChart .grid-chart-checkbox-css {
                padding-left: 8px;
                padding-right: 8px;
            }

            .e-bigger #GridChart .grid-chart-checkbox-css {
                padding-left: 12px;
                padding-right: 12px;
            }

            #GridChart .grid-chart-checkbox-css .e-headerchkcelldiv {
                padding-left: 0px;
                padding-right: 0px;
                margin-left: 0px;
                margin-right: 0px;
                text-align: center;
            }

            #GridChart .grid-chart-checkbox-css .e-checkbox-wrapper .e-label {
                margin: 0px;
            }
        </style>
        <script src="~/scripts/chart/theme-color.js"></script>
        <script>
            var gridChart;

            function updateChartSettings(args) {
                var chartMargin = args.changes.chart.margin;
                if (!ej.base.isNullOrUndefined(chartMargin)) {
                    var accumulationChartMargin = args.changes.accumulationChart.margin;
                    if (!ej.base.isNullOrUndefined(chartMargin.top)) {
                        accumulationChartMargin.top = chartMargin.top = chartMargin.top < 20 ? 20 : chartMargin.top > 100 ? 100 : chartMargin.top;
                    } else if (!ej.base.isNullOrUndefined(chartMargin.bottom)) {
                        accumulationChartMargin.bottom = chartMargin.bottom = chartMargin.bottom < 20 ? 20 : chartMargin.bottom > 100 ? 100 : chartMargin.bottom;
                    } else if (!ej.base.isNullOrUndefined(chartMargin.left)) {
                        accumulationChartMargin.left = chartMargin.left = chartMargin.left < 20 ? 20 : chartMargin.left > 100 ? 100 : chartMargin.left;
                    } else if (!ej.base.isNullOrUndefined(chartMargin.right)) {
                        accumulationChartMargin.right = chartMargin.right = chartMargin.right < 20 ? 20 : chartMargin.right > 100 ? 100 : chartMargin.right;
                    }
                }
            }

            function gridCreated() {
                gridChart = new ej.gridchart.GridChart({
                    enablePropertyPanel: true,
                    allowExport: true,
                    enableRtl: this.enableRtl,
                    locale: this.locale,
                    updateChartSettings: updateChartSettings
                });
            }

            function gridQueryCellInfo(args) {
                if (args.column.field === 'ProfitLoss') {
                    args.cell.classList.add(args.data.ProfitLoss < 0 ? 'e-gridchart-sales-loss' : 'e-gridchart-sales-profit');
                }
            }

            function gridContextMenuClick(args) {
                if (args.chartType) {
                    var chartArgs = {
                        gridInstance: args.gridInstance,
                        chartType: args.chartType,
                        records: args.records
                    };
                    var chartModel = {
                        primaryXAxis: {
                            valueType: 'Category',
                            labelRotation: 315
                        },
                        primaryYAxis: {
                            title: 'Sales in amount',
                            titleStyle: { size: '11px' }
                        },
                        load: function (args) {
                            loadChartTheme(args);
                        }
                    };
                    var accumulationChartModel = {
                        load: function (args) {
                            loadAccumulationChartTheme(args);
                        }
                    };
                    chartModel.margin = accumulationChartModel.margin = { top: 20, bottom: 20, right: 20, left: 20 };
                    var model = { chart: chartModel, accumulationChart: accumulationChartModel };
                    var categorySeries = {
                        category: ['Product', 'Year'],
                        series: ['Online', 'Retail', 'Revenue']
                    };
                    gridChart.render(chartArgs, model, categorySeries);
                }
            }
        </script>
        <script type="text/x-template" id="producttemplate">
            <div class="e-product-info">
                <img src="@Url.Content("~/scripts/Images/product/${Image}.png")" alt="${Product}" />
                <span>${Product}</span>
            </div>
        </script>
        <script type="text/x-template" id="categorytemplate">
            <div class="e-category-info">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="${CategoryIcon}" fill="black" />
                </svg>
                <span>${Category}</span>
            </div>
        </script>
        <ejs-grid id="GridChart" dataSource="@Model.DataSource" height="500" allowFiltering="true" allowSorting="true" allowMultiSorting="true" allowSelection="true" gridLines="Both"
                  contextMenuItems="@(new List<object>() {"Bar", "StackingBar", "StackingBar100", "Pie", "Column", "StackingColumn", "StackingColumn100", "Line", "StackingLine", "StackingLine100", "Area", "StackingArea", "StackingArea100", "Scatter"})"
                  contextMenuClick="gridContextMenuClick" created="gridCreated" queryCellInfo="gridQueryCellInfo">
            <e-grid-filterSettings type="Menu"></e-grid-filterSettings>
            <e-grid-selectionsettings type="Multiple"></e-grid-selectionsettings>
            <e-grid-columns>
                <e-grid-column type="checkbox" width="50" freeze="Left" textAlign="Center" customAttributes=@(new{@class="grid-chart-checkbox-css"})></e-grid-column>
                <e-grid-column field="Product" headerText="Products" width="200" template="#producttemplate" freeze="Left"></e-grid-column>
                <e-grid-column field="Category" headerText="Categories" template="#categorytemplate" width="160"></e-grid-column>
                <e-grid-column field="Year" headerText="Year" textAlign="Right" width="140"></e-grid-column>
                <e-grid-column field="Online" headerText="Online" format="C2" textAlign="Right" width="160"></e-grid-column>
                <e-grid-column field="Retail" headerText="Retail" format="C2" textAlign="Right" width="160"></e-grid-column>
                <e-grid-column field="ProfitLoss" headerText="Profit/Loss" format="C2" textAlign="Right" width="200"></e-grid-column>
                <e-grid-column field="UnitsSold" headerText="Units Sold" textAlign="Right" width="160"></e-grid-column>
                <e-grid-column field="Revenue" headerText="Revenue" format="C2" textAlign="Right" freeze="Right" width="160"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
}
@section ActionDescription {
    <div id="action-description">
        <p>
            This sample demonstrates how to visualize grid data in a chart using the context menu feature. You will need to enable the
            context menu feature to access this functionality. <code>Right-click</code> on any row,
            select your preferred chart type, and a dialog will appear showing that data as a chart based on your category and series.
        </p>
    </div>
}

@section Meta {
    <meta name="description" content="This demo of the Essential JS 2 Grid component showcases the visual representation of data using a chart. Explore here for more details." />
}

@section Description {
    <div id="description">
        <p>
            The sample supports various chart types - <code>Line</code>, <code>Area</code>, <code>Column</code>,
            <code>Bar</code>, <code>Scatter</code>, <code>Pie</code> and their stacked variations.
            Charts are rendered using the <code>@@syncfusion/ej2-grid-chart</code> package's <code>render</code> method,
            which requires category, series and optional chart properties.
        </p>
        <p>
            This example uses categories like 'Product' and 'Year' with series data for 'Online', 'Retail' and
            'Revenue' in the chart visualization.
        </p>
    </div>
}
@section Title {
    <title>ASP.NET Core Data Grid with Chart Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of Chart in ASP.NET Core Data Grid Control</h1>
}
