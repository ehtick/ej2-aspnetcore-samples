@page
@model EJ2CoreSampleBrowser.Pages.Grid.RowSpanningModel
@{
    ViewData["Title"] = "RowSpanning";
}

<h2>RowSpanning</h2>

@section ControlsSection{
    <div class="control-section">
        <ejs-grid id="Grid" dataSource="@Model.DataSource" allowTextWrap="true" enableHover="false" allowSelection="false" queryCellInfo="QueryCellEvent" gridLines="Both">
            <e-grid-columns>
                <e-grid-column field="EmployeeID" headerText="Employee ID" isPrimaryKey="true" freeze="Left" textAlign="Right" width="150"></e-grid-column>
                <e-grid-column field="EmployeeName" headerText="Employee Name" width="200"></e-grid-column>
                <e-grid-column field="Time900" headerText="9.00 AM" width="120"></e-grid-column>
                <e-grid-column field="Time930" headerText="9.30 AM" width="120"></e-grid-column>
                <e-grid-column field="Time1000" headerText="10.00 AM" width="120"></e-grid-column>
                <e-grid-column field="Time1030" headerText="10.30 AM" width="120"></e-grid-column>
                <e-grid-column field="Time1100" headerText="11.00 AM" width="120"></e-grid-column>
                <e-grid-column field="Time1130" headerText="11.30 AM" width="120"></e-grid-column>
                <e-grid-column field="Time1200" headerText="12.00 AM" width="120"></e-grid-column>
                <e-grid-column field="Time1230" headerText="12.30 AM" width="120"></e-grid-column>
                <e-grid-column field="Time100" headerText="1.00 PM" width="120"></e-grid-column>
                <e-grid-column field="Time130" headerText="1.30 PM" width="120"></e-grid-column>
                <e-grid-column field="Time200" headerText="2.00 PM" width="120"></e-grid-column>
                <e-grid-column field="Time230" headerText="2.30 PM" width="120"></e-grid-column>
                <e-grid-column field="Time300" headerText="3.00 PM" width="120"></e-grid-column>
                <e-grid-column field="Time330" headerText="3.30 PM" width="120"></e-grid-column>
                <e-grid-column field="Time400" headerText="4.00 PM" width="120"></e-grid-column>
                <e-grid-column field="Time430" headerText="4.30 PM" width="120"></e-grid-column>
                <e-grid-column field="Time500" headerText="5.00 PM" width="120"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>

    <script>
        function QueryCellEvent(args)
        {
            var data = args.data;
            switch (data.EmployeeID) {
                case 10001:
                    if (args.column.field === 'Time900' || args.column.field === 'Time230') {
                        args.colSpan = 2;
                    } else if (args.column.field === 'Time1100') {
                        args.colSpan = 3;
                    } else if (args.column.field === 'Time100') {
                        args.colSpan = 3;
                        args.rowSpan = 10;
                    } else if (args.column.field === 'Time430') {
                        args.colSpan = 2;
                        args.rowSpan = 2;
                    } else if (args.column.field === 'EmployeeName') {
                        args.rowSpan = 2;
                    }
                    break;
                case 10002:
                    if (args.column.field === 'Time930') {
                        args.colSpan = 3;
                    } else if (args.column.field === 'Time1100') {
                        args.colSpan = 4;
                    } else if (args.column.field === 'Time230') {
                        args.colSpan = 2;
                        args.rowSpan = 5;
                    } else if (args.column.field === 'Time330') {
                        args.colSpan = 2;
                    }
                    break;
                case 10003:
                    if (args.column.field === 'Time900') {
                        args.colSpan = 3;
                        args.rowSpan = 2;
                    } else if (args.column.field === 'Time1030' || args.column.field === 'Time330' || args.column.field === 'Time430') {
                        args.colSpan = 2;
                    } else if (args.column.field === 'Time1130') {
                        args.colSpan = 3;
                    }
                    break;
                case 10004:
                    if (args.column.field === 'Time1100') {
                        args.colSpan = 4;
                    } else if (args.column.field === 'Time400') {
                        args.colSpan = 2;
                    }
                    break;
                case 10005:
                    if (args.column.field === 'Time900') {
                        args.colSpan = 4;
                    } else if (args.column.field === 'Time1130') {
                        args.colSpan = 3;
                    } else if (args.column.field === 'Time330') {
                        args.colSpan = 2;
                        args.rowSpan = 2;
                    } else if (args.column.field === 'Time430') {
                        args.colSpan = 2;
                    }
                    break;
                case 10006:
                    if (args.column.field === 'Time900' || args.column.field === 'Time430') {
                        args.colSpan = 2;
                    } else if (args.column.field === 'Time1000') {
                        args.colSpan = 3;
                    } else if (args.column.field === 'Time1130') {
                        args.colSpan = 3;
                    }
                    break;
                case 10007:
                    if (args.column.field === 'Time900' || args.column.field === 'Time1030' || args.column.field === 'Time300') {
                        args.colSpan = 2;
                    } else if (args.column.field === 'Time1130' || args.column.field === 'Time400') {
                        args.colSpan = 3;
                    }
                    break;
                case 10008:
                    if (args.column.field === 'Time900' || args.column.field === 'Time1030') {
                        args.colSpan = 3;
                    } else if (args.column.field === 'Time230') {
                        args.colSpan = 3;
                        args.rowSpan = 2;
                    } else if (args.column.field === 'Time400') {
                        args.colSpan = 2;
                    }
                    break;
                case 10009:
                    if (args.column.field === 'Time900') {
                        args.colSpan = 3;
                    } else if (args.column.field === 'Time1130') {
                        args.colSpan = 3;
                        args.rowSpan = 2;
                    } else if (args.column.field === 'Time430') {
                        args.colSpan = 2;
                    }
                    break;
                case 10010:
                    if (args.column.field === 'Time900' || args.column.field === 'Time230' || args.column.field === 'Time400') {
                        args.colSpan = 3;
                    } else if (args.column.field === 'Time1030') {
                        args.colSpan = 2;
                    }
                    break;
            }

         }
    </script>
}
@section ActionDescription{
<div id="action-description">
    <p>This sample demonstrates the Grid component with the row spanning feature. In this sample, you will see multiple rows spanning.
    </p>
</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Row Spanning in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
<div id="description">
    <p>
        This feature enables you to span multiple adjacent cells. Use the <code>rowSpan</code> attribute to define how many cells are to be spanned in the <a href='https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Grids.Grid.html#Syncfusion_EJ2_Grids_Grid_QueryCellInfo' aria-label="Navigate to the QueryCellInfo event reference for ASP.NET Core Grid control"><code>QueryCellInfo</code></a> event.
        Additionally, you can freeze columns at specific positions by setting the freeze property to left, right, center and fixed in the column definition.
    </p>
    <p>
        In this demo, you can see that the <b>Davolio</b> cell is spanned to two rows in the employee named column. Similarly, the <b>Lunch Break</b> cell is spanned to ten rows and three columns in the 1:00 column.
        Also, the <b>Employee ID</b> column is frozen to the left.
    </p>
        <p>
            More information on the row spanning can be found in this
            <a target="_blank"
            href="https://ej2.syncfusion.com/aspnetcore/documentation/grid/row/row-spanning" aria-label="Navigate to the documentation for Row Spanning in ASP.NET Core Grid control">
            documentation section</a>.
        </p>
</div>
}
@section Title{
                    <title>ASP.NET Core Data Grid Row Spanning Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Row Spanning in ASP.NET Core Data Grid Control</h1>
                }