@page
@model EJ2CoreSampleBrowser.Pages.Grid.DialogTemplateModel

@{
    ViewData["Title"] = "DialogTemplate";
}

@section ControlsSection{
    @Html.AntiForgeryToken()
    <div class="control-section">
        <ejs-grid id="Grid" dataSource="@Model.DataSource" allowSorting="true" allowFiltering="true" actionComplete="actionComplete" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" allowPaging="true">
            <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog" template='#dialogtemplate'></e-grid-editSettings>
            <e-grid-pagesettings pageCount="5 "></e-grid-pagesettings>
            <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
            <e-grid-columns>
                <e-grid-column field="OrderID" headerText="Order ID" isPrimaryKey="true" validationRules="@(new { required=true, number=true})" textAlign="Right" width="120"></e-grid-column>
                <e-grid-column field="CustomerID" headerText="Customer Name" validationRules="@(new { required=true})" width="150"></e-grid-column>
                <e-grid-column field="Freight" headerText="Freight" validationRules="@(new { required=true})" textAlign="Right" editType="numericedit" format="C2" width="120"></e-grid-column>
                <e-grid-column field="OrderDate" headerText="Order Date" editType="datepickeredit" format="yMd" width="170"></e-grid-column>
                <e-grid-column field="ShipCountry" headerText="Ship Country" editType="dropdownedit" width="150"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>

    <script id='dialogtemplate' type="text/x-template">
        <div id="dialogTemp">
        </div>
    </script>
    
    <script>
        function actionComplete(args) {
            if (args.requestType === 'beginEdit' || args.requestType === 'add') {
                let spinner = ej.popups.createSpinner({ target: args.dialog.element });
                ej.popups.showSpinner(args.dialog.element);
                if (args.requestType === 'beginEdit') {
                    var path = window.location.href.split('#');
                    var ajax = new ej.base.Ajax({
                        url: path[0] + "?handler=EditPartial", //render the partial view
                        type: "POST",
                        beforeSend: function (xhr) {
                            ajax.httpRequest.setRequestHeader("XSRF-TOKEN",
                                document.querySelector('input[type="hidden"][name="__RequestVerificationToken"]').value);
                        },
                        contentType: "application/json",
                        dataType: 'json',
                        data: JSON.stringify({ value: args.rowData })
                    });
                    ajax.send().then(function (data) {
                        appendElement(data, args.form); //Render the edit form with selected record
                        args.form.elements.namedItem('CustomerID').focus();
                        ej.popups.hideSpinner(args.dialog.element);
                    }).catch(function (xhr) {
                        console.log(xhr);
                        ej.popups.hideSpinner(args.dialog.element);
                    });
                }
                if (args.requestType === 'add') {
                    var path = window.location.href.split('#');
                    var ajax = new ej.base.Ajax({
                        url: path[0] + "?handler=AddPartial", //render the partial view
                        type: "POST",
                        beforeSend: function (xhr) {
                            ajax.httpRequest.setRequestHeader("XSRF-TOKEN",
                                document.querySelector('input[type="hidden"][name="__RequestVerificationToken"]').value);
                        },
                        contentType: "application/json",
                        dataType: 'json',
                        data: JSON.stringify({ value: args.rowData })
                    });
                    ajax.send().then(function (data) {
                        appendElement(data, args.form);
                        args.form.elements.namedItem('OrderID').focus();
                        ej.popups.hideSpinner(args.dialog.element);
                    }).catch(function (xhr) {
                        console.log(xhr);
                        ej.popups.hideSpinner(args.dialog.element);
                    });
                }
            }
        }

        function appendElement(elementString, form) {
            form.querySelector("#dialogTemp").innerHTML = elementString;
            form.ej2_instances[0].addRules('OrderID', { required: true, number: true });
            form.ej2_instances[0].addRules('CustomerID', { required: true }); 
            form.ej2_instances[0].addRules('Freight', { required: true });  //adding the form validation rules 
            form.ej2_instances[0].refresh();  // refresh method of the formObj
            var script = document.createElement('script');
            script.type = "text/javascript";
            var serverScript = form.querySelector("#dialogTemp").querySelector('script');
            script.textContent = serverScript.innerHTML;
            document.head.appendChild(script);
            serverScript.remove();
        }
    </script>
    <style>
    .form-group.col-md-6 {
        width: 250px;
    }
    #ShipAddress{
        resize: vertical;
    }
    :-ms-fullscreen, .e-dialog{
        max-width: 552px;
    }
    @@media only screen and (max-width: 991px) {
        .e-dialog.e-control.e-popup {
            min-width: 300px !important;
        }    
    }
    @@media only screen and (min-width: 992px) {
        .e-edit-dialog.e-dialog.e-control.e-popup {
            min-width: 550px !important;
            min-height: 415px;
        }

        .e-bigger.e-edit-dialog.e-dialog.e-control.e-popup,
        .e-bigger .e-edit-dialog.e-dialog.e-control.e-popup {
            min-height: 496px;
        }
    }
    </style>
}

@section ActionDescription{
	<div id="action-description">
        <p>This sample demonstrates CRUD operations in Grid with Dialog Template. You can perform CRUD operations as follows,</p>
        <ul>
            <li><code>Add</code> -  To add new record, click Add toolbar button </li>
            <li><code>Edit</code> - To edit record, double click a row or click toolbar Edit button after selected a row </li>
            <li><code>Delete</code> - To delete record, click toolbar Delete button after selected a row </li>
            <li><code>Update</code>,<code>Cancel</code> - You can save or discard changes by click toolbar Update and Cancel button respectively</li>
        </ul>
	</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Dialog Template in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">		   
		<p> The Grid supports CRUD operations. This CRUD operations can be configured in Grid using
            <code> editSettings </code>.
        </p>
    
        <p>
            In this demo, Dialog template is enabled for editing by defining <code>
                editSettings.mode </code> as <code>Dialog</code> and <code> editSettings.template </code>
                as SCRIPT element`s ID which holds the template. You can start editing by double clicking a row or clicking on toolbar's <code>Edit</code>
            button, then the currently selected row will be shown on a dialog with custom elements and you can change the row values and save edited data to the datasource.
        </p>
	</div>
}
@section Title{
                    <title>ASP.NET Core Data Grid Dialog Template Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Dialog Template in ASP.NET Core Data Grid Control</h1>
                }
