@page
@model EJ2CoreSampleBrowser.Pages.Grid.GroupingModel

@{
    ViewData["Title"] = "Grouping";
    var alertanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
    var alertbutton = new
    {
        content = "OK",
        isPrimary = true
    };
}

@section ControlsSection{
    <div class="control-section">
        <ejs-grid id="Grid" created="created" dataSource="@Model.DataSource" allowGrouping="true" allowFiltering="true" allowSorting="true" toolbar="@(new List<string>() { "Edit", "Update", "Cancel" })" allowPaging="true">
            <e-grid-groupSettings showDropArea="true" columns="@(new string[] { "ShipCountry"})"></e-grid-groupSettings>
                        <e-grid-editSettings allowEditing="true"></e-grid-editSettings>
            <e-grid-pagesettings pageCount=5></e-grid-pagesettings>
            <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
            <e-grid-columns>
                <e-grid-column field="OrderID" headerText="Order ID" isPrimaryKey="true" validationRules="@(new { required=true, number=true})" width="140"></e-grid-column>
                <e-grid-column field="CustomerID" headerText="Customer Name" validationRules="@(new { required=true})" width="150"></e-grid-column>
                <e-grid-column field="Freight" headerText="Freight" validationRules="@(new { required=true})" textAlign="Right" editType="numericedit" format="C2" width="140"></e-grid-column>
                <e-grid-column field="OrderDate" headerText="Order Date" editType="datetimepickeredit" allowGrouping="false" customFormat="@(new {type = "datetime", format = "M/d/y hh:mm a" })" width="160"></e-grid-column>
                <e-grid-column field="ShipCountry" headerText="Ship Country" editType="dropdownedit" width="150"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
    <ejs-dialog id="alert_dialog" animationSettings="alertanimation" visible="false" target=".control-section" width="300px" header="Grouping" content="Grouping is disabled for this column">
        <e-dialog-buttons>
            <e-dialog-dialogbutton buttonModel="@alertbutton" click="alertBtnClick"></e-dialog-dialogbutton>
        </e-dialog-buttons>
    </ejs-dialog>

    <script>

        function created(args) {
            var grid = document.getElementById('Grid').ej2_instances[0];
            grid.on("columnDragStart", columnDragStart, this);
        }
        function columnDragStart(args) {
             if(args.column.field === "OrderDate"){
                 var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
                 dialogObj.show();
              }
        }
        function alertBtnClick() {
            var dialogObj = document.getElementById('alert_dialog').ej2_instances[0];
            dialogObj.hide();
        }
    </script>

}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates grouping feature of the Grid component. In this sample, the Grid data is grouped against
            ShipCountry column. To group any other column simply drag the column header and drop on the group drop area.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Default Grouping in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
            The Grid control has options to group the records based on the required column. When grouping is applied, grouped records
            are organized into a hierarchical structure to facilitate easier expansion and collapse of records. To enable grouping,
            set <code>allowGrouping</code> property as true.
        </p>
        <p>Columns can be grouped by simply dragging the column header and drop on the group drop area.</p>
        <p>In this demo, to group a specify column, drag and drop the column in the group drop area.</p>
        <p>
            In this demo, editing options can be enabled by setting <code>editSettings.allowEditing</code> as <code>true</code>.
            You can start editing by double-clicking a row or the toolbar `Edit` button. 
            Once in edit mode, you have the ability to modify the values of the selected row. 
            When saving the record, the Grid will refresh the specific edited row without affecting the expanded group state.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Data Grid Default Grouping Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default Grouping in ASP.NET Core Data Grid Control</h1>
                }
