@page
@model EJ2CoreSampleBrowser.Pages.Grid.GridLinesModel
@{
    ViewData["Title"] = "GridLines";
}

<h2>GridLines</h2>

@section ControlsSection{

    <div class="col-lg-8 control-section">
        <div class="control-wrapper">
           
                <ejs-grid id="Grid" dataSource="@Model.DataSource" allowSorting="true" allowFiltering="true" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
                    <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
                    <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true"></e-grid-editSettings>
                    <e-grid-columns>                        
                        <e-grid-column field="EmployeeID" headerText="Employee ID" textAlign="Right" width="125" isPrimaryKey="true" validationRules="@(new { required=true, number=true})"></e-grid-column>
                        <e-grid-column field="FirstName" headerText="First Name" width="120" validationRules="@(new { required=true, minLength=5})"></e-grid-column>
                        <e-grid-column field="Title" headerText="Title" width="170"></e-grid-column>
                        <e-grid-column field="HireDate" headerText="Hire Date" format="yMd" textAlign="Right" width="135" editType="datepickeredit"></e-grid-column>                        
                    </e-grid-columns>
                </ejs-grid>
                
            </div>
        </div>
   
<div class="col-lg-4 property-section">
    
    
    <table id="property" title="Properties" style="width: 100%;">       
           
        
        <tr>
            <td class="left-side">GridLines</td>
            <td>
                <ejs-dropdownlist id="lines" dataSource="@Model.data" change="onChange" index="0" popupHeight="220px"></ejs-dropdownlist>
            </td>
        </tr>
    </table>
</div>

    <script>
        function onChange() {
            var grid = document.getElementById("Grid").ej2_instances[0];
            grid.gridLines= this.value;
        }
    </script>
}
@section ActionDescription{
	<div id="action-description">
		<p>This sample demonstrates visibility of the grid lines that separates the rows and columns. In this sample, you can change
			the gridline from the properties panel.</p>
	</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the GridLines in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
    <p>
        The <code>gridLines</code> property is used to control the line visibility that separates the rows and columns. The Grid
        allow us to display the following grid lines,
    </p>
    <ul>
        <li><code>Default</code> - Shows the Horizontal line.</li>
        <li><code>None</code> - Shows no line.</li>
        <li><code>Both</code> - Shows both Horizontal and Vertical lines.</li>
        <li><code>Horizontal</code> - Shows the Horizontal line.</li>
        <li><code>Vertical</code> - Shows the Vertical line.</li>
    </ul>
    <p> In this demo, you can modify the display of gridlines by selecting values in the dropdown.
    </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Data Grid GridLines Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of GridLines in ASP.NET Core Data Grid Control</h1>
                }