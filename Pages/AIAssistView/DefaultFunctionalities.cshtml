@page
@model EJ2CoreSampleBrowser.Pages.AIAssistView.DefaultFunctionalitiesModel
@using Syncfusion.EJ2
@using System.Text.Json;

@section ControlsSection {
    <div class="control-section">
        <div class="default-aiassistview">
            <ejs-aiassistview id="aiAssistView" promptSuggestions="@Model.PromptSuggestionData" bannerTemplate="#bannerContent" promptRequest="onPromptRequest">
                <e-aiassistview-toolbarsettings items="@Model.Items" itemClicked="toolbarItemClicked"></e-aiassistview-toolbarsettings>
            </ejs-aiassistview>
        </div>
    </div>
}

@section PreScripts{
    <script>
        var prompts = @Html.Raw(JsonSerializer.Serialize(Model.PromptResponseData));
        var suggestions = @Html.Raw(JsonSerializer.Serialize(Model.PromptSuggestionData));

        function onPromptRequest(args) {
            setTimeout(() => {
                var foundPrompt = prompts.find(prompt => prompt.Prompt == args.prompt);
                var defaultResponse = 'For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.';
                this.addPromptResponse(foundPrompt ? foundPrompt.Response : defaultResponse);
                this.promptSuggestions = (foundPrompt?.SuggestionData && foundPrompt.SuggestionData.length > 0) ? foundPrompt.SuggestionData : suggestions;
            }, 2000);
        }

        function toolbarItemClicked(args) {
            if (args.item.iconCss === 'e-icons e-refresh') {
                this.prompts = [];
                this.promptSuggestions = suggestions;
            }
        }
    </script>

    <script id="bannerContent" type="text/x-jsrender">
        <div class="banner-content">
            <div class="e-icons e-assistview-icon"></div>
            <h3>AI Assistance</h3>
            <i>To get started, provide input or choose a suggestion.</i>
        </div>
    </script>
}

<style>
    .default-aiassistview {
        height: 600px;
        width: 60vw;
        margin: 0 auto;
    }

    .default-aiassistview .banner-content .e-assistview-icon:before {
        font-size: 35px;
    }

    .default-aiassistview .banner-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        height: 330px;
        text-align: center;
    }

    @@media only screen and (max-width: 750px) {
        .default-aiassistview {
            width: 100%;
        }
    }
</style>

@section Meta{
    <meta name="description" content="This example demonstrates the DefaultFunctionalities in ASP.NET Core AI AssistView control. Explore here for more details." />
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the default functionalities of the AI AssistView control. The AI AssistView creates an interface through which users can interact with AI-driven suggestions and prompts.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>In this example, the <code>bannerTemplate</code> customizes the banner content, and <code>toolbarSettings</code> adds custom toolbar items like a right-aligned <code>Refresh</code> button. The <code>promptSuggestions</code> provides AI prompt suggestions, and <code>promptRequest</code> handles prompt requests when triggered.</p>
    </div>
}