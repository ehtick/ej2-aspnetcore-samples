@page
@model EJ2CoreSampleBrowser.Pages.AutoComplete.CustomFiltering
@using Syncfusion.EJ2
@using Newtonsoft.Json

@section ControlsSection{
    <div class="col-lg-8 control-section" style="height: 400px;">
        <div class='control-wrapper'>
            <div style='padding-top:70px;'>
                <ejs-autocomplete id="books" placeholder="e.g. Node.js Succinctly" dataSource="@Model.Book" filtering="filtering" debounceDelay="300">
                    <e-autocomplete-fields value="BookName"></e-autocomplete-fields>
                </ejs-autocomplete>
            </div>
        </div>
    </div>
    <div class="col-lg-4 property-section" style="padding-bottom:15px">
        <div class="property-panel-section">
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <label class="example-label">Debounce Delay</label>
                <ejs-numerictextbox id="numeric" format="n0" value="300" min="0" change="change"></ejs-numerictextbox>
            </div>
        </div>
    </div>
    @*custom code start*@
    <style>
        .control-wrapper {
            margin: 0 auto;
            width: 300px;
        }
    </style>
    @*custom code end*@
    <script src="~/scripts/fuse.min.js"></script>
    <script type="text/javascript">
        function filtering(e) {
            var options = {
                keys: ['BookName'],
                includeMatches: true,
                findAllMatches: true
            };
            var fuse = new Fuse(@Html.Raw(JsonConvert.SerializeObject(@Model.Book)), options);
            var result = fuse.search(e.text);
            var data = [];
            for (var i = 0; i < result.length; i++) {
                data.push(result[i].item);
            }
            e.updateData(data, null);
            var popupElement = document.getElementById('books_popup');
            if (popupElement)
            {
                var lists = popupElement.querySelectorAll('.e-list-item');
                highlightSearch(lists, result);
            }
        }
        function highlightSearch(listItems, result) {
            if (result.length > 0) {
                for (var i = 0; i < listItems.length; i++) {
                    var innerHTML = listItems[i].innerHTML;
                    for (var j = result[i].matches[0].indices.length - 1; j >= 0; j--) {
                        var indexes = result[i].matches[0].indices[j];
                        innerHTML = innerHTML.substring(0, indexes[0]) + '<span class="e-highlight">' +
                            innerHTML.substring(indexes[0], (indexes[1] + 1)) + '</span>' + innerHTML.substring(indexes[1] + 1);
                        listItems[i].innerHTML = innerHTML;
                    }
                }
            }
        }
         function change(args) {
            var autoCompleteObj = document.getElementById('books').ej2_instances[0];
            autoCompleteObj.debounceDelay = args.value;
        }
    </script>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Custom Filtering in ASP.NET Core AutoComplete control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the custom filtering functionalities of the AutoComplete. You can choose
            an item from the suggestion list that filtered items based on approximate string matching technique.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The AutoComplete can be customized to showcase the suggestion list by using the <code>filtering</code> event.
            In that, you can use your own libraries to filter the data and update it to AutoComplete suggestion list via <code>updateData</code> method.
            The debounce delay, in milliseconds, for filtering the items in the AutoComplete component can be set by using the <code>debounceDelay</code> property.
        </p>

        <p>In this sample, used Fuse.js library for custom filtering of books data.</p>
        <p>
            For more information about Fuse.js can be found in this <a href="http://fusejs.io/" target="_blank" aria-label="Navigate to Fuse.js Official Website"> reference link</a>.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core AutoComplete Custom Filtering Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Custom Filtering in ASP.NET Core AutoComplete Control</h1>
                }