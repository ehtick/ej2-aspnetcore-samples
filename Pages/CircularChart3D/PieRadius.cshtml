@page
@model EJ2CoreSampleBrowser.Pages.CircularChart3D.PieRadiusModel

@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section" align="center">
        <ejs-circularchart3d id="donutContainer" load="load" title="Population Density per Square Kilometer by Country" rotation="15" tilt="-15">
            <e-circularchart3d-tooltipsettings enable="true" format="<b>${point.x}</b><br/>Area in square km: <b>${point.y} </b> <br/> Population density per square km: <b>${point.tooltip}</b>">
            </e-circularchart3d-tooltipsettings>
            <e-circularchart3d-legendsettings visible="true" reverse="true">
            </e-circularchart3d-legendsettings>
            <e-circularchart3d-series-collection>
                <e-circularchart3d-series dataSource="@Model.ChartPoints" xName="X" yName="Y" innerRadius="20%" tooltipMappingName="R" radius="R">
                    <e-circularchart3d-series-datalabel visible="true" name="Text" enableRotation="true">
                        <e-font fontWeight="600"></e-font>
                        <e-connectorstyle length="20px"></e-connectorstyle>
                    </e-circularchart3d-series-datalabel>
                    <e-circularchart3dseries-animation enable="false"></e-circularchart3dseries-animation>
                </e-circularchart3d-series>
            </e-circularchart3d-series-collection>
        </ejs-circularchart3d>
    </div>
    <script src="~/scripts/CircularChart3D/theme-color.js"></script>
    <script>
        function load(args) {
            loadCircular3DChartTheme(args);
            args.chart.series[0].dataLabel.position = ej.base.Browser.isDevice ? "Inside" : "Outside";
            args.chart.series[0].dataSource[0].Radius = ej.base.Browser.isDevice ? "110" : "100";
            args.chart.series[0].dataSource[1].Radius = ej.base.Browser.isDevice ? "120" : "118.7";
            args.chart.series[0].dataSource[3].Radius = ej.base.Browser.isDevice ? "104.6" : "124.6";
            args.chart.series[0].dataSource[4].Radius = ej.base.Browser.isDevice ? "130.8" : "150.8";
            args.chart.series[0].dataSource[5].Radius = ej.base.Browser.isDevice ? "135.5" : "155.5";
        }
    </script>
}
@*custom code start*@
@section Scripts {
}
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
    <meta name="description" content="This example demonstrates the 3D Circular Chart Pie with Various Radius in ASP.NET Core 3D Circular Chart control. Explore here for more details." />
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample compares countries by population density and total area using various radii in a 3D pie series.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render a 3D donut chart with varying radii. You can use the <code>Radius</code> mapping property to achieve this feature. The data labels are used to represent individual data and its values. In addition, the sample shows how to change the order of legend for the donut chart by using the <code>Reverse</code> property.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point on touch-enabled devices.
    </p>
}
@section Title{
    <title>ASP.NET Core 3D Circular Chart Pie with Various Radius Example - Syncfusion Demos </title>
                }
@section Header{
    <h1 class='sb-sample-text'>Example of 3D Circular Chart Pie with Various Radius in ASP.NET Core 3D Circular Chart Control</h1>
                }