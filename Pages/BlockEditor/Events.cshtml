@page
@model EJ2CoreSampleBrowser_NET9.Pages.BlockEditor.EventsModel

@using Syncfusion.EJ2

@section ControlsSection {
    <div class="col-lg-8 control-section">
        <div class="content-wrapper">
            <ejs-blockeditor id="events-blockeditor" created="function(e){ logEvent('created'); }" contentChanged="function(e){ logEvent('contentChanged'); }" blockAdded="function(e){ logEvent('blockAdded'); }" blockRemoved="function(e){ logEvent('blockRemoved'); }" blockMoved="function(e){ logEvent('blockMoved'); }" blockDrag="function(e){ logEvent('blockDrag'); }" blockDragStart="function(e){ logEvent('blockDragStart'); }" blockDrop="function(e){ logEvent('blockDrop'); }" focus="function(e){ logEvent('focus'); }" blur="function(e){ logEvent('blur'); }" selectionChanged="function(e){ logEvent('selectionChanged'); }" beforePaste="function(e){ logEvent('beforePaste'); }" afterPaste="function(e){ logEvent('afterPaste'); }" undoRedoPerformed="function(e){ logUndoRedoEvent(e); }">
                <e-blocks>
                    @foreach (var block in Model.BlockDataEvents)
                    {
                        <e-block id="@block.Id" type="@block.Type" content="@block.Content" props="@block.Props"></e-block>
                    }
                </e-blocks>
            </ejs-blockeditor>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Event Trace">
            <tbody>
                <tr>
                    <td>
                        <div class="eventarea" style="height: 245px;overflow: auto">
                            <span id="eventLog" style="word-break: normal;"></span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="evtbtn" style="padding-bottom: 10px">
                            <ejs-button id="clear" content="Clear"></ejs-button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

@section PreScripts {
    <script>
        function logEvent(eventName) {
            appendElement(`BlockEditor <b>${eventName}</b> event called<hr>`);
        };

        function logUndoRedoEvent(event) {
            appendElement(`BlockEditor <b>${event.isUndo ? 'Undo' : 'Redo'}</b> action performed<hr>`);
        }

        function appendElement(html) {
            var span = document.createElement('span');
            span.innerHTML = html;
            var log = document.getElementById('eventLog');
            log.insertBefore(span, log.firstChild);
        };

        document.getElementById('clear').onclick = function() {
            document.getElementById('eventLog').innerHTML = '';
        };
    </script>
}

<style>
    #eventLog b {
        color: #018607;
    }

    .material3-dark #eventLog b, .fluent-dark #eventLog b, .bootstrap5-dark #eventLog b,
    .bootstrap5\.3-dark #eventLog b, .bootstrap-dark #eventLog b, .tailwind-dark #eventLog b,
    .tailwind3-dark #eventLog b, .highcontrast #eventLog b, .material-dark #eventLog b,
    .fabric-dark #eventLog b {
        color: #21A32E;
    }

    hr {
        margin: 1px 10px 1px 0px;
        border-top: 1px solid #eee;
    }

    .control-wrapper {
        margin: 0 auto;
    }
</style>

@section Meta {
    <meta name="description" content="This example demonstrates the Events in ASP.NET Core Block Editor control. Explore here for more details." />
}

@section ActionDescription {
    <div id="action-description">
        <p>This sample demonstrates the events that trigger on every action of the Block Editor. The event details are showcased in the event trace panel.</p>
    </div>
}

@section Description {
    <div id="description">
        <p>The Block Editor triggers events based on its actions. These events can be used as extension points to perform custom operations.</p>
        <ul>
            <li><code>created</code> - Triggers after the Block Editor is rendered completely.</li>
            <li><code>contentChanged</code> - Triggers when the content of the block editor is changed.</li>
            <li><code>selectionChanged</code> - Triggers when the selection in the block editor changes.</li>
            <li><code>blockAdded</code> - Triggers when a new block is added to the editor.</li>
            <li><code>blockRemoved</code> - Triggers when a block is removed from the editor.</li>
            <li><code>blockMoved</code> - Triggers when a block is moved within the editor.</li>
            <li><code>blockDrag</code> - Triggers during the dragging operation of a block.</li>
            <li><code>blockDragStart</code> - Triggers when the drag operation for a block starts.</li>
            <li><code>blockDrop</code> - Triggers when a block is dropped after a drag operation.</li>
            <li><code>focus</code> - Triggers when the block editor gains focus.</li>
            <li><code>blur</code> - Triggers when the block editor loses focus.</li>
            <li><code>beforePaste</code> - Triggers before pasting the content in the block editor.</li>
            <li><code>afterPaste</code> - Triggers after pasting the content in the block editor.</li>
            <li><code>undoRedoPerformed</code> - Triggers when the undo/redo actions are performed in the block editor.</li>
        </ul>
    </div>
}