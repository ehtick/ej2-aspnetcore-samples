@page
@model EJ2CoreSampleBrowser.Pages.DropDownList.Cascading
@using Syncfusion.EJ2

@section ControlsSection{
<div class="col-lg-12 control-section">
    <div class='control-wrapper'>
        <div class="padding-top">
            <ejs-dropdownlist id="country" placeholder="Select a country" popupHeight="auto" dataSource="@Model.Countries" change="countrychange">
                <e-dropdownlist-fields text="CountryName" value="CountryId"></e-dropdownlist-fields>
            </ejs-dropdownlist>

        </div>
        <div class="padding-top">
            <ejs-dropdownlist id="state" enabled="false" placeholder="Select a state" popupHeight="auto" dataSource="@Model.States" change="statechange">
                <e-dropdownlist-fields text="StateName" value="StateId"></e-dropdownlist-fields>
            </ejs-dropdownlist>
        </div>
        <div class="padding-top">
            <ejs-dropdownlist id="city" placeholder="Select a city" enabled="false" popupHeight="auto" dataSource="@Model.Cities">
                <e-dropdownlist-fields text="CityName" value="CityId"></e-dropdownlist-fields>
            </ejs-dropdownlist>
        </div>
    </div>
</div>

    @*custom code start*@
    <style>
        .control-wrapper {
            margin: 0 auto;
            width: 250px;
        }

        .control-section .padding-top {
            padding-top: 35px
        }
    </style>
    @*custom code end*@
    <script type="text/javascript">
        function countrychange() {
            // disable the state DropDownList
             var state = document.getElementById('state').ej2_instances[0];
             var city = document.getElementById('city').ej2_instances[0];
             var country = document.getElementById('country').ej2_instances[0];
             state.enabled = true;
             //frame the query based on selected value in country DropDownList.
             var tempQuery = new ej.data.Query().where('CountryId', 'equal', country.value);
            // set the framed query based on selected value in country DropDownList.
             state.query = tempQuery;
            // set null value to state DropDownList text property
              state.text = null;
           //  bind the property changes to state DropDownList
             state.dataBind();
            // set null value to city DropDownList text property
              city.text = null;
            // disable the city DropDownList
              city.enabled = false;
            // bind the property changes to City DropDownList
              city.dataBind();
        }
        function statechange() {
            var city = document.getElementById('city').ej2_instances[0];
            var state = document.getElementById('state').ej2_instances[0];
              city.enabled = true;
             //Query the data source based on state DropDownList selected value
              var tempQuery = new ej.data.Query().where('StateId', 'equal', state.value);
             //set the framed query based on selected value in city DropDownList.
             city.query = tempQuery;
            //clear the existing selection
             city.text = null;
             //bind the property change to city DropDownList
              city.dataBind();

        }
    </script>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Cascading in ASP.NET Core Dropdown List control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the cascading functionalities of the DropDownList. Choose a country from
            the countries DropDownList, then respective states will be loaded in the second DropDownList
            and the same has to be done between states and cities DropDownList.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The <code>Cascading</code> DropDownList is the series of DropDownList, where the value of one DropDownList depends on
            the another DropDownList value. This can be configured by using the <code>change</code> event of parent DropDownList.
            Within that change event handler, you should load the data to child DropDownList based on the selected value of parent
            DropDownList.
        </p>

        <p>
            In this sample, if a country is selected from countries DropDownList, the respective states will be loaded in the second DropDownList
            and the same has to be done between states and cities DropDownList.
        </p>
        <p>
            More information on the Cascading feature configuration can be found in the
            <a href="https://ej2.syncfusion.com/aspnetcore/documentation/drop-down-list/how-to/cascading" target="_blank "aria-label="Navigate to the documentation for Configure the Cascading DropDownList" > Documentation section</a>.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Dropdown List Cascading Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Cascading in ASP.NET Core Dropdown List Control</h1>
                }