@page

@using Syncfusion.EJ2
@{
    var Modalanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
    var Okbutton = new {
        content="OK",
        isPrimary = true
    };
}
@section ControlsSection {
    <div class=" col-lg-8 control-section" id="target">
        <ejs-button id="dialogBtn" content="Open"></ejs-button>
        <ejs-dialog id="modal_dialog" animationSettings="Modalanimation" width="335px" target="#target" open="dialogOpen" close="dialogClose" header="Software Update" isModal="true" created="modalCreated">
            <e-content-template>
                Your current software version is up to date.
            </e-content-template>
            <e-dialog-buttons>
                <e-dialog-dialogbutton buttonModel="Okbutton" click="dlgButtonClick"></e-dialog-dialogbutton>
            </e-dialog-buttons>
        </ejs-dialog>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td style="width:60%;">
                        <div style="font-size:13px;">Close on overlay click</div>
                    </td>
                    <td>
                        <ejs-checkbox id="checkbox" checked="false" change="onChange"></ejs-checkbox>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

<style>
    #target .control-wrapper {
        margin: 0px;
    }
    /* custom code start */
    #target {
        min-height: 350px;
    }

    @@media screen and (min-width: 150px) and (max-width: 480px) {
        .control-section {
            margin-bottom: 30px;
        }

        .control-wrapper {
            margin-bottom: 0px;
        }
    }
    /* custom code end */
</style>

@section PreScripts {
    <script>
        var dialogObj;
        var dialogBtn = document.getElementById('dialogBtn');
        dialogBtn.addEventListener('click', function () {
            dialogObj.show();
        });
        function modalCreated() {
            dialogObj = this;
        }
        function onChange(args) {
            if (args.checked) {
                dialogObj.overlayClick = function () {
                    dialogObj.hide();
                };
            } else {
                dialogObj.overlayClick = function () {
                    dialogObj.show();
                };
            }
        }
        function dialogClose() {
            dialogBtn.style.display = 'block';
        }
        function dialogOpen() {
            dialogBtn.style.display = 'none';
            /* custom code start */
            document.getElementById("modal_dialog").ej2_instances[0].zIndex = 10000;
            /* custom code end */
        }
        function dlgButtonClick() {
            dialogObj.hide();
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This example demonstrates the modal behavior of Dialog control.
            Choose "Close on overlay" option from property panel to decide whether the Dialog will be closed on click on the overlay.
            Click on “Open” button to show the Dialog again if it is closed.
        </p>

    </div>
}
@section Description{
    <div id="description">
        <p>
            A modal prevents the access to the parent application, so that the user must interact with the Dialog before continuing
            the parent application.
        </p>
    </div>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Modal in ASP.NET Core Dialog control. Explore here for more details."/>
                }

@*custom code end*@
@section Title{
                    <title>ASP.NET Core Dialog Modal Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Modal in ASP.NET Core Dialog Control</h1>
                }
