@page
@model EJ2CoreSampleBrowser.Pages.Diagram.AvoidConnectorOverlapDiagramModel
@using Syncfusion.EJ2;
@{
    var nodeDefaults = "nodeDefaults";
    var diagramCreated ="diagramCreated";
}
@section ControlsSection{
    <div class="control-section">
        <div style="text-align:center">
            <ejs-diagram id="container" width="100%" height="700px"  nodes="@Model.Nodes" connectors="@Model.Connectors"
            constraints="Default | (Syncfusion.EJ2.Diagrams.DiagramConstraints.LineRouting | Syncfusion.EJ2.Diagrams.DiagramConstraints.AvoidLineOverlapping)"
            created="@diagramCreated" getNodeDefaults="@nodeDefaults">         
            <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
            </ejs-diagram>
        </div>
    </div>
    <style>
        #container {
            display: block;
        }
    </style>
    <script>
        function nodeDefaults(node) {
            node.shape = { type: 'Path' };
            var PathData1 = "M 55 0 L 55 7.5 L 80 7.5 L 55 7.5 L 55 22.5 L 80 22.5 L 55 22.5 L 55 37.5 L 80 37.5 L 55 37.5 L 55 52.5 L 80 52.5 L 55 52.5 L 55 67.5 L 80 67.5 L 55 67.5 L 55 82.5 L 80 82.5 L 55 82.5 L 55 97.5 L 80 97.5 L 55 97.5 L 55 112.5 L 80 112.5 L 55 112.5 L 55 127.5 L 80 127.5 L 55 127.5 L 55 142.5 L 80 142.5 L 55 142.5 L 55 157.5 L 80 157.5 L 55 157.5 L 55 172.5 L 80 172.5 L 55 172.5 L 55 187.5 L 80 187.5 L 55 187.5 L 55 202.5 L 80 202.5 L 55 202.5 L 55 217.5 L 80 217.5 L 55 217.5 L 55 232.5 L 80 232.5 L 55 232.5 L 55 240 L 25 240 L 25 120 L 0 120 L 25 120 L 25 0 Z";
            var PathData2 = "M 75 0 L 75 7.5 L 100 7.5 L 75 7.5 L 75 22.5 L 100 22.5 L 75 22.5 L 75 37.5 L 100 37.5 L 75 37.5 L 75 52.49999999999999 L 100 52.49999999999999 L 75 52.49999999999999 L 75 67.5 L 100 67.5 L 75 67.5 L 75 135 L 25 135 L 25 127.5 L 0 127.5 L 25 127.5 L 25 112.49999999999999 L 0 112.49999999999999 L 25 112.49999999999999 L 25 97.5 L 0 97.5 L 25 97.5 L 25 82.49999999999999 L 0 82.49999999999999 L 25 82.49999999999999 L 25 67.5 L 0 67.5 L 25 67.5 L 25 52.49999999999999 L 0 52.49999999999999 L 25 52.49999999999999 L 25 37.5 L 0 37.5 L 25 37.5 L 25 22.5 L 0 22.5 L 25 22.5 L 25 7.5 L 0 7.5 L 25 7.5 L 25 0 Z";
            var PathData3 = "M 55 0 L 55 120 L 80 120 L 55 120 L 55 240 L 25 240 L 25 232.5 L 0 232.5 L 25 232.5 L 25 217.5 L 0 217.5 L 25 217.5 L 25 202.5 L 0 202.5 L 25 202.5 L 25 187.5 L 0 187.5 L 25 187.5 L 25 172.5 L 0 172.5 L 25 172.5 L 25 157.5 L 0 157.5 L 25 157.5 L 25 142.5 L 0 142.5 L 25 142.5 L 25 127.5 L 0 127.5 L 25 127.5 L 25 112.5 L 0 112.5 L 25 112.5 L 25 97.5 L 0 97.5 L 25 97.5 L 25 82.5 L 0 82.5 L 25 82.5 L 25 67.5 L 0 67.5 L 25 67.5 L 25 52.5 L 0 52.5 L 25 52.5 L 25 37.5 L 0 37.5 L 25 37.5 L 25 22.5 L 0 22.5 L 25 22.5 L 25 7.5 L 0 7.5 L 25 7.5 L 25 0 Z";
            var PathData4 = "M 35 0 L 35 15 L 60 15 L 35 15 L 35 30 L 0 30 L 0 0 Z";
            var PathData5 = "M 60 0 L 60 30 L 25 30 L 25 15 L 0 15 L 25 15 L 25 0 Z";
            if (node.id == "node1" || node.id == "node2") {
                node.shape = { type: 'Path', data: PathData1 };
            }
            else if (node.id == "node3" || node.id == "node4" || node.id == "node5" || node.id == "node6") {
                node.shape = { type: 'Path', data: PathData2 };
            }
            else if (node.id == "node7") {
                node.shape = { type: 'Path', data: PathData3 };
            }
            else if (node.id == "node8" || node.id == "node9" || node.id == "node10") {
                node.shape = { type: 'Path', data: PathData4 };
            }
            else if (node.id == "node11" || node.id == "node12") {
                node.shape = { type: 'Path', data: PathData5 };
            }
            node.style = { strokeColor: "black", strokeWidth: 2 };
            return node;
        }
        function diagramCreated(args) {
            var diagram = document.getElementById("container").ej2_instances[0];
            diagram.fitToPage();
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the connectors that automatically adjust to minimize visual overlap, ensuring clear and distinct representations of connections within the diagram.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Avoid Connector overlap Diagram Feature in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description {
    <p>
        This example showcases a circuit diagram created using the Syncfusion<sup>Â®</sup> Diagram control. It
        demonstrates the
        <code><a target="_blank" class="code"
                href="https://ej2.syncfusion.com/aspnetcore/documentation/diagram/constraints#diagram-constraints">AvoidLineOverlapping</a></code>
        feature, which ensures that connectors do not visually overlap by automatically adjusting line segments for
        better visualization of connections.
    </p>

    <p>
        To use this feature we need enable the <b>AvoidLineOverlapping</b> feature in the
        <code><a target="_blank" class="code"
                href="https://ej2.syncfusion.com/aspnetcore/documentation/diagram/constraints#diagram-constraints">DiagramConstraints</a></code> property.
    </p>
}
@section Title{
                    <title>ASP.NET Core Diagram Avoid Connector Overlap Diagram Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Avoid Line Overlapping Circuit Diagram in ASP.NET Core Diagram Control</h1>
                }