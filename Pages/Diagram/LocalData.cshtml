@page
@model EJ2CoreSampleBrowser.Pages.Diagram.LocalDataModel
@using Syncfusion.EJ2;

@{
    var getNodeDefaults = "getNodeDefaults";
    var getConnectorDefaults = "getConnectorDefaults";
}
@section ControlsSection {
    <div class="control-section">
        <ejs-diagram id="diagram" width="100%" height="550px" getNodeDefaults="@getNodeDefaults" getConnectorDefaults="@getConnectorDefaults" created="diagramCreated">
            <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
            <e-diagram-datasourcesettings id="Name" parentId="Category" dataSource="new DataManager(){ Data = (List<LocalDataDetails>)@Model.localData }"></e-diagram-datasourcesettings>
            <e-diagram-layout type="HierarchicalTree" horizontalSpacing="15" verticalSpacing="50"></e-diagram-layout>
        </ejs-diagram>
    </div>

    <script>
        function diagramCreated() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }

        function getNodeDefaults(obj, data, diagram) {
            //Initialize shape
            obj.annotations = [{
                /* tslint:disable:no-string-literal */
                content: obj.data.Name, style: { color: 'black' }
            }];
            obj.style =

                {
                    fill: '#ffeec7', strokeColor: '#f5d897', strokeWidth: 1
                }

                ; obj.shape = {
                    type: 'Basic', shape: 'Rectangle'
                }

                ; obj.width = 95; obj.height = 30; return obj;
        }

        function getConnectorDefaults(connector, diagram) {
            connector.type = 'Orthogonal';
            connector.style.strokeColor = '#4d4d4d';
            connector.targetDecorator.shape = 'None';
            return connector;
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the classifications of species using hierarchical tree layout algorithm. Data Manager support is used to bind data with the diagram.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Local Data in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This example shows how to generate a diagram from the saved data. The <code>dataSourceSettings</code> property can be used to map an external data source with the diagram control. The
        <code>id</code> property of <code>dataSourceSettings</code> can be used to define a unique field of an external data. The
        <code>parentId</code> property can be used to define the relationship between the objects.

    </p>
    <p>
        The diagram componentâ€™s features are segregated into individual feature-wise modules. To generate diagrams from an external  data source, inject <code>DataBinding</code> module using <code>Diagram.Inject(DataBinding)</code> method. To automatically arrange the objects in a hierarchical structure, inject
        <code>DataBinding</code> module using <code>Diagram.Inject(DataBinding)</code> method.

    </p>
}
@section Title{
                    <title>ASP.NET Core Diagram Local Data Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Local Data in ASP.NET Core Diagram Control</h1>
                }