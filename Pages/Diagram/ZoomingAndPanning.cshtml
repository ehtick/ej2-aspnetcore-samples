@page
@model EJ2CoreSampleBrowser.Pages.Diagram.ZoomingAndPanningModel
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Buttons;
@{
    var getNodeDefaults = "getNodeDefaults";
    var getConnectorDefaults = "getConnectorDefaults";
    var getLayoutInfo = "getLayoutInfo";
    var setNodeTemplate = "setNodeTemplate";
}
@section ControlsSection {
    <div class="col-lg-12 control-section">
    <div class="control-section">
        <div style="width: 100%">
                <ejs-toolbar id="toolbar_default" clicked="onItemClick">
                    <e-toolbar-items>
                        <e-toolbar-item prefixIcon="e-icons e-zoom-in" tooltipText="Zoom In"></e-toolbar-item>
                        <e-toolbar-item prefixIcon="e-icons e-zoom-out" tooltipText="Zoom Out"></e-toolbar-item>
                        <e-toolbar-item type="Separator"></e-toolbar-item>
                        <e-toolbar-item prefixIcon="e-icons e-mouse-pointer" tooltipText="Select"></e-toolbar-item>
                        <e-toolbar-item prefixIcon="e-icons e-pan" tooltipText="Pan Tool"></e-toolbar-item>
                        <e-toolbar-item type="Separator"></e-toolbar-item>
                        <e-toolbar-item prefixIcon="e-icons e-reset" tooltipText="Reset"></e-toolbar-item>
                        <e-toolbar-item prefixIcon="e-icons e-zoom-to-fit" tooltipText="Fit To Page"></e-toolbar-item>
                        <e-toolbar-item type="Separator"></e-toolbar-item>
                        <e-toolbar-item prefixIcon="e-icons e-bring-to-view" tooltipText="Bring Into View" disabled="true"></e-toolbar-item>
                        <e-toolbar-item prefixIcon="e-icons e-bring-to-center" tooltipText="Bring Into Center" disabled="true"></e-toolbar-item>
                    </e-toolbar-items>
                </ejs-toolbar>
            </div>
        <div>
        <ejs-diagram id="diagram" width="100%" height="550px" setNodeTemplate="@setNodeTemplate" getNodeDefaults="@getNodeDefaults" getConnectorDefaults="@getConnectorDefaults" created="diagramCreated" selectionChange="selectionChange">
                <e-diagram-datasourcesettings id="Id" parentId="ReportingPerson" dataSource="new DataManager(){ Data = @Model.data }"></e-diagram-datasourcesettings>
                <e-diagram-layout type="OrganizationalChart" horizontalSpacing="15" verticalSpacing="50"></e-diagram-layout>
                <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
                <e-diagram-scrollsettings scrollLimit="Infinity"></e-diagram-scrollsettings>
            </ejs-diagram>
        </div>
    </div>
    </div>

    @*custom code end*@
    <script>

    function onItemClick(args) {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        switch (args.item.tooltipText) {
            case 'Zoom In':
                var zoomin = { type: 'ZoomIn', zoomFactor: 0.2 };
                diagram.zoomTo(zoomin);
                break;
            case 'Zoom Out':
                var zoomout = { type: 'ZoomOut', zoomFactor: 0.2 };
                diagram.zoomTo(zoomout);
                break;
            case 'Reset':
                diagram.reset();
                break;
            case 'Pan Tool':
                diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
                break;
            case 'Select':
                diagram.clearSelection();
                diagram.drawingObject = {};
                diagram.tool = ej.diagrams.DiagramTools.SingleSelect | ej.diagrams.DiagramTools.MultipleSelect;
                break;
            case 'Fit To Page':
                diagram.fitToPage();
                break;
            case 'Bring Into View':
                if (diagram.selectedItems.nodes.length > 0) {
                    var bound = diagram.selectedItems.nodes[0].wrapper.bounds;
                    diagram.bringIntoView(bound);
                }
                break;
            case 'Bring Into Center':
                if (diagram.selectedItems.nodes.length > 0) {
                    var bounds = diagram.selectedItems.nodes[0].wrapper.bounds;
                    diagram.bringToCenter(bounds);
                }
                break;
        }
    }

    function diagramCreated() {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        diagram.tool = ej.diagrams.DiagramTools.Select;
        diagram.dataBind();
    }
    function getLayoutInfo(node, tree) {
        if (!tree.hasSubTree) {
            tree.orientation = 'Vertical';
            tree.type = 'Right';
        }
    }
    function getNodeDefaults(obj, diagram) {
        obj.height = 50;
        obj.style = { fill: 'transparent', strokeWidth: 2 };
        return obj;
    }
    function getConnectorDefaults(connector, diagram) {
        connector.targetDecorator.shape = 'None';
        connector.type = 'Orthogonal';
        connector.style.strokeColor = 'gray';
        return connector;
    }

    function setNodeTemplate(obj, diagram) {
        var content = new ej.diagrams.StackPanel();
        content.id = obj.id + '_outerstack';
        content.orientation = 'Horizontal';
        content.style.strokeColor = 'gray';
        content.padding = { left: 5, right: 10, top: 5, bottom: 5 };

        var image = new ej.diagrams.ImageElement();
        image.width = 50;
        image.height = 50;
        image.style.strokeColor = 'none';
        image.source = obj.data.Image;
        image.id = obj.id + '_pic';
        var innerStack = new ej.diagrams.StackPanel();
        innerStack.style.strokeColor = 'none';
        innerStack.margin = { left: 5, right: 0, top: 0, bottom: 0 };
        innerStack.id = obj.id + '_innerstack';

        var text = new ej.diagrams.TextElement();
        text.content = obj.data.Name;
        text.style.color = 'black';
        text.style.bold = true;
        text.style.strokeColor = 'none';
        text.horizontalAlignment = 'Left';
        text.style.fill = 'none';
        text.id = obj.id + '_text1';

        var desigText = new ej.diagrams.TextElement();
        desigText.margin = { left: 0, right: 0, top: 5, bottom: 0 };
        desigText.content = obj.data.Designation;
        desigText.style.color = 'black';
        desigText.style.strokeColor = 'none';
        desigText.style.fontSize = 12;
        desigText.style.fill = 'none';
        desigText.horizontalAlignment = 'Left';
        desigText.style.textWrapping = 'Wrap';
        desigText.id = obj.id + '_desig';
        innerStack.children = [text, desigText];

        content.children = [image, innerStack];

        return content;
    }
    function selectionChange(args) {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        if (args.state === 'Changed') {
            var selectedItems = diagram.selectedItems.nodes;
            var toolbarObj = document.getElementById("toolbar_default").ej2_instances[0];
            if (selectedItems.length === 0) {
                toolbarObj.items[9].disabled = true;
                toolbarObj.items[10].disabled = true;
            }
            if (selectedItems.length === 1) {
                toolbarObj.items[9].disabled = false;
                toolbarObj.items[10].disabled = false;
            }
            if (selectedItems.length > 1) {
                toolbarObj.items[9].disabled = false;
                toolbarObj.items[10].disabled = false;
            }
        }
    }
    </script>
}
@section ActionDescription{
    <p>
       This sample illustrates how to zoom and pan in the diagram.
    </p>
}
@section Meta{
        <meta name="description" content="This example demonstrates the Zooming and Panning in ASP.NET Core Diagram control. Explore here for more details."/>
    }
@section Description{
   <p>This example explains zooming, panning, reset, fit to page, bring into view, and bring to center.</p>
    
    <p>The <code>fitToPage</code> method adjusts the zoom level of a diagram so that all its content is visible within the viewport.</p>

    <p>The <code>bringIntoView</code> method brings the specified rectangular or bounds region into the diagram viewport.</p>

    <p>The <code>bringToCenter</code> method brings the specified rectangular region of the diagram content to the center of the viewport. You can zoom in and out using the zoom method, and reset the zoom and scroller offsets to default values using the reset zoom method.</p>

   <p> In this sample, use <code>pan</code>, <code>reset</code>,<code>zoomIn</code> , and <code>ZoomOut</code> options to pan, reset the zoom and zoomin/out the diagram.</p>
}
@section Title{
                    <title>ASP.NET Core Diagram Zooming and Panning Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Zooming and Panning in ASP.NET Core Diagram Control</h1>
                }