@page
@model EJ2CoreSampleBrowser.Pages.Diagram.FlowchartLayoutModel
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.DropDowns;

@section ControlsSection{
    <div id="diagram-flowlayout-container" class="control-section">
        @{
            var nodeDefaults = "nodeDefaults";
            var ConnectorDefaults = "connectorDefaults";
        }
        <div class="content-wrapper" style="width: 100%;">
            <ejs-diagram id="diagram" width="100%" height="750px" getNodeDefaults="@nodeDefaults" getConnectorDefaults="@ConnectorDefaults" created="diagramCreated">
                <e-diagram-rulersettings showRulers="true" dynamicGrid="true"></e-diagram-rulersettings>
                <e-diagram-datasourcesettings id="id" parentId="parentId" dataSource="new DataManager() { Data = (List<FlowchartDetails>)@Model.Data}"></e-diagram-datasourcesettings>
                <e-diagram-layout horizontalSpacing="50" verticalSpacing="50" type="Flowchart"></e-diagram-layout>
                <e-diagram-scrollsettings padding="@Model.DiagramScrollPadding"></e-diagram-scrollsettings>
            </ejs-diagram>
        </div>
    </div>
    <div id="diagram-flowlayout-property" class="property-section">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="row property-panel-content">
            <div class="row">
                <label>Orientation</label>
                <div class="diagram-input-element">
                    <ejs-dropdownlist id="orientation" dataSource="@Model.orientationList" index="0" change="orientationChange">
                    <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>
            </div>
            <div class="row">
                <label>Yes branch direction</label>
                <div class="diagram-input-element">
                    <ejs-dropdownlist id="yesBranchDirection" dataSource="@Model.branchDirectionList" index="0" change="yesBranchChange">
                    <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>
            </div>
            <div class="row">
                <label>No branch direction</label>
                <div class="diagram-input-element">
                    <ejs-dropdownlist id="noBranchDirection" dataSource="@Model.branchDirectionList" index="1" change="noBranchChange">
                        <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>
            </div>
            <div class="row">
                <label>Horizontal spacing</label>
                <div class="diagram-input-element">
                    <ejs-numerictextbox  id="horizontalSpacing" value="50" step="1" min="20" max="120" format='###.##' style="width: 100%;" change='horizontalSpacingChange'>
                    </ejs-numerictextbox>
                </div>
            </div>
            <div class="row">
                <label>Vertical spacing</label>
                <div class="diagram-input-element">
                    <ejs-numerictextbox id="verticalSpacing" value="50" step="1" min="30" max="120" format='###.##' style="width: 100%;" change='verticalSpacingChange'>
                    </ejs-numerictextbox>
                </div>
            </div>
        </div>
    </div>
    <style>
        /* Container for diagram and property panel */
        #diagram-flowlayout-container, .control-section {
            width: 75%;
            float: left;
            /* Keep the diagram section on the left */
            border-right: 1px solid #D5D5D5;
        }

        #diagram-flowlayout-property .property-panel-header {
            font-size: larger;
        }

        /* Diagram content style */
        #diagram-flowlayout-container .content-wrapper {
            width: 100%;
            background: white;
            border: 1px solid #D5D5D5;
        }

        /* Property panel style */
        #diagram-flowlayout-property, .property-section {
            width: 24%;
            /* Adjusted to fill the remaining space */
            float: right;
            /* Ensure the property panel is on the right */
            padding: 10px;
            background: white;
        }

        /* Align labels and inputs within the property panel */
        #diagram-flowlayout-property .row {
            margin-left: 0;
            margin-right: 0;
            padding-top: 8px;
        }

        .property-panel-content .row {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }

        .property-panel-content label {
            flex: 1;
            font-weight: normal;
        }

        .property-panel-content input {
            flex: 2;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .flow-diagram-container {
            border: 1px solid #D5D5D5;
        }

        .diagram-input-element {
            margin-left: 10px;
            width: 45%;
        }
    </style>
    <script>
        var diagram;
        function diagramCreated() {
            diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }

        function orientationChange(args) {
            let value = args.value;
            diagram.layout.orientation = value;
            diagram.dataBind();
        };

        function yesBranchChange(args) {
            let value = args.value;
            diagram.layout.flowchartLayoutSettings.yesBranchDirection = value;
            diagram.doLayout();
        };

        function noBranchChange(args) {
            let value = args.value;
            diagram.layout.flowchartLayoutSettings.noBranchDirection = value;
            diagram.doLayout();
        };

        function horizontalSpacingChange(args) {
            let value = args.value;
            diagram.layout.horizontalSpacing = value;
            diagram.dataBind();
        };

        function verticalSpacingChange(args) {
            let value = args.value;
            diagram.layout.verticalSpacing = value;
            diagram.dataBind();
        };
        function nodeDefaults(node) {
            node.width = 150;
            node.height = 50;
            if (node.shape.shape === 'Decision') {
                node.width = 120;
                node.height = 100;
            }
            return node;
        }

        function connectorDefaults(connector) {
            connector.type = 'Orthogonal';
            if (connector.annotations && connector.annotations.length > 0) {
                connector.annotations[0].style.fill = 'white';
                connector.annotations[0].style.color = 'black';
            }
            return connector;
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates the flowchart layout algorithm that is used to automatically arrange the flow shapes.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Flowchart layout in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This sample illustrates the flowchart layout algorithm that is used to automatically arrange the flow shapes.
    </p>
    <p>
        This example shows how to generate a flowchart layout from an external data source. The spacing between
        the objects
        can also be customized in the chart. The
        <code>horizontalSpacing</code> and
        <code>verticalSpacing</code> properties of
        <code>layout</code> can be used to customize the space between objects in a tree. The
        <code>orientation</code> property of
        <code>layout</code> can be used to change the orientation of the chart. The
        <code>flowchartLayoutSettings</code> property of
        <code>layout</code> can be used to configure the flow chart layout settings. The
        <code>yesBranchDirection</code> and <code>noBranchDirection</code> properties of the flowchartLayoutSettings is used to define the flow direction of the yes and no branch connectors.
    </p>

    <p style="font-weight: 500">Injecting Module</p>
    <p>
        The diagram componentâ€™s features are segregated into individual feature-wise modules. To generate diagrams from
        an external
        data source, inject
        <code>DataBinding</code> module using
        <code>Diagram.Inject(DataBinding)</code> method. To automatically arrange the objects in a flowchart layout
        format, inject
        <code>FlowchartLayout</code> module using
        <code>Diagram.Inject(FlowchartLayout)</code> method.
    </p>
    <br>
}
@section Title{
                    <title>ASP.NET Core Diagram Flow Execution Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Flow Execution in ASP.NET Core Diagram Control</h1>
                }