@page
@model EJ2CoreSampleBrowser.Pages.Diagram.HierarchicalTreeWithMultipleRootsModel
@using Syncfusion.EJ2;
@{
    var getConnectorDefaults = "ConnectorDefaults";
    var getNodeDefaults = "nodeDefaults";
}
@section ControlsSection {
    <div class="col-lg-8 control-section" style="width:100%;">
        <div class="content-wrapper">
            <ejs-diagram id="diagram" width="100%" height="550px" getNodeDefaults="@getNodeDefaults" getConnectorDefaults="@getConnectorDefaults" created="diagramCreated">
                <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
                <e-diagram-datasourcesettings id="Id" parentId="ParentId" dataSource="new DataManager() { Data = (List<HierarchicalTreeWithMultipleRootDetails>)@Model.Nodes }"></e-diagram-datasourcesettings>
                <e-diagram-layout type="HierarchicalTree"></e-diagram-layout>
            </ejs-diagram>
        </div>
    </div>

    <script>

        function diagramCreated() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }

        function nodeDefaults(obj, diagram) {
            if((obj.data).Id == 1 || (obj.data).Id == 10 || (obj.data).Id == 17){
                obj.style = { fill: '#1c5b9b', strokeColor: 'none', color: 'white', strokeWidth: 2 };
                obj.borderColor = '#1c5b9b';
                obj.backgroundColor = '#1c5b9b';
            }
            else if((obj.data).Id == 2 ||(obj.data).Id == 3 ||(obj.data).Id == 11 ||(obj.data).Id ==12 ||(obj.data).Id == 13||(obj.data).Id == 18||(obj.data).Id == 19) {
                obj.style = { fill: '#18c1be', strokeColor: '#18c1be', color: 'white', strokeWidth: 2 };
                obj.borderColor = '#18c1be';
                obj.backgroundColor = '#18c1be';
            }
            else if((obj.data).Id == 4||(obj.data).Id == 5 ||(obj.data).Id == 14 ||(obj.data).Id == 15||(obj.data).Id ==16||(obj.data).Id ==20||(obj.data).Id ==21) {
                obj.style = { fill: '#17a573', strokeColor: 'none', color: 'white', strokeWidth: 2 };
                obj.borderColor = '#17a573';
                obj.backgroundColor = '#17a573';
            }
            else {
                obj.style = { fill: '#73bb34', strokeColor: 'none', color: 'white', strokeWidth: 2 };
                obj.borderColor = '#73bb34';
                obj.backgroundColor = '#73bb34';
            }
                obj.width = 75;
                obj.height =35;
                (obj.shape).margin = { left: 5, right: 5, bottom: 5, top: 5 };
                obj.shape = { type: 'Text', content: obj.data.Content };
            return obj;
        }

        function ConnectorDefaults(obj, diagram) {
            obj.type = 'Orthogonal';
            obj.style = { strokeColor: 'CornflowerBlue' };
            obj.targetDecorator = { shape: 'Arrow', height: 10, width: 10, style: { fill: 'CornflowerBlue', strokeColor: 'white' } };
            return obj;
        }
    </script>
}
@section ActionDescription{
    <p>
    This sample illustrates the structure of an Electricity Sector using complex hierarchical layout with multiple roots.
  </p>
}
@section Meta{
        <meta name="description" content="This example demonstrates the Hierarchical Tree in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
   <p>This example shows how to create a complex hierarchical layout with multiple root nodes.</p>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Diagram component's features are segregated into individual feature-wise modules. To generate diagrams from an external data source,
        we need to Inject <code>DataBinding</code> module using <code>Diagram.Inject(DataBinding)</code> method. To automatically arrange the objects in a hierarchical structure, we need to Inject <code>ComplexHierarchicalTree</code> module using
        <code>Diagram.Inject(ComplexHierarchicalTree)</code> method.

    </p>
}
@section Title{
                    <title>ASP.NET Core Diagram Hierarchical Tree With Multiple Roots Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Hierarchical Tree with Multiple Roots in ASP.NET Core Diagram Control</h1>
                }