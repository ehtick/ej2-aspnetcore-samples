@page
@model EJ2CoreSampleBrowser.Pages.Diagram.UmlActivityModel
@using Syncfusion.EJ2.Diagrams;
@{
    var getSymbolDefaults = "getSymbolDefaults";
    var getNodeDefaults = "getNodeDefaults";
    var getConnectorDefaults = "getConnectorDefaults";
    var getSymbolInfo = "getSymbolInfo";
}
@section ControlsSection{

    <div class="control-section">
        <div id="umlActivityDiagram" style="width: 100%; height: 521px">
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
            </div>
            <div id="palette-space" class="sb-mobile-palette">
                <ejs-symbolpalette id="symbolPalette" getNodeDefaults="@getSymbolDefaults"
                                   symbolHeight="55" symbolWidth="55" expandMode="@Model.Multiple"
                                   width="100%" height="100%" palettes="@Model.Palette"
                                   symbolMargin="new SymbolPaletteMargin() { Left=10,Right=10,Top=10,Bottom=10}"
                                   getSymbolInfo="@getSymbolInfo">
                </ejs-symbolpalette>
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                <ejs-diagram id="container" width="100%" height="100%"
                             created="diagramCreated" getNodeDefaults="@getNodeDefaults"
                             getConnectorDefaults="@getConnectorDefaults" nodes="@Model.nodes"
                             connectors="@Model.Connectors">
                    <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
                </ejs-diagram>
            </div>
        </div>
    </div>
    <style>

        /* These styles are used for aligning palette and diagram */
        .sb-mobile-palette {
            width: 210px;
            height: 100%;
            float: left;
        }

        .sb-mobile-palette-bar {
            display: none;
        }

        .sb-mobile-diagram {
            width: calc(100% - 212px);
            height: 100%;
            float: left;
            border: 1px solid rgba(0, 0, 0, 0.12);
            border-left: none;
        }

        @@media (max-width: 550px) {

            .sb-mobile-palette {
                z-index: 19;
                position: absolute;
                display: none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 39%;
                height: 100%;
            }

            .sb-mobile-palette-bar {
                display: block;
                width: 100%;
                background: #fafafa;
                padding: 10px 10px;
                border: 0.5px solid #e0e0e0;
                min-height: 40px;
            }

            .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }

            #palette-icon {
                font-size: 20px;
            }
        }

        .sb-mobile-palette-open {
            position: absolute;
            display: block;
            right: 15px;
        }
     
    </style>
    <script>

        function getNodeDefaults(obj, diagram) {
            obj.ports = getPorts(obj);
            if (obj.ports) {
                for (var i = 0; i < obj.ports.length; i++) {
                    obj.ports[i].visibility = ej.diagrams.PortVisibility.Hidden;
                }
            }
            if (obj.id === 'Start' || obj.id === 'node2' || obj.id === 'node9' || obj.id === 'node11') {
                obj.style.fill = '#444';
            }
            obj.style.strokeColor = '#444';
            return obj;
        }

        function getConnectorDefaults(obj, diagram) {
            if (obj.id.indexOf('connector') !== -1) {
                obj.type = 'Orthogonal'; obj.cornerRadius = 10;
                obj.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };
            }
        }

        function getPorts(obj) {
            if (obj.id === 'node2' || obj.id === 'node9') {
                var node2Ports = [
                    { id: 'port1', offset: { x: 0.2, y: 1 } },
                    { id: 'port2', offset: { x: 0.8, y: 1 } },
                    { id: 'port3', offset: { x: 0.2, y: 0 } },
                    { id: 'port4', offset: { x: 0.8, y: 0 } },
                ];
                return node2Ports;
            } else {
                var ports = [
                    { id: 'portLeft', offset: { x: 0, y: 0.5 } },
                    { id: 'portRight', offset: { x: 1, y: 0.5 } },
                    { id: 'portBottom', offset: { x: 0.5, y: 1 } },
                    { id: 'portTop', offset: { x: 0.5, y: 0 } },
                ];
                return ports;
            }
        }

        function getSymbolDefaults(symbol, diagram) {
            if (symbol.id === 'JoinNode') {
                symbol.width = 20; symbol.height = 50;
            } else if (symbol.id === 'ForkNode') {
                symbol.width = 50; symbol.height = 20;
            } else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {
                symbol.width = 50; symbol.height = 40;
            } else {
                symbol.width = 50; symbol.height = 50;
            }
            if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {
                symbol.style.fill = '#757575';
            }
            symbol.style.strokeColor = '#757575';
        }

        function getSymbolInfo(symbol) {
            return { fit: true };
        }

        function diagramCreated() {
            addEvents();
        }

        function addEvents() {
            var isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                var paletteIcon = document.getElementById('palette-icon');
                if (paletteIcon) {
                    paletteIcon.addEventListener('click', openPalette, false);
                }
            }
        }
        @*custom code start*@
        function openPalette() {
            var paletteSpace = document.getElementById('palette-space');
            var isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {
                    paletteSpace.classList.add('sb-mobile-palette-open');
                }
                else {
                    paletteSpace.classList.remove('sb-mobile-palette-open');
                }
            }
        }
        @*custom code end*@
    </script>

}
@section ActionDescription{
    <p>
        This sample represents the message flow from one activity to another in customer service using built-in UML activity shapes.
    </p>

}
@section Meta{
                    <meta name="description" content="This example demonstrates the UML Activity Diagram in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This example shows how to create activity shapes using diagram <code>UMLActivity</code> shapes. The <code>type</code> property of the
        <code>shape</code> can be used to create <code>UMLActivity</code> nodes. The <code>shape</code> property of the shape allows you to create UML
        activity shapes.
    </p>
}
@section Title{
                    <title>ASP.NET Core Diagram UML Activity Diagram Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of UML Activity Diagram in ASP.NET Core Diagram Control</h1>
                }