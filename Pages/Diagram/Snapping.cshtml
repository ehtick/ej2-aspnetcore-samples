@page
@model EJ2CoreSampleBrowser.Pages.Diagram.SnappingModel
@using Syncfusion.EJ2.Diagrams;
@{
    var getNodeDefaults = "getNodeDefaults";
    var getConnectorDefaults = "getConnectorDefaults";
    var getTool = "getTool";
}
@section ControlsSection{

    <div class="control-section">
        <div id="diagram-space" class="sb-mobile-diagram">
            <ejs-diagram id="diagram" width="100%" height="645px" nodes="@Model.nodes" connectors="@Model.Connectors" getNodeDefaults="@getNodeDefaults" getConnectorDefaults="@getConnectorDefaults" selectionChange="selectionChange" rotateChange = "rotateChange" created="created"  onUserHandleMouseDown = "userHandelClick">
                <e-diagram-selecteditems constraints="Rotate" userHandle="@Model.Userhandle"></e-diagram-selecteditems>
            </ejs-diagram>
        </div>
        <div class="col-lg-4 property-section" style="float: right;">
    <div id="properties_Container">
     <span class="property-panel-header">
        Properties
     </span>
     <div class="db-prop-row">
        <div class="db-prop-text-style">
            <span class="db-prop-text-style text-content">Snapping Interval</span>
            <div class="db-text-input" style="float: right;margin-right: 10px;">
               <ejs-numerictextbox id="snappingInterval" min="1" step="1" width="150" format="n0" value="20" Type="text" change="snappingInterval"></ejs-numerictextbox>
            </div>
        </div>
        <div class="db-prop-text-style">
            <span class="db-prop-text-style text-content">Snapping Angle</span>
            <div class="db-text-input" style="float: right;margin-right: 10px;">
                <ejs-numerictextbox id="snappingAngle" min="1" step="1" width="150" format="n0" value="5" Type="text" change="snappingAngle"></ejs-numerictextbox>
            </div>
        </div>
        <div class="db-prop-text-style">
            <span class="db-prop-text-style text-content">Snapping Line Color</span>
            <div class="db-text-input" style="float: right;margin-right: 100px;">
                <ejs-colorpicker id='snappingLineColor' mode='Palette' width='100%' height="25" showButtons="false" value='#07EDE1' change="snappingLineColor"></ejs-colorpicker>
            </div>
        </div>
        <div class="db-prop-text-style">
            <ejs-checkbox id="showGridlines" checked="true" label="Show Gridline" change="showGridlines"></ejs-checkbox>
        </div>
        <div class="db-prop-text-style" style="margin-top: 7px!important;">
             <ejs-checkbox id="snapToObject" checked="true" label="Snapping To Objects" change="snapToObject"></ejs-checkbox>
        </div>

           <div class="db-prop-text-style">
            <span class="db-prop-text-style text-content" style="font-weight: bold;">Snapping To Lines</span>
        </div>

        <div class="row diagram-radio-text-style" style="margin-left: 7px;">
            <ejs-radiobutton id="radio1" label="Snap To Gridlines" name="snapToLines" value="Snap To Gridlines" checked="true" change="snapToLines"></ejs-radiobutton>
        </div>
        <div class="row diagram-radio-text-style" style="margin-left: 7px;">
            <ejs-radiobutton id="radio2" label="Snap To Horizontal Gridlines" name="snapToLines" value="Snap To Horizontal Gridlines" change="snapToLines"></ejs-radiobutton>
        </div>
        <div class="row diagram-radio-text-style" style="margin-left: 7px;">
            <ejs-radiobutton id="radio3" label="Snap To Vertical Gridlines" name="snapToLines" value="Snap To Vertical Gridlines" change="snapToLines"></ejs-radiobutton>
        </div>
        <div class="row diagram-radio-text-style" style="margin-left: 7px;">
            <ejs-radiobutton id="radio4" label="None" name="snapToLines" value="None" change="snapToLines"></ejs-radiobutton>
        </div>
    </div>
</div>
    <div class="row">
        
        <div class="col-xs-6 db-col-right">
            <div class="db-text-container" style="width: 77px; margin-left: 20px;">
                
            </div>
        </div>
    </div>
</div>
    </div>
    <style scoped>
        /* Diagram Div CSS */

        .sb-mobile-diagram{
            float: left;
            width : 65%;
        }
        /* Property panel CSS */
        .db-prop-row {
        margin-top: 6px;
        }
        .db-col-left {
        padding-left: 10px;
        padding-right: 3px;
        }
    
        .db-prop-text-style {
        font-size: 13px;
        font-weight: normal;
        font-family: 'Calibri';
        margin-top: 25px;
        }
        .diagram-radio-text-style{
        font-size: 13px;
        font-weight: normal;
        font-family: 'Calibri';
        margin-top: 10px;
        }
       
        #properties_Container{
        /* background: #e3e3e3; */
        width: 300px;
        float: left;
        height: 600px;
        margin-top: 30px;
        margin-right : -50px;
        }
        
    </style>
    <script>
    var handles = [
    {
        name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',
        visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }
    },
    {
        name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',
        visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }
    },
    {
        name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',
        visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }
    },
    ];
    function selectionChange(args){
    var diagram = document.getElementById("diagram").ej2_instances[0];
    if(args.state === 'Changed'){
        var selectedItems = diagram.selectedItems.nodes;
        selectedItems = selectedItems.concat(diagram.selectedItems.connectors);
        if(selectedItems.length>0){
            if(args.newValue.length>0 && args.newValue[0] instanceof ej.diagrams.Node){
                diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All|ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };
                if(diagram.selectedItems.nodes.length>0){
                    drawingNode = diagram.selectedItems.nodes[diagram.selectedItems.nodes.length-1];
                }
            }
            else{
        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All&~ej.diagrams.SelectorConstraints.UserHandle };
            }
        }

        }
    }
    function created(args){
        var diagram = document.getElementById("diagram").ej2_instances[0];
        diagram.drawingObject = { type : "Orthogonal"};
        diagram.fitToPage();
        diagram.dataBind();
    }
    function getConnectorDefaults(obj){
        obj.constraints = ej.diagrams.ConnectorConstraints.Default|ej.diagrams.ConnectorConstraints.DragSegmentThumb;
    }
    function getNodeDefaults(obj){
        obj.style = {fill:'orange',strokeColor:'orange'};
    }
    function rotateChange(args){
         var diagram = document.getElementById("diagram").ej2_instances[0];
        if(args.state === 'Start' || args.state === 'Progress')
    {
        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All&~ej.diagrams.SelectorConstraints.UserHandle};
    }
    if(args.state === 'Completed'){
        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All|ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };
    }
    }
    function userHandelClick(args){
         var diagram = document.getElementById("diagram").ej2_instances[0];
        switch(args.element.name)
        {
            case 'Delete':
                diagram.remove();
                break;
            case 'Clone':
               diagram.paste(diagram.selectedItems.selectedObjects);
               break;
            case 'Draw':
                diagram.drawingObject.shape = {};
                diagram.drawingObject.type = diagram.drawingObject.type?diagram.drawingObject.type:'Orthogonal';
                diagram.drawingObject.sourceID = drawingNode.id;
                diagram.dataBind();
                break;
        }
    }
    function snappingAngle(args) {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        diagram.snapSettings.snapAngle = args.value;
        diagram.dataBind();
    }

    function snappingLineColor(args) {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        diagram.snapSettings.snapLineColor = args.value;
        diagram.dataBind();
    }
    function showGridlines(args) {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ ej.diagrams.SnapConstraints.ShowLines;
        diagram.dataBind();
        scale();
    }
    function snapToObject(args) {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ ej.diagrams.SnapConstraints.SnapToObject;
        diagram.dataBind();
        scale();
    }

    function snapToLines(args) {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        var showGridlines = document.getElementById("showGridlines").ej2_instances[0];
        var snapToObject = document.getElementById("snapToObject").ej2_instances[0];
        if (showGridlines.checked && snapToObject.checked) {
            diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All;
        }
        else if (showGridlines.checked && !snapToObject.checked) {
            diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~ej.diagrams.SnapConstraints.SnapToObject;
        }
        else if (!showGridlines.checked && snapToObject.checked) {
            diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~ej.diagrams.SnapConstraints.ShowLines;
        }
        else if (!showGridlines.checked && !snapToObject.checked) {
            diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~(ej.diagrams.SnapConstraints.ShowLines | ej.diagrams.SnapConstraints.SnapToObject);
        }
        switch (args.value) {
            case 'Snap To Gridlines':
                diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All | ej.diagrams.SnapConstraints.SnapToLines;
                if (!showGridlines.checked && !snapToObject.checked) {
                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~(ej.diagrams.SnapConstraints.ShowLines | ej.diagrams.SnapConstraints.SnapToObject);
                }
                else if (!snapToObject.checked && showGridlines.checked) {
                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~(ej.diagrams.SnapConstraints.SnapToObject);
                }
                else if (snapToObject.checked && !showGridlines.checked) {
                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~(ej.diagrams.SnapConstraints.ShowLines);
                }
                break;
            case 'Snap To Horizontal Gridlines':
                diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ ej.diagrams.SnapConstraints.SnapToVerticalLines;
                break;
            case 'Snap To Vertical Gridlines':
                diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ ej.diagrams.SnapConstraints.SnapToHorizontalLines;
                break;
            case 'None':
                diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~(ej.diagrams.SnapConstraints.SnapToHorizontalLines | ej.diagrams.SnapConstraints.SnapToVerticalLines | ej.diagrams.SnapConstraints.SnapToLines);
                if (!showGridlines.checked && !snapToObject.checked) {
                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~(ej.diagrams.SnapConstraints.ShowLines | ej.diagrams.SnapConstraints.SnapToObject | ej.diagrams.SnapConstraints.SnapToHorizontalLines | ej.diagrams.SnapConstraints.SnapToVerticalLines | ej.diagrams.SnapConstraints.SnapToLines);
                }
                else if (showGridlines.checked && !snapToObject.checked) {
                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~(ej.diagrams.SnapConstraints.SnapToObject | ej.diagrams.SnapConstraints.SnapToHorizontalLines | ej.diagrams.SnapConstraints.SnapToVerticalLines | ej.diagrams.SnapConstraints.SnapToLines);
                }
                else if (!showGridlines.checked && snapToObject.checked) {
                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All & ~(ej.diagrams.SnapConstraints.ShowLines | ej.diagrams.SnapConstraints.SnapToHorizontalLines | ej.diagrams.SnapConstraints.SnapToVerticalLines | ej.diagrams.SnapConstraints.SnapToLines);
                }
                break;
        }
        diagram.dataBind();
        scale();

    }
    function scale() {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        var snappingInterval = document.getElementById("snappingInterval").ej2_instances[0];
        diagram.snapSettings.horizontalGridlines.scaledIntervals[0] = snappingInterval.value;
        diagram.snapSettings.verticalGridlines.scaledIntervals[0] = snappingInterval.value;
        diagram.dataBind();
    }
   
      
        @*custom code end*@
    </script>
}
@section ActionDescription{
    <p>
        This sample shows how diagram objects snap to the nearest intersection of gridlines or objects while being dragged or resized.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Snapping in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
       <p>The <code>SnapInterval</code> property in snapSettings allows you to specify the interval at which objects should snap to a grid or other objects in the control.</p>
            
            <p>The <code>snapAngle</code> property in snapSettings allows you to define the snap angle by which the object needs to be rotated.</p>
        
            <p>The <code>snapLineColor</code> property is used to set the color of the snap lines that appear when objects snap to a grid or other objects in the control.</p>
        
            <p>The <code>constraints</code> property controls the visibility of gridlines and enables or disables snapping.</p>
}
@section Title{
                    <title>ASP.NET Core Diagram Snapping Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Snapping in ASP.NET Core Diagram Control</h1>
                }