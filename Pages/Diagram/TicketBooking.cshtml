@page
@model EJ2CoreSampleBrowser.Pages.Diagram.SeatBookingModel
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Diagrams;
@{
    var seatClicked = "seatClicked";
    var getNodeDefaults = "getNodeDefaults";
    var onCreated = "onCreated";
}
@section ControlsSection{

    <div class="control-section">
        <header class="header">
            <h2>
                <div>
                    <span class="movie-name">
                        <p class="movie-name-lnk">F1: The Movie</p>
                    </span>
                </div>
                <div>
                    <span class="movie-timing" id="movie-timing"></span>
                    <span class="theater-name"> | </span>
                    <span class="theater-name">Velvet Aurora Cinematheque</span>
                </div>
            </h2>
        </header>
        <div class="show-timing-section">
            <div class="date-row">
                <ul class="timing-list">
                    <!-- Date label -->
                    <li style="pointer-events: none">
                        <span class="date-label" id="date-label"></span>
                    </li>
                    <!-- Static show timing samples -->
                    <li class="timing-item available selected" data-timing="1">
                        <div class="time">11:50 AM</div>
                        <div class="screen-type">4K DOLBY ATMOS</div>
                    </li>
                    <li class="timing-item sold-out" data-timing="2">
                        <div class="time">02:25 PM</div>
                        <div class="screen-type">4K DOLBY ATMOS</div>
                    </li>
                    <li class="timing-item filling-fast" data-timing="3">
                        <div class="time">6:20 PM</div>
                        <div class="screen-type">4K DOLBY ATMOS</div>
                    </li>
                    <li class="timing-item filling-fast" data-timing="4">
                        <div class="time">9:15 PM</div>
                        <div class="screen-type">4K DOLBY ATMOS</div>
                    </li>
                </ul>
            </div>
        </div>
        <div id="notification" class="notification" style="display:none;">
        </div>
        <div class="content-wrapper" style="width: 100%">
            <ejs-diagram id="seatsDiagram" width="100%" height="800px" nodes="@Model.Nodes" click="@seatClicked" created="@onCreated" getNodeDefaults="@getNodeDefaults" constraints="@Model.Constraints">
                <e-diagram-scrollsettings scrollLimit="Diagram" canAutoScroll="false"></e-diagram-scrollsettings>
                <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
            </ejs-diagram>
        </div>
        <div class="booking-summary-container">
            <div class="seat-legend">
                <div class="legend-items">
                    <div class="legend-item">
                        <div class="legend-seat available"></div>
                        <span class="legend-text">Available</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-seat selected"></div>
                        <span class="legend-text">Selected</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-seat booked"></div>
                        <span class="legend-text">Booked</span>
                    </div>
                </div>
            </div>

            <div class="booking-section">
                <div class="price-info">
                    <div class="price" id="totalAmount">$0</div>
                    <div class="ticket-count" id="ticketCount">0 Tickets Selected</div>
                </div>

                <div class="price-hint-inline" id="priceHint" style="display: none;">
                    <span id="ticketAmount"></span>
                    <span id="feesAmount"></span>
                </div>

                <button class="btn-proceed" id="proceedButton" disabled>Proceed</button>
            </div>
        </div>

        <div id="bookingSuccessDialog"></div>
    </div>
    <script>
        var diagram;
        var dialog;
        let selectedTimingId = 1;
        var seatSelection = {
            SeatNumbers: [],
            TicketCount: 0,
            Amount: 0.0,
            Category: ""
        };
        var selectedSeatsArray = [];

        function seatRange(row, start, end) {
            var arr = [];
            for (let i = start; i <= end; i++) arr.push(`seat${row}${i}`);
            return arr;
        }
        const showTimings = [
            { id: 1, time: "11:50 AM", type: "4K DOLBY ATMOS", status: "available" },
            { id: 2, time: "02:15 PM", type: "4K DOLBY ATMOS", status: "sold-out" },
            { id: 3, time: "06:20 PM", type: "4K DOLBY ATMOS", status: "filling-fast" },
            { id: 4, time: "09:15 PM", type: "4K DOLBY ATMOS", status: "available" }
        ];
        // Executive, Corporate, Budget definitions (as before)
        const SEATS_EXECUTIVE = [].concat(
            seatRange('A', 1, 18), seatRange('B', 1, 18), seatRange('C', 1, 18),
            seatRange('D', 1, 18), seatRange('E', 1, 18), seatRange('F', 1, 18),
            seatRange('G', 1, 16), seatRange('H', 1, 14)
        );
        const SEATS_CORPORATE = [].concat(
            seatRange('I', 1, 16), seatRange('J', 1, 16), seatRange('K', 1, 16),
            seatRange('L', 1, 14), seatRange('M', 1, 12)
        );
        const SEATS_BUDGET = [].concat(
            seatRange('N', 1, 16), seatRange('O', 1, 16), seatRange('P', 1, 16)
        );

        // Custom lists per timing (as before)
        const EXECUTIVE_MORNING = ["seatD9", "seatD10", "seatE9", "seatE10", "seatF8", "seatF9", "seatF10", "seatF11",
            "seatG7", "seatG8", "seatG9", "seatG10", "seatH6", "seatH7", "seatH8",
            "seatC9", "seatC10", "seatB9", "seatB10", "seatA9", "seatA10",
            "seatD8", "seatD11", "seatE8", "seatE11", "seatF7", "seatF12",
            "seatC8", "seatC11", "seatB8", "seatB11", "seatA8", "seatA11",
            "seatG6", "seatG11", "seatH5", "seatH9"];
        const CORPORATE_MORNING = ["seatI8", "seatI9", "seatJ8", "seatJ9", "seatK7", "seatK8", "seatK9", "seatK10",
            "seatL6", "seatL7", "seatL8", "seatL9", "seatM5", "seatM6", "seatM7", "seatM8",
            "seatI7", "seatI10", "seatJ7", "seatJ10", "seatK6", "seatK11",
            "seatL5", "seatL10", "seatM4"];
        const BUDGET_MORNING = ["seatN8", "seatN9", "seatO8", "seatO9", "seatP8", "seatP9",
            "seatN7", "seatN10", "seatO7", "seatO10", "seatP7", "seatP10",
            "seatN6", "seatO6", "seatP6"];

        const EXECUTIVE_PRIME = [].concat(
            seatRange('A', 1, 18), seatRange('B', 1, 18), seatRange('C', 1, 18),
            seatRange('D', 1, 18), seatRange('E', 1, 18), seatRange('F', 1, 18),
            seatRange('G', 1, 16), seatRange('H', 1, 13)
        );
        const CORPORATE_PRIME = [].concat(
            seatRange('I', 1, 16), seatRange('J', 1, 16), seatRange('K', 1, 16),
            seatRange('L', 1, 14), seatRange('M', 1, 12)
        );
        const BUDGET_PRIME = [].concat(
            seatRange('N', 1, 16), seatRange('O', 1, 16), seatRange('P', 1, 6)
        );

        // *** FIXED EXECUTIVE NIGHT BOOKED (G,H rows not included!) ***
        const EXECUTIVE_NIGHT = [].concat(
            seatRange('A', 1, 18),
            seatRange('B', 1, 18),
            seatRange('C', 1, 18),
            seatRange('D', 1, 18),
            seatRange('E', 1, 18),
            seatRange('F', 1, 18)
        );

        const CORPORATE_NIGHT = [].concat(
            seatRange('I', 1, 16), seatRange('J', 1, 16), seatRange('K', 1, 16),
            seatRange('L', 1, 10)
        );
        const BUDGET_NIGHT = [].concat(
            seatRange('N', 1, 16), seatRange('O', 1, 16), seatRange('P', 1, 5)
        );

        // Final data object
        const timingSpecificBookedSeats = {
            1: [...EXECUTIVE_MORNING, ...CORPORATE_MORNING, ...BUDGET_MORNING],
            2: [...SEATS_EXECUTIVE, ...SEATS_CORPORATE, ...SEATS_BUDGET],
            3: [...EXECUTIVE_PRIME, ...CORPORATE_PRIME, ...BUDGET_PRIME],
            4: [...EXECUTIVE_NIGHT, ...CORPORATE_NIGHT, ...BUDGET_NIGHT]
        };

        function getBookedSeatsForTiming(timingId) {
            return timingSpecificBookedSeats[timingId] || [];
        }
        function refreshSeatingLayout() {
            const bookedSet = new Set(getBookedSeatsForTiming(selectedTimingId));
            diagram.nodes.forEach(function (node) {
                if (node.addInfo && node.addInfo.SeatNumber) {
                    // RESET all nodes first
                    node.style.fill = 'transparent';
                    node.style.strokeColor = '#9CA3AF';
                    if (node.annotations && node.annotations[0]) {
                        node.annotations[0].style.color = "#374151";
                    }
                    node.addInfo.Booked = false;
                    // Now re-apply BOOKED status for this timing
                    if (bookedSet.has(node.id)) {
                        node.style.fill = '#E5E7EB';
                        node.style.strokeColor = '#E5E7EB';
                        if (node.annotations && node.annotations[0]) {
                            node.annotations[0].style.color = "#9CA3AF";
                        }
                        node.addInfo.Booked = true;
                    }
                    node.tooltip = { content: seatTooltipTemplate(node.addInfo, node) };
                }
            });
            diagram.dataBind();
        }
        function getNodeDefaults(obj) {
            obj.tooltip.content = {
                content: getContent(obj.addInfo),
                relativeMode: 'Object'
            };
            obj.tooltip.relativeMode = 'Object';
            return obj;
        }
        function getContent(data) {
            var tooltipContent = document.createElement('div');
            tooltipContent.innerHTML = seatTooltipTemplate(data);
            return tooltipContent;
        }
        function onCreated(args) {
            diagram = document.getElementById("seatsDiagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.SingleSelect | ej.diagrams.DiagramTools.ZoomPan;
            diagram.fitToPage();
            refreshSeatingLayout();
            bindTimingClicks();
        }

        function refreshSeatingLayout() {
            const bookedSet = new Set(getBookedSeatsForTiming(selectedTimingId));
            diagram.nodes.forEach(function (node) {
                if (node.addInfo && node.addInfo.SeatNumber) {
                    // RESET all nodes first
                    node.style.fill = 'transparent';
                    node.style.strokeColor = '#9CA3AF';
                    if (node.annotations && node.annotations[0]) {
                        node.annotations[0].style.color = "#374151";
                    }
                    node.addInfo.Booked = false;
                    // Now re-apply BOOKED status for this timing
                    if (bookedSet.has(node.id)) {
                        node.style.fill = '#E5E7EB';
                        node.style.strokeColor = '#E5E7EB';
                        if (node.annotations && node.annotations[0]) {
                            node.annotations[0].style.color = "#9CA3AF";
                        }
                        node.addInfo.Booked = true;
                    }
                    node.tooltip = { content: seatTooltipTemplate(node.addInfo, node) };
                }
            });
            diagram.dataBind();
        }

        function bindTimingClicks() {
            var timingItems = document.querySelectorAll('.timing-item');
            timingItems.forEach(function (item) {
                // Don't bind click for sold-out (has pointer-events:none in style OR class)
                var timingId = parseInt(item.getAttribute("data-timing"));
                if (item.classList.contains('sold-out')) return;
                item.onclick = function () {
                    // Remove 'selected' class from all
                    timingItems.forEach(function (it) { it.classList.remove('selected'); });
                    // Add 'selected' class to currently clicked
                    item.classList.add('selected');
                    // 1. Set selectedTimingId for JS
                    selectedTimingId = timingId;
                    // 2. Clear seat selection and update booking summary
                    selectedSeatsArray = [];
                    // 3. Refresh booking UI for the new timing
                    refreshSeatingLayout();
                    updateBookingSummary();
                    updateBookingSummaryUI();
                    hideNotification();
                    updateDateTime(selectedTimingId - 1);
                };
            });
        }

        function showNotification(message) {
            var notif = document.getElementById("notification");
            notif.textContent = message;
            notif.style.display = "block";
        }
        function hideNotification() {
            var notif = document.getElementById("notification");
            notif.style.display = "none";
        }
        function seatTooltipTemplate(addInfoData, currentNode) {
            // props is the node object (diagram node)
            var addInfo = addInfoData || {};
            var seatNumber = addInfo.SeatNumber || "";
            var row = addInfo.Row || "";
            var tier = addInfo.TierCategory || addInfo.Tier || "";
            var price = addInfo.Price !== undefined ? addInfo.Price : "";

            // You must determine selected/booked status here (JS logic)
            var isSelected;
            if (currentNode) {
                isSelected = (selectedSeatsArray && selectedSeatsArray.includes(currentNode.id));
            }
            var isBooked = !!addInfo.Booked;
            var status = isSelected ? "Selected" : isBooked ? "Booked" : "Available";
            var statusBg = (isSelected ? "#28a745" : isBooked ? "#6c757d" : "#17a2b8");

            return `
                  <div style="margin:0;padding:10px;font-family:Arial,sans-serif;min-width:150px;">
                    <div style="font-weight:bold;margin-bottom:5px;font-size:14px;">
                      Seat ${seatNumber}
                    </div>
                    <div style="font-size:12px;margin-bottom:3px;">
                      <strong>Row:</strong> ${row}
                    </div>
                    <div style="font-size:12px;margin-bottom:3px;">
                      <strong>Category:</strong> ${tier}
                    </div>
                    <div style="font-size:12px;margin-bottom:3px;">
                      <strong>Price:</strong> $${price}
                    </div>
                    <div style="font-size:12px;margin-top:5px;">
                      <span style="padding:2px 6px;border-radius:3px;font-weight:bold;background-color:${statusBg};color:white;font-size:11px;">
                        ${status}
                      </span>
                    </div>
                  </div>
                `;
        }
        function seatClicked(args) {
            if (args && args.element && args.element instanceof ej.diagrams.Node && args.element.addInfo) {
                var currentNode = args.element;
                if (currentNode.addInfo.Booked) {
                    currentNode.tooltip = { content: seatTooltipTemplate(currentNode.addInfo, currentNode) };
                    return;
                } else {
                    if (!selectedSeatsArray.includes(currentNode.id)) {
                        // --- Get current seat's tier ---
                        var newTier = (currentNode.addInfo.TierCategory || currentNode.addInfo.Tier || "").toString();
                        // --- Find all selected seats' node infos ---
                        var selectedSeats = selectedSeatsArray.map(function (seatId) {
                            var node = diagram.getObject(seatId);
                            return node && node.addInfo ? node : null;
                        }).filter(Boolean);
                        // --- If there are previously selected seats, check their tier ---
                        var currentTier = selectedSeats.length > 0 ?
                            (selectedSeats[0].addInfo.TierCategory || selectedSeats[0].addInfo.Tier || "").toString()
                            : null;
                        var differentTier = currentTier && newTier !== currentTier;
                        // --- Handle switching tier: clear previous, only select new seat ---
                        if (differentTier) {
                            // Deselect all previous
                            selectedSeatsArray.forEach(function (seatId) {
                                var seatNode = diagram.getObject(seatId);
                                if (seatNode) {
                                    seatNode.style.fill = "transparent";
                                    seatNode.style.strokeColor = "#9CA3AF";
                                    if (seatNode.annotations && seatNode.annotations[0]) {
                                        seatNode.annotations[0].style.color = "black";
                                    }
                                }
                            });
                            selectedSeatsArray = []; // Clear list
                            hideNotification();
                        } else if (selectedSeatsArray.length >= 10) {
                            // --- Limit 10 seats ---
                            showNotification("Maximum 10 tickets can be selected");
                            return;
                        }
                        // Now add the new selection
                        selectedSeatsArray.push(currentNode.id);
                        currentNode.style.fill = "#15803D";
                        currentNode.style.strokeColor = "#15803D";
                        if (currentNode.annotations && currentNode.annotations[0]) {
                            currentNode.annotations[0].style.color = "white";
                        }
                        diagram.dataBind();
                        if (selectedSeatsArray.length < 10) {
                            hideNotification();
                        }
                    } else {
                        // --- Remove seat ---
                        var idx = selectedSeatsArray.indexOf(currentNode.id);
                        if (idx !== -1) {
                            selectedSeatsArray.splice(idx, 1);
                        }
                        currentNode.style.fill = "transparent";
                        currentNode.style.strokeColor = "#9CA3AF";
                        if (currentNode.annotations && currentNode.annotations[0]) {
                            currentNode.annotations[0].style.color = "black";
                        }
                        diagram.dataBind();
                        hideNotification();
                    }
                    currentNode.tooltip = { content: seatTooltipTemplate(currentNode.addInfo, currentNode) };
                    updateBookingSummary();
                    updateBookingSummaryUI();
                }
            }
        }
        function updateBookingSummary() {
            if (selectedSeatsArray.length > 0) {
                var selectedSeats = selectedSeatsArray.map(function (seatId) {
                    var node = diagram.getObject(seatId);
                    if (node && node.addInfo) {
                        var price = parseFloat(node.addInfo.Price);
                        if (isNaN(price)) price = 0;
                        return {
                            SeatNumber: node.addInfo.SeatNumber || "",
                            Row: node.addInfo.Row || "",
                            Price: price,
                            Tier: (node.addInfo.TierCategory || node.addInfo.Tier || "").toString()
                        };
                    }
                    return null;
                }).filter(Boolean);
                seatSelection.SeatNumbers = selectedSeats.map(s => s.SeatNumber);
                seatSelection.TicketCount = selectedSeats.length;
                var totalAmount = selectedSeats.reduce((sum, s) => sum + (Number(s.Price) || 0), 0);
                seatSelection.Amount = selectedSeats.length ? totalAmount : null;
                seatSelection.Category = selectedSeats.length > 0 ? selectedSeats[0].Tier.toUpperCase() : "";
            } else {
                seatSelection.SeatNumbers = [];
                seatSelection.TicketCount = 0;
                seatSelection.Amount = null;
                seatSelection.Category = "";
            }
        }
        function updateBookingSummaryUI() {
            if (seatSelection.TicketCount > 0) {
                document.getElementById('ticketCount').innerText = seatSelection.TicketCount + " Tickets Selected";
                document.getElementById('totalAmount').innerText = seatSelection.Amount == null ? '$0' : "$" + (seatSelection.Amount + 6);
                document.getElementById('priceHint').style.display = 'block';
                document.getElementById('ticketAmount').innerText = "Tickets: $" + (seatSelection.Amount);
                document.getElementById('feesAmount').innerText = "+ Fees: $" + 6;
            } else {
                document.getElementById('ticketCount').innerText = "0 Tickets Selected";
                document.getElementById('totalAmount').innerText = "$0";
                document.getElementById('priceHint').style.display = 'none';
                document.getElementById('ticketAmount').innerText = "";
                document.getElementById('feesAmount').innerText = "";
            }
            document.getElementById('proceedButton').disabled = seatSelection.TicketCount === 0;
        }

        function updateDateTime(id) {
            const showtiming = showTimings[id];
            const now = new Date();
            const options = {
                weekday: 'long',
                day: '2-digit',
                month: 'short'
            };
            const formatted = now.toLocaleString('en-IN', options);
            document.getElementById('movie-timing').textContent = `${formatted}` + `, ${showtiming.time}`;
            const day = now.toLocaleDateString('en-IN', { weekday: 'short' });
            const date = now.toLocaleDateString('en-IN', { day: '2-digit', month: 'short' });
            document.getElementById('date-label').innerHTML = `${day}<br>${date}`;
        }

        updateDateTime(0);

        function bookSeatsForTiming(timingId, bookingSeatIds) {
            if (!timingSpecificBookedSeats[timingId]) {
                timingSpecificBookedSeats[timingId] = [];
            }
            timingSpecificBookedSeats[timingId].push(...bookingSeatIds);
        }
        // Razor-inspired dialog content builder
        function buildBookingSuccessHtml(movieTitle, theater, showTime, seats, totalAmount, bookingId) {
            return `
              <div class="notification-header">
                <div class="success-icon">&#10003;</div>
                <div class="success-title">Booking Confirmed!</div>
                <div class="success-message">
                  Your tickets have been successfully booked.
                </div>
              </div>
              <div class="booking-details">
                <h4>Booking Details:</h4>
                <p><strong>Movie:</strong> ${movieTitle}</p>
                <p><strong>Theater:</strong> ${theater}</p>
                <p><strong>Show Time:</strong> ${showTime}</p>
                <p><strong>Seats:</strong> ${seats}</p>
                <p><strong>Total Amount:</strong> $${totalAmount}</p>
                <p><strong>Booking ID:</strong> ${bookingId}</p>
              </div>
              `;
        }

        // Create the dialog ONCE (not inside proceed click!)
        var bookingDialog = new ej.popups.Dialog({
            cssClass: '', // Do not set 'success-modal' here
            content: '',
            width: '435px',
            target: '.control-section',
            isModal: true,
            visible: false,
            showCloseIcon: false,
            buttons: [{
                click: function () { bookingDialog.hide(); },
                buttonModel: { content: 'Close', cssClass: 'btn2 btn2-proceed', isPrimary: true }
            }]
        });
        bookingDialog.appendTo('#bookingSuccessDialog');
        document.getElementById('proceedButton').onclick = function () {
            if (selectedSeatsArray.length === 0) return;

            // Mark booked, update timingSpecificBookedSeats, etc...
            bookSeatsForTiming(selectedTimingId, selectedSeatsArray);

            var movieTitle = "F1: The Movie";
            var theater = "Velvet Aurora Cinematheque";
            var showTime = document.getElementById('movie-timing').textContent;
            var seats = seatSelection.SeatNumbers.join(", ");
            var totalAmount = (seatSelection.Amount + 6).toFixed(2);
            var bookingId = 'VAC' + Date.now().toString().slice(-8);

            // Set dialog content with proper classes
            bookingDialog.content = buildBookingSuccessHtml(movieTitle, theater, showTime, seats, totalAmount, bookingId);
            bookingDialog.show();

            // Mark seats as booked,
            selectedSeatsArray.forEach(function (seatId) {
                var node = diagram.getObject(seatId);
                if (node && node.addInfo) {
                    node.addInfo.Booked = true;
                    node.style.fill = '#E5E7EB';
                    node.style.strokeColor = '#E5E7EB';
                    if (node.annotations && node.annotations[0]) {
                        node.annotations[0].style.color = '#9CA3AF';
                    }
                }
            });

            // Clear select, refresh UI
            selectedSeatsArray = [];
            updateBookingSummary();
            updateBookingSummaryUI();
            refreshSeatingLayout();
            hideNotification();
        };

    </script>

    <style>
        /* Your existing styles remain the same */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
        }

        .header {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            padding: 20px 24px;
            padding-top: 0px;
            border-bottom: 1px solid #e0e0e0;
        }

            .header h2 {
                margin: 0;
                font-weight: normal;
            }

        .movie-title-section {
            display: flex;
            flex-direction: column;
            align-content: center;
            margin-bottom: 8px;
        }

        .movie-name-lnk {
            text-decoration: none;
            font-size: 20px;
            font-weight: 500;
            margin: 0;
            color: #337ab7;
            font-family: Segoe UI, sans-serif;
        }

        .theater-name, .movie-timing {
            font-size: 14px !important;
        }

        .separator {
            margin: 0 8px;
        }

        .show-timing-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            align-content: space-around;
            border-bottom: 1px solid #E5E7EB;
        }

        .date-row {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            width: 100%;
        }

        .date-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: #666666;
            text-align: center;
            line-height: 1.3;
            min-width: 60px;
            padding-right: 2.5rem;
            border-right: 1px solid #9CA3AF;
        }

        .timing-list {
            display: flex;
            justify-content: center;
            gap: 12px;
            list-style: none;
            padding: 0;
            margin: 0;
            width: 100%;
        }

        .timing-item {
            padding: 12px 16px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            text-align: center;
            min-width: 120px;
            border: 1px solid transparent;
        }

            .timing-item .time {
                font-size: 16px;
                font-weight: 600;
                margin-bottom: 4px;
            }

            .timing-item .screen-type {
                font-size: 10px;
                font-weight: 500;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            /* Available timings */
            .timing-item.available {
                background-color: #FFFFFF;
                border-radius: 8px;
                border: 1px solid #9CA3AF;
                color: #15803D;
            }

                .timing-item.available:hover {
                    background-color: #f3f4f6;
                    border-radius: 8px;
                    border-color: #9ca3af;
                }

            /* Filling fast timings */
            .timing-item.filling-fast {
                background-color: #fef3c7;
                border-radius: 8px;
                border: 1px solid #f59e0b;
                color: #92400e;
            }

                .timing-item.filling-fast:hover {
                    background-color: #fde68a;
                    border-radius: 8px;
                    border-color: #d97706;
                }
            /* Selected timing */
            .timing-item.selected {
                background-color: #4F46E5;
                border: 1px solid #4F46E5;
                border-radius: 8px;
                color: white;
            }
            /* Sold out timings */
            .timing-item.sold-out {
                border-radius: 8px;
                background-color: #FFFFFF;
                border: 1px solid #D1D5DB;
                color: #9CA3AF;
                cursor: not-allowed;
                opacity: 0.6;
            }

        .main-container {
            min-height: calc(100vh - 100px);
            gap: 0;
        }

        .ticket-selection-section {
            background-color: #f8f9fa;
            margin-top: 2px;
            min-height: 500px;
        }

        .booking-summary-container {
            box-sizing: border-box;
            width: 100%;
            height: 154px;
            left: 0px;
            top: 1357px;
            border-top: 1px solid #E5E7EB;
            margin-top: 20px
        }

        .booking-summary-section {
            position: relative;
            background: #fff;
            background-color: #ffffff;
            background-repeat: no-repeat;
            border: none;
            border-radius: 10px;
            font-family: Arial, sans-serif;
            margin-top: 2px;
            padding: 0px;
            height: 500px;
        }

            .booking-summary-section .header {
                position: relative;
                top: 0;
                left: 0;
                right: 0;
                height: 50px;
                font-size: 25px;
                color: #d9534f;
                text-transform: uppercase;
                letter-spacing: 1px;
                margin-bottom: 0;
                background: none;
                padding: 12px 16px;
                display: block;
                text-align: left;
                flex-shrink: 0;
            }

        .booking-content {
            padding: 30px 30px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        /* Add these helper classes for better control */
        .left {
            flex: 1;
            text-align: left;
        }

        .right {
            text-align: right;
            white-space: nowrap;
        }

        .subtext {
            font-size: 16px;
            color: #777;
            margin-left: 10px;
        }

        .bold {
            font-weight: bold;
        }

        .divider {
            border-top: 1px solid #eee;
            margin: 8px 0;
        }

        .footer {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 75px;
            background: #fff3cd;
            border-radius: 0 0 10px 10px;
            padding: 12px 16px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-shrink: 0
        }

        .__circle-left,
        .__circle-right {
            position: absolute;
            width: 20px;
            height: 20px;
            background: #f2f2f2;
            border-radius: 50%;
            top: 50%;
            transform: translateY(-50%);
            z-index: 1;
        }

        .__circle-left {
            left: -10px;
            border: 1px solid #f2f2f2;
            clip-path: polygon(50% 0%, 100% 0%, 100% 100%, 50% 100%);
        }

        .__circle-right {
            right: -10px;
            border: 1px solid #f2f2f2;
            border-right: none;
        }

        .action-buttons {
            display: flex;
            gap: 12px;
            margin-top: 20px;
            padding: 0 10px;
            height: auto;
        }

        .btn {
            flex: 1;
            padding: 12px 20px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            height: 50px;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }


        .btn-proceed {
            background-color: rgb(103, 85, 238);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            margin-right: 30%;
            transition: background-color 0.3s;
            color: white;
        }

        btn-proceed:hover {
            background-color: #5a4fcf;
            transform: translateY(-1px);
        }


        .btn-clear {
            background-color: #f8f9fa;
            color: #666;
            border: 1px solid #e9ecef;
        }

            .btn-clear:hover {
                background-color: #e9ecef;
                color: #333;
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
            box-shadow: none !important;
        }

        .seat-legend {
            padding: 20px;
        }

        .legend-items {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .legend-seat {
            width: 30px;
            height: 30px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 12px;
            position: relative;
        }

            .legend-seat.available {
                background-color: transparent;
                border: 2px solid #9CA3AF;
                color: #9CA3AF;
            }


            .legend-seat.selected {
                background-color: #15803D;
                border: 2px solid #15803D;
                color: #15803D;
            }


            .legend-seat.booked {
                background-color: #E5E7EB;
                border: 2px solid #E5E7EB;
                color: #E5E7EB;
            }


        .legend-text {
            font-size: 14px;
            font-weight: 500;
        }

        /* Success Modal Styles */
        .success-modal {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        .success-icon {
            font-size: 60px;
            color: #28a745;
            margin-bottom: 20px;
        }

        .success-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .success-message {
            margin-bottom: 20px;
            line-height: 1.5;
            text-wrap-mode: wrap;
        }

        .booking-details {
            padding: 15px;
            border-radius: 5px;
            text-align: left;
        }

            .booking-details h4 {
                margin-bottom: 10px;
            }

            .booking-details p {
                margin: 5px 0;
                font-size: 14px;
            }

        /* Auto-hide notification */
        .notification {
            position: absolute;
            top: 20px;
            right: 20px;
            background: #d9534f;
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }

        @@keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Mobile responsive styles */
        @@media screen and (max-width: 768px) {
            .main-container {
                grid-template-columns: 1fr !important;
                grid-template-rows: auto auto !important;
            }

            .ticket-selection-section {
                grid-row: 1 !important;
                margin: 10px !important;
                padding: 15px !important;
            }

            .booking-summary-container {
                grid-row: 2 !important;
                padding: 0px 10px 20px 10px !important;
            }

            .booking-summary-section {
                height: auto !important;
                min-height: 400px !important;
            }

            .header {
                padding: 15px 10px !important;
            }

                .header h2 {
                    font-size: 18px !important;
                }

            .movie-name-lnk {
                font-size: 20px !important;
            }

            .theater-name,
            .movie-timing {
                font-size: 12px !important;
            }
        }

        .timing-list {
            display: flex;
            flex-wrap: wrap; /* Optional: allows wrapping to the next line if needed */
            list-style: none;
            padding: 0;
            margin: 0;
        }

            .timing-list li {
                margin: 10px; /* Adjust spacing between items */
                padding: 10px;
                border-radius: 3px;
            }


                .timing-list li.selected {
                    background-color: #4F46E5;
                    color: white;
                }

                .timing-list li.available {
                    border: 1px solid #9CA3AF;
                    color: #15803D;
                    background-color: transparent;
                }

                    .timing-list li.available:hover {
                        background-color: #DCFCE7;
                        border: 1px solid #15803D;
                        color: #15803D;
                    }

                .timing-list li.filling-fast {
                    border: 1px solid #9CA3AF;
                    color: #C2410C;
                    background-color: transparent;
                }

                    .timing-list li.filling-fast:hover {
                        background-color: #FFEDD5;
                        border: 1px solid #C2410C;
                        color: #C2410C;
                    }

                .timing-list li.sold-out {
                    border: 1px solid #D1D5DB;
                    color: #9CA3AF;
                    background-color: #FFFFFF;
                    cursor: not-allowed;
                    opacity: 0.7;
                }

                    .timing-list li.sold-out:hover {
                        border: 1px solid #D1D5DB;
                        color: #9CA3AF;
                        background-color: #FFFFFF;
                        color: #6c757d;
                    }

                .timing-list li.selected {
                    background-color: #4F46E5;
                    color: white;
                    border: 1px solid #4F46E5;
                }

        .booking-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .price-info {
            display: flex;
            flex-direction: column;
            margin-left: 30%;
        }

        .price {
            font-size: 24px;
            font-weight: bold;
        }

        .ticket-count {
            font-size: 14px;
            margin-top: 5px;
        }


        .btn-proceed {
            background-color: rgb(103, 85, 238);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            margin-right: 30%;
            transition: background-color 0.3s;
            color: white;
        }

            .btn-proceed:hover {
                background-color: #5a4fcf;
                transform: translateY(-1px);
            }


        .btn2 {
            flex: 1;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .price-hint-inline {
            font-size: 12px;
            margin: 4px 0 0 0;
            display: flex;
            gap: 12px;
        }

        .timing-list {
            display: flex;
            justify-content: center;
            gap: 12px;
            list-style: none;
            padding: 0;
            margin: 0;
            width: 100%;
        }

        .btn-proceed[disabled] {
            background-color: #e3e3e3 !important;
            color: gray;
        }
    </style>
}


@section ActionDescription{
    <p>
        This sample implements a functional movie ticket booking interface using the Syncfusion<sup>®</sup> ASP.NET Core Diagram component, providing an intuitive visual representation of a cinema hall's seating arrangement with real-time price updates and a complete booking workflow.
    </p>
}
@section Meta{
    <meta name="description" content="Book cinema seats interactively with Syncfusion ASP.NET Core Diagram. Select seats by tier, view real-time pricing, and confirm bookings with dynamic updates and responsive design." />
}
@section Description{
    <p>
        This interactive cinema seat booking experience begins with users selecting a showtime, which dynamically updates the seating layout to reflect real-time availability. Users can highlight and select seats (up to 10 within a single tier), while the booking summary panel instantly updates prices and fees. Tooltip provide seat details, and a "Proceed" button leads to a confirmation screen with a unique booking ID.
    </p>
}
@section Title{
    <title>ASP.NET Core Diagram ticket booking system Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Interactive Cinema Seat Booking System in ASP.NET Core Diagram Component</h1>
}
