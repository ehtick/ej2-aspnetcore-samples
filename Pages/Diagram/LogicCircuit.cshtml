@page
@model EJ2CoreSampleBrowser.Pages.Diagram.LogicCircuitModel
@using Syncfusion.EJ2.Diagrams;
@{
    var getNodeDefaults = "getNodeDefaults";
    var getConnectorDefaults = "getConnectorDefaults";
    var getSymbolInfo = "getSymbolInfo";
    var getSymbolDefaults = "getSymbolDefaults";
}
@section ControlsSection{
    <div class="control-section">
        <div id="logicCircuit" style="width: 100%; height: 600px">
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
            </div>
            <div id="palette-space" class="sb-mobile-palette">
                <ejs-symbolpalette id="symbolPalette" symbolHeight="60" symbolWidth="62"
                                   expandMode="@Model.Multiple" width="100%" height="600px" palettes="@Model.Palette"
                                   getNodeDefaults="@getSymbolDefaults"
                                   symbolMargin="new SymbolPaletteMargin() { Left=10,Right=10,Top=10,Bottom=10}"
                                   getSymbolInfo="@getSymbolInfo">
                </ejs-symbolpalette>
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                <ejs-diagram id="diagram" width="100%" height="100%" created="diagramCreated"
                             getNodeDefaults="@getNodeDefaults"
                             getConnectorDefaults="@getConnectorDefaults"
                             constraints="@Model.constraints"
                             nodes="@Model.Nodes" connectors="@Model.Connectors"
                             snapSettings="@Model.snapSettings">
                </ejs-diagram>
            </div>
        </div>
    </div>

    <style>

        #container {
            displaY : block;
        }

        #symbolPalette {
            displaY: block;
        }
     
        /* These styles are used for aligning palette and diagram */
        .sb-mobile-palette {
            width: 240px;
            height: 100%;
            float: left;
        }

        .sb-mobile-palette-bar {
            displaY: none;
        }

        .sb-mobile-diagram {
            width: calc(100% - 242px);
            height: 100%;
            float: left;
        }

        @@media (max-width: 550px) {

            .sb-mobile-palette {
                z-indeX: 19;
                position: absolute;
                displaY : none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 39%;
                height: 100%;
            }

            .sb-mobile-palette-bar {
                displaY: block;
                width: 100%;
                background: #fafafa;
                padding: 10px 10px;
                border: 0.5px solid #e0e0e0;
                min-height: 40px;
            }

            .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }

            #palette-icon {
                font-size: 20px;
            }
        }

        .sb-mobile-palette-open {
            position: absolute;
            displaY: block;
            right: 15px;
        }

        .e-toggle-palette::before {
            content: "\e700"
        }

    </style>
    <script>
        function getNodeDefaults(node, diagram) {
            node.style.strokeWidth = 1;
            node.style.strokeColor = '#444';
        }

        function getConnectorDefaults(connector, diagram) {
            if (connector.id !== 'line16') {
                connector.targetDecorator.shape = 'None';
                connector.targetDecorator.style.strokeColor = '#444';
                connector.targetDecorator.style.fill = '#444';
            }
            connector.style = { strokeWidth: 1, strokeColor: '#444' };
            connector.style = { strokeWidth: 1, strokeColor: '#444' };
            connector.cornerRadius = 5;
            return connector;
        }


        function diagramCreated() {
            var diagram = document.getElementById('diagram').ej2_instances[0];
            diagram.fitToPage();
            addEvents();
        }
        function getSymbolInfo(symbol) {
            return { fit: true };
        }
        function getSymbolDefaults(symbol) {
            symbol.width = 55;
            symbol.height = 40;
            symbol.offsetX = 20;
            symbol.offsetY = 20;
            symbol.style = { fill: 'white', strokeWidth: 1, strokeColor: '#757575' };
        }

        function addEvents() {
            var isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                var paletteIcon = document.getElementById('palette-icon');
                if (paletteIcon) {
                    paletteIcon.addEventListener('click', openPalette, false);
                }
            }
        }
        @*custom code start*@
        function openPalette() {
            var paletteSpace = document.getElementById('palette-space');
            var isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {
                    paletteSpace.classList.add('sb-mobile-palette-open');
                }
                else {
                    paletteSpace.classList.remove('sb-mobile-palette-open');
                }
            }
        }
        @*custom code end*@
    </script>

}
@section ActionDescription{
    <p>
        This sample visualizes implementation of three input Boolean functions using universal logic gates. The shapes for logic gates are designed with diagram's path node feature.
    </p>

}
@section Meta{
                    <meta name="description" content="This example demonstrates the Logic Circuit Diagram in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This example shows how to create Boolean algebraic laws and theorems using diagram <code>path</code> shapes. The <code>type</code>
        property of the <code>shape</code> can be used to create <code>path</code> nodes. The <code>data</code> property of the shape allows you to
        define path data of the path shape.
    </p>
}
@section Title{
                    <title>ASP.NET Core Diagram Logic Circuit Diagram Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Logic Circuit Diagram in ASP.NET Core Diagram Control</h1>
                }