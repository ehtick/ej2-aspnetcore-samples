@page
@model EJ2CoreSampleBrowser.Pages.Diagram.HierarchicalTreeModel
@{
    ViewData["Title"] = "Checkbox";
    Layout = "~/Pages/Shared/_Layout.cshtml";
    var getConnectorDefaults = "ConnectorDefaults";
    var getNodeDefaults = "nodeDefaults";
}
@using Syncfusion.EJ2;


@section ControlsSection {
    <div class="col-lg-8 control-section">
        <div class="content-wrapper">
            <ejs-diagram id="diagram" width="100%" height="550px" getNodeDefaults="@getNodeDefaults" getConnectorDefaults="@getConnectorDefaults" created="diagramCreated">
                <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
                <e-diagram-datasourcesettings id="Name" parentId="Category" dataSource="new DataManager() { Data = (List<HierarchicalDetails>)@Model.Nodes }"></e-diagram-datasourcesettings>
                <e-diagram-layout type="HierarchicalTree"></e-diagram-layout>
            </ejs-diagram>
        </div>
    </div>
    <div class="col-lg-4 property-section" id="diagram-layout-property-section">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="row property-panel-content" id="appearance">
            <div class="row row-header">
                Appearance
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="diagram-image-pattern-style diagram-panel-selected-style" id="topToBottom" style="background-image: url('@Url.Content("~/images/Diagram/common-orientation/toptobottom.png")'); margin-right: 3px">
                </div>
                <div class="diagram-image-pattern-style" id="bottomToTop" style="background-image: url('@Url.Content("~/images/Diagram/common-orientation/bottomtotop.png")'); margin: 0px 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="diagram-image-pattern-style" id="leftToRight" style="background-image: url('@Url.Content("~/images/Diagram//common-orientation/lefttoright.png")'); margin-right: 3px">
                </div>
                <div class="diagram-image-pattern-style" id="rightToLeft" style="background-image: url('@Url.Content("~/images/Diagram/common-orientation/righttoleft.png")'); margin: 0px 3px">
                </div>
            </div>
        </div>
        <div class="row property-panel-content" style="padding-top: 10px">
            <div class="row row-header">
                Behavior
            </div>
            <div class="row" style="padding-top: 8px">
                <div style="display: table;height: 35px;" class="col-xs-6">
                    <div style="display: table-cell; vertical-align: middle">Horizontal Spacing</div>
                </div>
                <div class="col-xs-6">
                    <ejs-numerictextbox id="hSpacing" format="###.##" change="hSpacingChange" width="100%" min="20" max="60" step="2" value="40"></ejs-numerictextbox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div style="display: table;height: 35px;" class="col-xs-6">
                    <div style="display: table-cell; vertical-align: middle">Vertical Spacing</div>
                </div>
                <div class="col-xs-6">
                    <ejs-numerictextbox id="vSpacing" format="###.##" change="vSpacingChange" width="100%" min="20" max="60" step="2" value="40"></ejs-numerictextbox>
                </div>
            </div>
             <div class="row" style="padding-top: 8px">
                <ejs-checkbox id="checked" checked="false" label="Expandable" change="onChange"></ejs-checkbox>
            </div>
        </div>
    </div>

    <style>
      
        /* Css for images in property panel  */
        .diagram-image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 75px;
            width: calc((100% - 12px) / 2);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }
        /* Property panel CSS */
        #diagram-layout-property-section .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        #diagram-layout-property-section .row-header {
            font-size: 13px;
            font-weight: 500;
        }
        /* Selection indicator */
        .diagram-panel-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        #diagram-layout-property-section .col-xs-6 {
            padding-left: 0px;
            padding-right: 0px;
        }
    </style>
    <script type="text/javascript">

        function diagramCreated() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }

        function hSpacingChange(args) {
            var hSpacing = document.getElementById("hSpacing");
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.layout.horizontalSpacing = Number(hSpacing.value);
            diagram.dataBind();
        }
        function vSpacingChange(args) {
            var vSpacing = document.getElementById("vSpacing");
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.layout.verticalSpacing = Number(vSpacing.value);
            diagram.dataBind();
        }


        function nodeDefaults(obj, diagram) {
            obj.shape = { type: 'Text', content: obj.data.Name };
            obj.style = { fill: '#659be5', strokeColor: 'none', color: 'white', strokeWidth: 2 };
            obj.borderColor = '#3a6eb5';
            obj.backgroundColor = '#659be5';
            obj.shape.margin = { left: 5, right: 5, bottom: 5, top: 5 };
            obj.expandIcon = { height: 10, width: 10, shape: 'None', fill: 'lightgray', offset: { x: 0.5, y: 1 } };
            obj.expandIcon.verticalAlignment = 'Auto';
            obj.expandIcon.margin = { left: 0, right: 0, top: 0, bottom: 0 };
            obj.collapseIcon.offset = { x: 0.5, y: 1 };
            obj.collapseIcon.verticalAlignment = 'Auto';
            obj.collapseIcon.margin = { left: 0, right: 0, top: 0, bottom: 0 };
            obj.collapseIcon.height = 10;
            obj.collapseIcon.width = 10;
            obj.collapseIcon.padding.top = 5;
            obj.collapseIcon.shape = 'None';
            obj.collapseIcon.fill = 'lightgray';
            return obj;
        }

        function ConnectorDefaults(connector, diagram) {
            connector.targetDecorator.shape = 'None';
            connector.type = 'Orthogonal';
            connector.style.strokeColor = '#6d6d6d';
            connector.constraints = 0;
            connector.cornerRadius = 5;
            return connector;
        }

        document.getElementById('appearance').onclick = function (args) {
            var target = args.target;
            var diagram = document.getElementById("diagram").ej2_instances[0];
            @*custom code start*@
            var selectedElement = document.getElementsByClassName('diagram-panel-selected-style');
            if (selectedElement.length) {
                selectedElement[0].classList.remove('diagram-panel-selected-style');
            }
            @*custom code end*@
            if (target.className === 'diagram-image-pattern-style') {
                var id = target.id;
                var orientation1 = id.substring(0, 1).toUpperCase() + id.substring(1, id.length);
                diagram.layout.orientation = orientation1;
                diagram.dataBind();
                diagram.doLayout();
                @*custom code start*@
                target.classList.add('diagram-panel-selected-style');
                @*custom code end*@
            }
        };
     function onChange(args) {
          var diagram = document.getElementById("diagram").ej2_instances[0];
        for (var _i = 0, _a = diagram.nodes; _i < _a.length; _i++) {
            var node = _a[_i];
            if (args.checked) {
                node.expandIcon.shape = 'Minus';
                node.collapseIcon.shape = 'Plus';
            }
            else {
                node.expandIcon.shape = 'None';
                node.collapseIcon.shape = 'None';
            }
        }
        diagram.dataBind();
        diagram.doLayout();
    };
    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates a generating hierarchical tree from right to left orientation with external data source.

    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Hierarchical Tree in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        In this example, you can see how to generate a complex hierarchical tree from external data sources. You can also customize the spacing between the objects in the tree. You can use the
        <code>horizontalSpacing</code> and <code>verticalSpacing</code> properties of <code>layout</code> to customize the space between the objects in the tree. You can use the <code>layoutOrientation</code> property of
        <code>layout</code> to change the orientation of the tree.
    </p>
    <p>
        To change the orientation of the tree, click the templates that are added to the property panel.
    </p>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Diagram component's features are segregated into individual feature-wise modules. To generate diagrams from an external data source,
        we need to Inject <code>DataBinding</code> module using <code>Diagram.Inject(DataBinding)</code> method. To automatically arrange the objects in a hierarchical structure, we need to Inject <code>ComplexHierarchicalTree</code> module using
        <code>Diagram.Inject(ComplexHierarchicalTree)</code> method.

    </p>
}
@section Title{
                    <title>ASP.NET Core Diagram Hierarchical Tree Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Hierarchical Tree in ASP.NET Core Diagram Control</h1>
                }