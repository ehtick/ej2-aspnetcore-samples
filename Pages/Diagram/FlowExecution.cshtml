@page
@model EJ2CoreSampleBrowser.Pages.Diagram.FlowExecutionModel
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.DropDowns;

@section ControlsSection{
    <div class="col-lg-8 control-section">
        <style>
            /* Proprty panel CSS */
            #flowExecitionPropertySection .row {
                margin-left: 0px;
                margin-right: 0px;
            }

            #flowExecitionPropertySection .col-xs-7 {
                width: 300px;
            }

            #flowExecitionPropertySection .col-xs-7 {
                padding-left: 0px;
                padding-right: 0px;
            }

            #flowExecitionControlSection.content-wrapper {
                border: 1px solid #D7D7D7;
            }
        </style>

        <div id="flowExecitionControlSection" class="content-wrapper" style="width: 100%;">
            <ejs-diagram id="diagram" width="100%" height="500px" nodes="@Model.nodes" connectors="@Model.connectors" created="created">
                <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
            </ejs-diagram>
        </div>
    </div>
    <div id="flowExecitionPropertySection" class="col-lg-4 property-section">
        <div class="property-panel-header">
            Show flow execution
        </div>
        <div class="row property-panel-content" id="appearance">
            <div class="row property-panel-content" style="width:260px;">
                <div class="row">
                    <div class="col-xs-7">
                        <ejs-radiobutton id="UnhighlightAll" label="None" value="UnhighlightAll" name="radio" change="buttonChange"
                                         ></ejs-radiobutton>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="col-xs-7">
                        <ejs-radiobutton id="LinksInto" label="Incoming connections" value="LinksInto" name="radio" change="buttonChange"></ejs-radiobutton>                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="col-xs-7">
                        <ejs-radiobutton id="LinksOutOf" label="Outgoing connections" value="LinksOutOf" name="radio" change="buttonChange"></ejs-radiobutton>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="col-xs-7">
                        <ejs-radiobutton id="LinksConnected" checked="true" label="Incoming and outgoing connections" value="LinksConnected" name="radio" change="buttonChange"></ejs-radiobutton>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="col-xs-7">
                        <ejs-radiobutton id="NodesInto" label="Incoming nodes" value="NodesInto" name="radio" change="buttonChange"></ejs-radiobutton>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="col-xs-7">
                        <ejs-radiobutton id="NodesOutOf" label="Outgoing nodes" value="NodesOutOf" name="radio" change="buttonChange"></ejs-radiobutton>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="col-xs-7">
                        <ejs-radiobutton id="NodesConnected" label="Incoming and outgoing nodes" value="NodesConnected" name="radio" change="buttonChange"></ejs-radiobutton>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="col-xs-7">
                        <ejs-radiobutton id="NodesReachable" label="Flow of Execution" value="NodesReachable" name="radio" change="buttonChange"></ejs-radiobutton>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        var selectedButton = "LinksConnected";
        function buttonChange(args) {
            applyChanges(args.event.srcElement.id);
            selectedButton = args.event.srcElement.id;
        }
        var highLightedObjects = [];

        function buttonChange(args) {
            applyChanges(args.event.srcElement.id);
            selectedButton = args.event.srcElement.id;
        }

        function applyChanges(id) {
            Unhighlight();
            switch (id) {
                case 'LinksInto':
                    linkedIn();
                    break;
                case 'LinksOutOf':
                    LinksOut();
                    break;
                case 'LinksConnected':
                    LinksConnector();
                    break;
                case 'NodesInto':
                    NodesIn();
                    break;
                case 'NodesOutOf':
                    NodesOut();
                    break;
                case 'NodesConnected':
                    NodesConnect();
                    break;
                case 'NodesReachable':
                    NodeReachable();
                    break;
            }
        }
        function linkedIn() {
            var diagram = document.getElementById("diagram").ej2_instances[0];

            if (diagram.selectedItems.nodes.length) {
                var node = diagram.selectedItems.nodes[0].inEdges;
                for (var i = 0; i < node.length; i++) {
                    var index = diagram.connectors.indexOf(diagram.nameTable[node[i]]);
                    highLightedObjects.push(node[i]);
                    diagram.connectors[index].style.strokeColor = '#1413F8';
                    diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';
                    diagram.connectors[index].targetDecorator.style.fill = '#1413F8';
                    diagram.dataBind();
                }
            }
        }
        function LinksOut() {
            var diagram = document.getElementById("diagram").ej2_instances[0];

            if (diagram.selectedItems.nodes.length) {
                var node = diagram.selectedItems.nodes[0].outEdges;
                for (var i = 0; i < node.length; i++) {
                    var index = diagram.connectors.indexOf(diagram.nameTable[node[i]]);
                    highLightedObjects.push(node[i]);
                    diagram.connectors[index].style.strokeColor = '#1413F8';
                    diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';
                    diagram.connectors[index].targetDecorator.style.fill = '#1413F8';
                    diagram.dataBind();
                }
            }
        }
        function LinksConnector() {
            LinksOut();
            linkedIn();
        }
        function NodesIn() {
            var diagram = document.getElementById("diagram").ej2_instances[0];

            if (diagram.selectedItems.nodes.length) {
                var node = diagram.selectedItems.nodes[0].inEdges;
                for (var i = 0; i < node.length; i++) {
                    var nodeId = diagram.nameTable[node[i]].sourceID;
                    highLightedObjects.push(nodeId);
                    var index = diagram.nodes.indexOf(diagram.nameTable[nodeId]);
                    diagram.nodes[index].style.strokeColor = '#1413F8';
                    diagram.dataBind();
                }
            }
        }
        function NodesOut() {
            var diagram = document.getElementById("diagram").ej2_instances[0];

            if (diagram.selectedItems.nodes.length) {
                var node = diagram.selectedItems.nodes[0].outEdges;
                for (var i = 0; i < node.length; i++) {
                    var nodeId = diagram.nameTable[node[i]].targetID;
                    highLightedObjects.push(nodeId);
                    var index = diagram.nodes.indexOf(diagram.nameTable[nodeId]);
                    diagram.nodes[index].style.strokeColor = '#1413F8';
                    diagram.dataBind();
                }
            }
        }
        function NodesConnect() {
            NodesOut();
            NodesIn();
        }
        function NodeReachable() {
            var diagram = document.getElementById("diagram").ej2_instances[0];

            if (diagram.selectedItems.nodes.length) {
                var connectors_1 = diagram.selectedItems.nodes[0].outEdges;
                var nodeList = foundNode(connectors_1, []);
                for (var i = 0; i < nodeList.length; i++) {
                    var index = diagram.connectors.indexOf(diagram.nameTable[nodeList[i]]);
                    highLightedObjects.push(nodeList[i]);
                    diagram.connectors[index].style.strokeColor = '#1413F8';
                    diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';
                    diagram.connectors[index].targetDecorator.style.fill = '#1413F8';
                    diagram.dataBind();
                }
            }
        }
        function foundNode(list, nodeList) {
            var diagram = document.getElementById("diagram").ej2_instances[0];

            for (var i = 0; i < list.length; i++) {
                var connector = diagram.nameTable[list[i]];
                if (nodeList.indexOf(connector.id) > -1) {
                    break;
                }
                if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {
                    nodeList.push(connector.id);
                }
                if (diagram.nameTable[connector.targetID].outEdges.length) {
                    if (list.indexOf(connector.targetID) === -1) {
                        foundNode(diagram.nameTable[connector.targetID].outEdges, nodeList);
                    }
                }
            }
            return nodeList;
        }
        function Unhighlight() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            for (var i = highLightedObjects.length - 1; i >= 0; i--) {
                if (diagram.nameTable[highLightedObjects[i]] instanceof ej.diagrams.Node) {
                    var index = diagram.nodes.indexOf(diagram.nameTable[highLightedObjects[i]]);
                    diagram.nodes[index].style.strokeColor = '#E8DFB6';
                    diagram.dataBind();
                }
                else {
                    var index = diagram.connectors.indexOf(diagram.nameTable[highLightedObjects[i]]);
                    diagram.connectors[index].style.strokeColor = '#8D8D8D';
                    diagram.connectors[index].targetDecorator.style.strokeColor = '#8D8D8D';
                    diagram.connectors[index].targetDecorator.style.fill = '#8D8D8D';
                    diagram.dataBind();
                }
            }
            highLightedObjects = [];
        }
        function created() {
            var diagram = document.getElementById("diagram").ej2_instances[0];

            diagram.selectionChange = (arg) => {
                applyChanges(selectedButton);
            };
            diagram.select([diagram.nodes[2]]);
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample demonstrates how we can process and get the consecutive nodes and connectors respectively.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Flow Execution in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        We can get the inward connections and outward connections of the node using <code>inEdges</code> and <code>outEdges</code>        properties of the node. By using this connector’s name collection, we can find the node using <code>getObject</code>.
        And also, we can get the nodes connected on the connector using <code>sourceNode</code> and <code>targetNode</code>        properties of the connector. method can be used to print the diagrams.
    </p>
    <br>
}
@section Title{
                    <title>ASP.NET Core Diagram Flow Execution Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Flow Execution in ASP.NET Core Diagram Control</h1>
                }