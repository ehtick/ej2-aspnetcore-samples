@page
@model EJ2CoreSampleBrowser.Pages.Diagram.PortModel
 @using Syncfusion.EJ2;
@{
 var getNodeDefaults = "getNodeDefaults";
 var getConnectorDefaults= "getConnectorDefaults";
}
 @section ControlsSection{
    <div class="col-lg-8 control-section">
        <ejs-diagram id="container" width="100%" height="580px" selectionChange="selectChange" getNodeDefaults="@getNodeDefaults" getConnectorDefaults="@getConnectorDefaults" nodes="@Model.nodes" connectors="@Model.Connectors">
            <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
        </ejs-diagram>
    </div>
    <div class="col-lg-4 property-section" style="padding-bottom:10px;">
        <div class="property-panel-header">
            Properties
        </div>
        <div id="propertypanel" class="e-remove-selection ">
            <div class="property-panel-content">
                <div class="row sb-child-row">
                    <div class="col-xs-6">
                        <div style="padding-bottom: 8px">
                            Visibility
                        </div>
                        <div>
                            <ejs-dropdownlist id="portsVisiblity" enabled="true" dataSource="@Model.portvisibility" index="2" change="portVisibilityDropOnChange">
                                <e-dropdownlist-fields value="Value" text="Name"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div style="padding-bottom: 8px">
                            Shape
                        </div>
                        <div>
                            <ejs-dropdownlist id="shape"  enabled="true" placeholder="Select a Shape" dataSource="@Model.shape" change="portShapeDropOnChange">
                                <e-dropdownlist-fields value="Name" text="Name"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-6">
                        <div style="padding-bottom: 8px">
                            Fill Color
                        </div>
                        <div style="padding-bottom: 8px">
                            <ejs-colorpicker id="fill" value="#000" disabled="false" change="colorChange"></ejs-colorpicker>
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div style="padding-bottom: 8px">
                            Stroke Color
                        </div>
                        <div style="padding-bottom: 8px">
                            <ejs-colorpicker id="border" value="#000" disabled="false" change="borderChange"></ejs-colorpicker>
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-6">
                        <div style="padding-bottom: 8px">
                            Stroke Width
                        </div>
                        <div style="padding-bottom: 8px">
                            <ejs-numerictextbox id="size" enabled="true" format="###.##" change="sizeChange" min="1" max="15" value="0" step="0.5"></ejs-numerictextbox>
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div style="padding-bottom: 8px">
                            Size
                        </div>
                        <div style="padding-bottom: 8px">
                            <ejs-numerictextbox id="width" enabled="true" format="###.##" created="Created" change="widthChange" min="1" max="30" value="0" step="1"></ejs-numerictextbox>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
       
        .sb-child-row {
            margin-top: 8px;
        }

        /* To disable pointer events when there is no selection in diagram */
        .e-remove-selection .property-section-content {
            pointer-events: none;
        }

        .property-section .e-remove-selection {
            cursor: not-allowed;
        }

        .row-header {
            font-size: 13px;
            font-weight: 500;
            padding-left: 10px
        }

    </style>
    <script>
        var portVisibilityDrop;
        function getNodeDefaults(obj, diagram) {
            if (obj.id === 'node1' || obj.id === 'node2' || obj.id === 'node4' || obj.id === 'node6') {
                obj.shape = { type: 'Basic', shape: 'Rectangle' };
            } else if (obj.id === 'node3' || obj.id === 'node5' || obj.id === 'node7') {
                obj.shape = { type: 'Basic', shape: 'Diamond' };
            }
            //sets height and width for nodes
            obj.height = 65;
            obj.width = 100;
            obj.style = { fill: '#ebf8fb', strokeColor: '#baeaf5' };
            for (var i = 0; i < obj.ports.length; i++) {
                //sets styles for the ports
                obj.ports[i].style = {
                    fill: '#366f8c',
                    strokeColor: '#366f8c'
                };
                obj.ports[i].width = 6;
                obj.ports[i].height = 6;
                obj.ports[i].visibility = ej.diagrams.PortVisibility.Visible;
            }
        }
        function getConnectorDefaults(connector) {
            connector.type = 'Orthogonal';
            connector.style = { strokeColor: '#8cdcef', strokeWidth: 1 };
            connector.targetDecorator = { width: 5, height: 5, style: { fill: '#8cdcef', strokeColor: '#8cdcef' } };
        }

        function colorChange(args) {
            applyPortStyle('fillcolor', args.currentValue.rgba);
        }

        function borderChange(args) {
            applyPortStyle('strokecolor', args.currentValue.rgba);
        }

        function sizeChange(args) {
            applyPortStyle('size', args.value);
        }

        function widthChange(args) {
            applyPortStyle('strokewidth', args.value);
        }

        function getPort() {
            var diagram = document.getElementById("container").ej2_instances[0];
            var ports = [];
            if (diagram.selectedItems.nodes.length > 0) {
                var node = diagram.selectedItems.nodes[0];
                return node.ports;
            }
            return ports;
        }

        function selectChange(args) {
            portVisibilityDrop = document.getElementById("portsVisiblity").ej2_instances[0];
            var portFillDrop = document.getElementById("fill").ej2_instances[0];
            var portBorderDrop = document.getElementById("border").ej2_instances[0];
            var portShapeDrop = document.getElementById("shape").ej2_instances[0];
            var portSizeNum = document.getElementById("size").ej2_instances[0];
            var portWidthNum = document.getElementById("width").ej2_instances[0];


            if (args.state === 'Changed') {
                var appearance = document.getElementById('propertypanel');
                var selectedElement = document.getElementsByClassName('e-remove-selection');
                if (args.newValue) {
                    if (!appearance.classList.contains('e-remove-selection')) {
                        appearance.classList.add('e-remove-selection');
                    }
                    if (args.newValue[0] instanceof ej.diagrams.Node && selectedElement.length) {
                        selectedElement[0].classList.remove('e-remove-selection');
                        var port = getPort()[0];
                        portVisibilityDrop.value = port.visibility;
                        portVisibilityDrop.dataBind();
                        portFillDrop.value = port.style.fill;
                        portFillDrop.dataBind();
                        portBorderDrop.value = port.style.strokeColor;
                        portBorderDrop.dataBind();
                        portShapeDrop.value = port.shape;
                        portShapeDrop.dataBind();
                        portSizeNum.value = port.height;
                        portSizeNum.dataBind();
                        portWidthNum.value = port.style.strokeWidth;
                        portWidthNum.dataBind();
                    }
                }
            }
        }

        function applyPortStyle(propertyName, propertyValue) {
            var diagram = document.getElementById("container").ej2_instances[0];
            var ports = getPort();
            for (var j = 0; j < ports.length; j++) {
                var port = ports[j];
                if (propertyName === 'size') {
                    port.height = propertyValue;
                    port.width = propertyValue;
                } else if (propertyName === 'strokewidth') {
                    port.style.strokeWidth = propertyValue;
                } else if (propertyName === 'strokecolor') {
                    port.style.strokeColor = propertyValue;
                } else if (propertyName === 'fillcolor') {
                    port.style.fill = propertyValue;
                }
            }
            diagram.dataBind();
        }

        function Created() {
            var diagram = document.getElementById("container").ej2_instances[0];
            diagram.select([diagram.nodes[0]]);
            diagram.dataBind();
        }

        function portVisibilityDropOnChange(args) {
            var diagram = document.getElementById("container").ej2_instances[0];
            var port = getPort();
            if (port) {
                for (var j = 0; j < port.length; j++) {
                        port[j].visibility = portVisibilityDrop.value;
                }
            }
            diagram.dataBind();
        }

        function portShapeDropOnChange(args) {
            var portShapeDrop = document.getElementById("shape").ej2_instances[0];
            var diagram = document.getElementById("container").ej2_instances[0];
            var port = getPort();
            for (var j = 0; j < port.length; j++) {
                switch (portShapeDrop.value) {
                    case 'X':
                        port[j].shape = 'X';
                        break;
                    case 'Circle':
                        port[j].shape = 'Circle';
                        break;
                    case 'Square':
                        port[j].shape = 'Square';
                        break;
                    case 'Custom':
                        port[j].shape = 'Custom';
                        port[j].pathData = 'M6.805,0L13.61,10.703L0,10.703z';
                        break;
                }
                diagram.dataBind();
            }
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the process flow of publishing a book using connection points. Connection points are static points over the shapes that allow creating connections to the shapes. Customizing the size and appearance of the connection
        points is illustrated in this example.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Ports in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This example shows how to add connection ports to shapes. The
        <code>ports</code> property of the node defines the static connection ports. The
        <code>offset</code>,
        <code>horizontalAlignment</code>,
        <code>verticalAlignment</code> and
        <code>margin</code> properties of the ports define its position.
    </p>
    <p>
        The
        <code>style</code> property of the port can be used to customize its appearance. The
        <code>visibility</code> property can also be used to define when the connection ports should be visible.
    </p>
    <p> In this example, the appearance and visibility of the ports can be customized using the options added to the property panel.</p>
}
@section Title{
                    <title>ASP.NET Core Diagram Ports Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Ports in ASP.NET Core Diagram Control</h1>
                }