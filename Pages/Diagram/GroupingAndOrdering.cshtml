@page
@model EJ2CoreSampleBrowser.Pages.Diagram.GroupingAndOrderingModel
@using Syncfusion.EJ2.Diagrams;
@{
    var getTool = "getTool";
    var getSymbolNode = "getSymbolNodes";
    var getSymbolInfo = "getSymbolInfo";

}
@section ControlsSection{
    <div class="control-section" >
        <ejs-toolbar id="toolbarEditor" clicked="toolbarClick">
            <e-toolbar-items>
                <e-toolbar-item prefixIcon="e-icons e-group-1" disabled="true" tooltipText="Group"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-ungroup-1" disabled="true" tooltipText="UnGroup"></e-toolbar-item>
                <e-toolbar-item type="Separator"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-bring-forward" disabled="true" tooltipText="Bring Forward"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-bring-to-front" disabled="true" tooltipText="Bring To Front"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-send-backward" disabled="true" tooltipText="Send Backward"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-send-to-back" disabled="true" tooltipText="Send To Back"></e-toolbar-item>
                <e-toolbar-item template="#fontfamily" type=Input tooltipText="Font Style"></e-toolbar-item>
                <e-toolbar-item type="Separator"></e-toolbar-item>
                <e-toolbar-item template="#fontSize" type=Input tooltipText="Font Size"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-bold e-icons" disabled="true" tooltipText="Bold"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-italic e-icons" disabled="true" tooltipText="Italic"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-underline" disabled="true" tooltipText="Underline"></e-toolbar-item>
                <e-toolbar-item type="Separator"></e-toolbar-item>
                <e-toolbar-item template="#fontColors" type=Input cssClass="tb-item-middle" tooltipText="Font Color"></e-toolbar-item>

            </e-toolbar-items>
        </ejs-toolbar>
        <div>
            <ejs-dropdownlist id="fontfamily" dataSource="@Model.fontFamilyItems" index="0" select="updateAnnotationValue"></ejs-dropdownlist>
        </div>
        <div>
            <ejs-numerictextbox id="fontSize" format="##" value="12" min="1" max="20" step="1" Type="text" change="updateAnnotationValue"></ejs-numerictextbox>
        </div>
        <div>
            <ejs-colorpicker id="fontColors" mode="Palette" change="changeFontColor"></ejs-colorpicker>
        </div>
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
            </div> 
            <div id="palette-space" class="sb-mobile-palette">
                <ejs-symbolpalette id="symbolPalette" getNodeDefaults="@getSymbolNode" symbolHeight="50" symbolWidth="50" expandMode="@Model.Multiple" width="100%" height="700px" palettes="@Model.Palette" symbolMargin="new SymbolPaletteMargin() { Left=5,Right=5,Top=5,Bottom=10}" getSymbolInfo="@getSymbolInfo">
                </ejs-symbolpalette>
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                <ejs-diagram id="diagram" width="100%" height="700px" created="create" nodes="@Model.nodes" selectionChange = "selectionChange" onUserHandleMouseDown = "userHandelClick"> 
                     <e-diagram-rulersettings showRulers="true"></e-diagram-rulersettings>
                       <e-diagram-selecteditems constraints="Rotate" userHandle="@Model.Userhandle"></e-diagram-selecteditems>
                    <e-diagram-snapsettings horizontalGridlines="@Model.gridLines" verticalGridlines="@Model.gridLines"></e-diagram-snapsettings>
                </ejs-diagram>
            </div>
        </div>

    <style>
        /* Symbol palette alignment */
         .sb-mobile-palette {
            width: 240px;
            height: 100%;
            float: left;
        }

        .sb-mobile-palette-bar {
            display: none;
        }

        /* Diagram alignment */
        .sb-mobile-diagram {
            width: calc(100% - 242px);
            height: 100%;
            float: left;
        }

        @@media (max-width: 550px) {

            .sb-mobile-palette {
                z-index: 19;
                position: absolute;
                display: none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 39%;
                height: 100%;
            }

            .sb-mobile-palette-bar {
                display: block;
                width: 100%;
                background: #fafafa;
                padding: 10px 10px;
                border: 0.5px solid #e0e0e0;
                min-height: 40px;
            }

            .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }

            #palette-icon {
                font-size: 20px;
            }
        }

        .sb-mobile-palette-open {
            position: absolute;
            display: block;
            right: 15px;
        }
    </style>
    <script>
        var toolbarObj={};
    function create() {
        var diagram = document.getElementById("diagram").ej2_instances[0];
        toolbarObj = document.getElementById("toolbarEditor").ej2_instances[0];
        diagram.drawingObject = { type : "Orthogonal"};
        diagram.dataBind();
    }
     var handles = [
    {
        name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',
        visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }
    },
    {
        name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',
        visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }
    },
    {
        name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',
        visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }
    },
    ];
   function selectionChange(args) 
  { 
  if(args.state === "Changed")
  {
      var diagram = document.getElementById("diagram").ej2_instances[0];
    var selectedItems = diagram.selectedItems.nodes;
    selectedItems = selectedItems.concat(diagram.selectedItems.connectors);
    if(selectedItems.length===0){
      toolbarObj.items[0].disabled = true;
      toolbarObj.items[1].disabled = true;
      toolbarObj.items[3].disabled = true;
      toolbarObj.items[4].disabled = true;
      toolbarObj.items[5].disabled = true;
      toolbarObj.items[6].disabled = true;
      toolbarObj.items[8].disabled = false;
      toolbarObj.items[10].disabled = false;
      toolbarObj.items[11].disabled = true;
      toolbarObj.items[12].disabled = true;
      toolbarObj.items[13].disabled = true;
      toolbarObj.items[14].disabled = false;
      }
      if(selectedItems.length === 1){
        enableItems();
        disableMultiselectedItems(selectedItems);
       
      if(selectedItems[0].children !== undefined && selectedItems[0].children.length>0){
        toolbarObj.items[1].disabled = false;
        disableMultiselectedItems(selectedItems);
      }
      else{
        toolbarObj.items[1].disabled = true;
      }
      
      }
      if(selectedItems.length > 1){
        enableItems();
        toolbarObj.items[0].disabled = false; 
        toolbarObj.items[1].disabled = true;
        disableMultiselectedItems(selectedItems);
      }
    if(args.newValue.length>0 && args.newValue[0] instanceof ej.diagrams.Node){
      diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All|ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };
        if(diagram.selectedItems.nodes.length>0){
           drawingNode = diagram.selectedItems.nodes[diagram.selectedItems.nodes.length-1];
        }
      }
    else
    {
    diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All&~ej.diagrams.SelectorConstraints.UserHandle };
    }
  }
  };

function enableItems()
{
  toolbarObj.items[3].disabled = false;
  toolbarObj.items[4].disabled = false;
  toolbarObj.items[5].disabled = false;
  toolbarObj.items[6].disabled = false;
}
function disableMultiselectedItems(selectedItems){
    for(let i=0;i<selectedItems.length;i++){
      if(selectedItems[i].annotations[0] !== undefined){
        toolbarObj.items[8].disabled = false;
        toolbarObj.items[10].disabled = false;
        toolbarObj.items[11].disabled = false;
        toolbarObj.items[12].disabled = false;
        toolbarObj.items[13].disabled = false;
        toolbarObj.items[14].disabled = false;
      }
      else{
        toolbarObj.items[8].disabled = false;
        toolbarObj.items[10].disabled = false;
        toolbarObj.items[11].disabled = true;
        toolbarObj.items[12].disabled = true;
        toolbarObj.items[13].disabled = true;
        toolbarObj.items[14].disabled = false;
      }
    }
}
    function userHandelClick(args){
         var diagram = document.getElementById("diagram").ej2_instances[0];
        switch(args.element.name)
        {
            case 'Delete':
                diagram.remove();
                break;
            case 'Clone':
               diagram.paste(diagram.selectedItems.selectedObjects);
               break;
            case 'Draw':
                diagram.drawingObject.type = diagram.drawingObject.type?diagram.drawingObject.type:'Orthogonal';
                diagram.drawingObject.sourceID = drawingNode.id;
                diagram.dataBind();
                break;
        }
    }

        //Toolbar functionality
function toolbarClick(args) {
    var diagram = document.getElementById("diagram").ej2_instances[0];
    switch (args.item.tooltipText) {
        case 'Group':
            diagram.group();
            toolbarObj.items[0].disabled = true;
            toolbarObj.items[1].disabled = false;
            break;
        case 'UnGroup':
            diagram.unGroup();
            break;
        case 'Bring Forward':
            diagram.moveForward();
            break;
        case 'Bring To Front':
            diagram.bringToFront();
            break;
        case 'Send Backward':
            diagram.sendBackward();
            break;
        case 'Send To Back':
            diagram.sendToBack();
            break;
        case 'Bold':
            updateAnnotationValue('bold',args.value,null,10);
        break;
        case 'Italic':
            updateAnnotationValue('italic',args.value,null,11);  
        break;
        case 'Underline':
            updateAnnotationValue('underline',args.value,null,12);
        break;
      }
      diagram.dataBind();
}
        //Apply the appearence of the Annotation
        function updateAnnotationValue(value, fontSize, fontFamily, index, isSelected) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {
                var node = diagram.selectedItems.nodes[i];
                var option = value.itemData !== undefined ? 'fontfamily' : typeof value.value === 'number' ? 'fontsize' : value;
                for (var j = 0; j < node.annotations.length; j++) {
                    var annotationstyle = node.annotations[j].style;
                    if (option === 'fontsize') {
                        annotationstyle.fontSize = value.value;
                    } else if (option === 'fontfamily') {
                        annotationstyle.fontFamily = value.itemData.value;
                    }
                    else if (option === 'bold') {
                        annotationstyle.bold = !annotationstyle.bold;
                        isSelected = annotationstyle.bold;
                    }
                    else if (option === 'italic') {
                        annotationstyle.italic = !annotationstyle.italic;
                        isSelected = annotationstyle.italic;
                    }
                    else if (option === 'underline') {
                        if (annotationstyle.textDecoration === "None") {
                            annotationstyle.textDecoration = 'Underline';
                            isSelected = true;
                        }
                        else {
                            annotationstyle.textDecoration = 'None';
                            isSelected = false;
                        }
                    }
                    var toolbarTextStyle = document.getElementById("toolbarEditor");
                    if (toolbarTextStyle) {
                        toolbarTextStyle = toolbarTextStyle.ej2_instances[0];
                    }
                    if (toolbarTextStyle.items[index] !== undefined) {
                        var cssClass = toolbarTextStyle.items[index].cssClass;
                        toolbarTextStyle.items[index].cssClass = isSelected ? cssClass + ' tb-item-selected' : cssClass.replace(' tb-item-selected', '');
                        toolbarTextStyle.dataBind();
                    }
                    diagram.dataBind();
                }
            }
        }

        function changeFontColor(arg) {
                var diagram = document.getElementById("diagram").ej2_instances[0];
                  for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {
                      var nodes = diagram.selectedItems.nodes[i];
                      for (var j = 0; j < nodes.annotations.length; j++) {
                          nodes.annotations[j].style.color = arg.currentValue.rgba;
                          diagram.dataBind();
                      }
                  }
              }

        @*custom code end*@
    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates how to group, ungroup, and order commands with the diagram.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>The <code>group</code> method groups diagram nodes and connectors into a single entity.</p>
    <p>The <code>unGroup</code> method ungroups nodes and/or connectors that have been previously grouped together using the group method.</p>

    <p>The <code>moveForward</code> and <code>bringToFront</code> methods adjust the visual order of nodes or connectors within a diagram. This method takes a single parameter that specifies the node or connector that you want to bring forward in the order.</p>

    <p>The <code>sendBackward</code> and <code>sendToBack</code> method allows you to send a selected object to the back of the z-order (the order in which objects are stacked on top of one another).</p>

   <p> In this sample, node annotation styles such as font family, font size, bold, italic, underline, and fontcolor can be customized.</p>
}
@section Title{
                    <title>ASP.NET Core Diagram Grouping and Ordering Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Grouping and Ordering in ASP.NET Core Diagram Control</h1>
                }