@page
@model EJ2CoreSampleBrowser.Pages.Barcode.datamatrixModel
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.DropDowns;
@{
    var value = "Auto";
}
@section ControlsSection{
    <div class="col-lg-8 control-section" style="width:64%">
        <div class="content-wrapper" style="width: 100%;height: 590px;">
            <div class='center'>
                <div class='centercontrol'>
                    <ejs-datamatrixgenerator id="container" width="200px" height="150px" value="Syncfusion" mode="SVG">
                        <e-datamatrixgenerator-displaytext visibility="false"></e-datamatrixgenerator-displaytext>
                    </ejs-datamatrixgenerator>
                </div>

            </div>

        </div>
    </div>
    <div class="col-lg-4 property-section" style="padding-right: 0px; min-width:36%;">
        <div class="property-panel-header">
            Appearance
        </div>
        <div id="propertypanel">
            <div class="property-section-content">
                <div class="row sb-child-row">
                    <div class="col-xs-2 top barcode-panel-left">
                        Value
                    </div>
                    <div class="col-xs-10 barcode-panel-left">
                        <form id="form-element" class="form-horizontal">
                            <div id='barcodevaluediv'>
                                <ejs-textbox id="barcodeValue" value="SYNCFUSION" name="password" class="form-control" change="barcodeValueChange"></ejs-textbox>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div>
                        <div class="col-xs-2 top barcode-panel-left">
                            Width
                        </div>
                        <div class="col-xs-4 barcode-panel-left">
                            <ejs-numerictextbox id="barcodewidth" format="###.##" value="200" enabled="true" step="2" min="150" max="250" change="barcodewidthChange"></ejs-numerictextbox>
                        </div>
                    </div>
                    <div>
                        <div class="col-xs-2 top barcode-panel-left">
                            Height
                        </div>
                        <div class="col-xs-4 barcode-panel-left">
                            <ejs-numerictextbox id="barcodeheight" format="###.##" value="150" enabled="true" step="2" min="100" max="200" change="barcodeheightChange"></ejs-numerictextbox>
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row" style="padding-top: 10px;">
                    <div class="col-xs-6 barcode-panel-left">
                        <div class="col-xs-12 barcode-panel-left">
                            <ejs-checkbox id="textVisibility" checked="false" change="textVisibilityChange"></ejs-checkbox>
                            <div style="display:inline-block; vertical-align:middle; padding-left: 4px;">Text Visibility</div>
                        </div>
                    </div>
                    <div class="col-xs-6 barcode-panel-left">
                        <div class="col-xs-12 barcode-panel-left">
                            <ejs-checkbox id="svgMode" checked="true" change="svgModeChange"></ejs-checkbox>
                            <div style="display:inline-block; vertical-align:middle; padding-left: 4px;">SVG Mode</div>
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div style="margin-top: 15px">
                        <div class="col-xs-3 barcode-panel-left" style="padding-top: 5px;">BG Color</div>
                        <div class="col-xs-3 barcode-panel-left">
                            <ejs-colorpicker id='bgColor' value="#ffffff" change="bgColorChange"></ejs-colorpicker>
                        </div>
                        <div class="col-xs-3 barcode-panel-left" style="padding-top: 5px;">Fore Color</div>
                        <div class="col-xs-3" style="padding-left: 2px;">
                            <ejs-colorpicker id='foreColor' value="#000000" change="foreColorChange"></ejs-colorpicker>
                        </div>
                    </div>
                </div>
                <div class="property-panel-header">
                    Margin
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-2 top barcode-panel-left"> Left</div>
                    <div class="col-xs-4 barcode-panel-left">
                        <ejs-numerictextbox id="marginLeft" format="###.##" value="10" enabled="true" step="1" min="-10" max="30" change="marginLeftChange"></ejs-numerictextbox>
                    </div>
                    <div class="col-xs-2 top barcode-panel-left">Right</div>
                    <div class="col-xs-4 barcode-panel-left">
                        <ejs-numerictextbox id="MarginRight" format="###.##" value="10" enabled="true" step="1" min="-10" max="30" change="MarginRightChange"></ejs-numerictextbox>
                    </div>
                </div>

                <div class="row sb-child-row">
                    <div class="col-xs-2 top barcode-panel-left">Top</div>
                    <div class="col-xs-4 barcode-panel-left">
                        <div style="padding-bottom: 8px">
                            <ejs-numerictextbox id="marginTop" format="###.##" value="10" enabled="true" step="1" min="-10" max="30" change="marginTopChange"></ejs-numerictextbox>
                        </div>
                    </div>
                    <div class="col-xs-2 top barcode-panel-left">Bottom</div>
                    <div class="col-xs-4 barcode-panel-left">
                        <ejs-numerictextbox id="MarginBottom" format="###.##" value="10" enabled="true" step="1" min="-10" max="30" change="MarginBottomChange"></ejs-numerictextbox>
                        <!-- </div> -->
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-6 top barcode-panel-left">DataMatrix Size</div>
                    <div class="col-xs-6 barcode-panel-left">
                        <div class="padding-bottom: 8px">
                            <ejs-dropdownlist id="expand" dataSource="@Model.size" value="value" change="sizeChange"></ejs-dropdownlist>
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-6 top barcode-panel-left">DataMatrix Encoding</div>
                    <div class="col-xs-6 barcode-panel-left">
                        <div style="padding-bottom: 8px">
                            <ejs-dropdownlist id="encoding" dataSource="@Model.encoding" value="value" change="encodingChange"></ejs-dropdownlist>
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-6 top barcode-panel-left">
                        <ejs-button id="downloadbarcodeBtn10" content="Download"></ejs-button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        .column-style {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: calc((100% - 12px) / 3);
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .row-header {
            font-size: 15px;
            font-weight: 500;
        }

        .labelstyle {
            padding-top: 10px;
            float: left;
            padding-right: 10px
        }

        .propertystyle {
            padding-top: 22px;
            font-weight: 600;
            font-size: 15px;
        }

        .sb-child-row {
            margin-top: 8px;
        }

        .center {
            margin-left: 14px;
            margin-right: 17px;
            margin-top: 14px;
            min-width: 280px;
            width: auto;
            border: 2px solid lightgray;
            min-height: 40%;
            padding-top: 35px;
        }

        .col-lg-4-property-section {
            width: 36%;
        }

        .sb-mobile-prop-pane {
            width: 40px;
            padding-left: 24px;
        }

        .sb-mobile-prop-pane {
            padding-left: 2px;
        }

        .sb-mobile-prop-pane {
            padding-left: 30px;
        }

        .sb-mobile-prop-pane {
            padding-left: 30px;
            width: 77%
        }

        .allowedText {
            margin-left: 14px;
            margin-right: 17px;
            margin-top: 14px;
            width: auto;
            height: auto;
        }

        .errorMessage {
            margin-left: 14px;
            margin-right: 17px;
            margin-top: 14px;
            width: auto;
            height: auto;
        }

        .errorMessage {
            margin-left: 14px;
            margin-right: 17px;
            margin-top: 14px;
            width: auto;
            height: auto;
        }


        .top {
            margin-top: 10px;
        }

        .barcode-panel-left {
            padding-left: 0px;
        }

        .centercontrol {
            margin: auto;
            width: 200px;
            height: 200px;
        }

        #password-info {
            position: absolute;
        }
    </style>
    <script type="text/javascript">
        function barcodeValueChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.value = args.value;
            checkASCIINumeric();
        }
        function checkASCIINumeric() {
            var barcode = document.getElementById("container").ej2_instances[0];
            var options = {

                rules: {
                    'password': { minLength: [customFn, 'Invalid input'] }
                },
                keyup() {
                    if (canShowError) {
                        canShowError = false;
                    }
                },
                focusout(args) {
                    barcode.value = (document.getElementById('barcodeValue')).value;
                    barcode.dataBind();
                },
            };
            var formObject = new ej.inputs.FormValidator('#form-element', options);
            canShowError = false;
            formObject.validate();
            if (barcode.encoding === "ASCIINumeric" && isNaN(barcode.value)) {
                canShowError = true;
                formObject.validate();
            }
        }
        function barcodewidthChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.width = args.value;
        }
        function barcodeheightChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.height = args.value;
        }
        function textVisibilityChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.visibility = args.checked;
        }
        let canShowError = false;
        var customFn = (args) => {
            if (canShowError) {
                return false;
            }
            return true;
        };



        function invalidInput() {
            var barcode = document.getElementById("container").ej2_instances[0];
            var options = {

                rules: {
                    'password': { minLength: [customFn, 'Invalid input'] }
                },
                keyup() {
                    if (canShowError) {
                        canShowError = false;
                    }
                },
                focusout(args) {
                    barcode.value = (document.getElementById('barcodeValue')).value;
                    barcode.dataBind();
                },
            };
            var formObject = new ej.inputs.FormValidator('#form-element', options);
            canShowError = true;
            if (!barcode.displayText.text)
                formObject.validate();
        }
        function svgModeChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.mode = args.checked ? 'SVG' : 'Canvas';
        }
        function bgColorChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.backgroundColor = args.currentValue.hex
        }
        function foreColorChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.foreColor = args.currentValue.hex
        }
        function marginLeftChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.margin.left = args.value;
        }
        function MarginRightChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.margin.right = args.value;
        }
        function marginTopChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.margin.top = args.value;
        }
        function MarginBottomChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.margin.bottom = args.value;
        }

        function TextmarginTopChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.margin.top = args.value;
        }
        function TextMarginBottompChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.margin.bottom = args.value;
        }
        function versionChange(args) {
            barcode.version = (args.value);
        }
        function expandChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.position = (args.value);
        }
        function sizeChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.size = args.itemData.value
        }
        function alignChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.alignment = (args.value);
        }
        function displayTextChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.text = args.value;
        }
        function encodingChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.encoding = args.itemData.value;
            checkASCIINumeric();
        }
        document.getElementById('downloadbarcodeBtn10').onclick = function () {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.exportImage("Barcode-Datamatrix", 'PNG');
        };
    </script>
}
@section ActionDescription{
    <p>
        This sample displays encoded numerals or text as an optical label using solid adjacent borders in an L-shape and two other borders consisting of alternating dark and light cells or modules. Within these borders are rows and columns of cells that encode information.
    </p>
}

@section Description{

    <p>
        This example shows how to display encoded text or numerical values as the label using the Barcode component. The `type` property can be used to set the barcode type as data matrix. The data matrix encoding type can be set using the `encoding` property of the Barcode component and the data matrix size can be defined using the `size` property of the component.
    </p>
}
@section Title{
                    <title>ASP.NET Core Barcode Data Matrix Example - Syncfusion Demos </title> 
                }
@section Meta{
                    <meta name="description" content="This example demonstrates the Data Matrix in ASP.NET Core Barcode control. Explore here for more details."/>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Data Matrix in ASP.NET Core Barcode Control</h1>
                }